"use strict";
var $protobuf = protobuf;
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
var proto = $root;
var module = {}
$root.C2S = (function() {
    function C2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    C2S.prototype.key = "";
    C2S.prototype.gamerLoginC2S = null;
    C2S.prototype.gamerLoginGetDataC2S = null;
    C2S.prototype.serverTimeC2S = null;
    C2S.prototype.gamerSubChatChannelC2S = null;
    C2S.prototype.gamerChangeNameC2S = null;
    C2S.prototype.gamerChangeAvatarC2S = null;
    C2S.prototype.gamerGetBackpackC2S = null;
    C2S.prototype.gamerSellItemC2S = null;
    C2S.prototype.gamerUseItemC2S = null;
    C2S.prototype.gamerFriendChatC2S = null;
    C2S.prototype.gamerWorldChatC2S = null;
    C2S.prototype.gamerTestChatC2S = null;
    C2S.prototype.gamerClubRequestC2S = null;
    C2S.prototype.gamerNewFriendReqC2S = null;
    C2S.prototype.gamerDelFriendC2S = null;
    C2S.prototype.gamerProcessFriendReqC2S = null;
    C2S.prototype.gamerGetMailC2S = null;
    C2S.prototype.gamerDelMailC2S = null;
    C2S.prototype.gamerDelHaveReadMailC2S = null;
    C2S.prototype.gamerOneKeyRcvMailRewardC2S = null;
    C2S.prototype.gamerChangeMailStateC2S = null;
    C2S.prototype.gamerNewHeroC2S = null;
    C2S.prototype.gamerUpgradeHeroC2S = null;
    C2S.prototype.gamerUseHeroMedicineC2S = null;
    C2S.prototype.gamerUpStarHeroC2S = null;
    C2S.prototype.gamerUpHeroSkillC2S = null;
    C2S.prototype.gamerGetHeroC2S = null;
    C2S.prototype.gamerPVPLoadingC2S = null;
    C2S.prototype.gamerPVPSyncC2S = null;
    C2S.prototype.gamerReliveC2S = null;
    C2S.prototype.gamerGetRealTimeRankC2S = null;
    C2S.prototype.gamerCheckPVPBattleC2S = null;
    C2S.prototype.gamerUploadWXInfoC2S = null;
    C2S.prototype.gamerGetNoviceGuideC2S = null;
    C2S.prototype.gamerNoviceGuideChangeC2S = null;
    C2S.prototype.gamerMatchC2S = null;
    C2S.prototype.gamerCancelMatchC2S = null;
    C2S.prototype.gamerGetRewardC2S = null;
    C2S.prototype.gamerUseIconC2S = null;
    C2S.prototype.gamerExtractGashaponC2S = null;
    C2S.prototype.gamerGetGashaponPreviewC2S = null;
    C2S.prototype.getActivityRewardC2S = null;
    C2S.prototype.createGuildC2S = null;
    C2S.prototype.guildGamerLoginC2S = null;
    C2S.prototype.guildGamerLoginoutC2S = null;
    C2S.prototype.dissolutionGuildC2S = null;
    C2S.prototype.getGuildC2S = null;
    C2S.prototype.getGuildListC2S = null;
    C2S.prototype.applyJoinGuildC2S = null;
    C2S.prototype.approvalJoinGuildC2S = null;
    C2S.prototype.inviteJoinGuildC2S = null;
    C2S.prototype.agreeJoinGuildC2S = null;
    C2S.prototype.quitGuildC2S = null;
    C2S.prototype.kickOutGuildC2S = null;
    C2S.prototype.guildChatC2S = null;
    C2S.prototype.gMC2S = null;
    C2S.prototype.checkPointListC2S = null;
    C2S.prototype.getPlotStarRewardC2S = null;
    C2S.prototype.buyTimesCheckPointC2S = null;
    C2S.prototype.sweepCheckPointC2S = null;
    C2S.prototype.gamerSettlePVEC2S = null;
    C2S.prototype.draugListC2S = null;
    C2S.prototype.awakenDraugC2S = null;
    C2S.prototype.putDraugIntoPackC2S = null;
    C2S.prototype.swallowDraugC2S = null;
    C2S.prototype.decomposeDraugC2S = null;
    C2S.prototype.lockDraugC2S = null;
    C2S.prototype.wearDraugC2S = null;
    C2S.prototype.unwearDraugC2S = null;
    C2S.prototype.draugSelectHeroC2S = null;
    C2S.prototype.heroGroupListC2S = null;
    C2S.prototype.unlockHeroGroupC2S = null;
    C2S.prototype.changeNameHeroGroupC2S = null;
    C2S.prototype.heroGroupChangeHeroC2S = null;
    C2S.prototype.heroGroupChangeSkillC2S = null;
    C2S.prototype.buyFatigueC2S = null;
    C2S.prototype.getFatigueWelfareC2S = null;
    C2S.prototype.upStarEquipC2S = null;
    C2S.prototype.eatEquipsC2S = null;
    C2S.prototype.desEquipC2S = null;
    C2S.prototype.takeOnEquipC2S = null;
    C2S.prototype.takeOffEquipC2S = null;
    C2S.prototype.redSpotC2S = null;
    C2S.prototype.makeTeamC2S = null;
    C2S.prototype.setTeamAimC2S = null;
    C2S.prototype.joinTeamC2S = null;
    C2S.prototype.exitTeamC2S = null;
    C2S.prototype.turnOverTeamLeaderC2S = null;
    C2S.prototype.inviteTeamC2S = null;
    C2S.prototype.rejectTeamC2S = null;
    C2S.prototype.kickTeamC2S = null;
    C2S.prototype.setTeamHelpC2S = null;
    C2S.prototype.setTeamHeroC2S = null;
    C2S.prototype.switchTeamReadyC2S = null;
    C2S.prototype.teamBattleC2S = null;
    C2S.prototype.getDanInfoC2S = null;
    C2S.prototype.getDuelRankC2S = null;
    C2S.prototype.sysListC2S = null;
    C2S.prototype.sysOpenShowC2S = null;
    C2S.prototype.getQuestsC2S = null;
    C2S.prototype.getQuestRewardC2S = null;
    C2S.prototype.getDailyQuestRewardC2S = null;
    C2S.prototype.gamerHeroImageChooseC2S = null;
    C2S.prototype.gamerHeroImageChangeC2S = null;
    C2S.prototype.gamerBuyRollC2S = null;
    C2S.prototype.getGamerSecretLandC2S = null;
    C2S.prototype.gamerSecretLandBattleRewardC2S = null;
    C2S.prototype.gamerSecretLandWeekRewardC2S = null;
    C2S.prototype.gamerSecretLandRankC2S = null;
    C2S.prototype.getGamerSecretLandInfoC2S = null;
    C2S.prototype.gamerChangeItemIsSawC2S = null;
    C2S.create = function create(properties) {
        return new C2S(properties);
    };
    C2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && message.hasOwnProperty("key"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
        if (message.gamerLoginC2S != null && message.hasOwnProperty("gamerLoginC2S"))
            $root.GamerLoginC2S.encode(message.gamerLoginC2S, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.gamerLoginGetDataC2S != null && message.hasOwnProperty("gamerLoginGetDataC2S"))
            $root.GamerLoginGetDataC2S.encode(message.gamerLoginGetDataC2S, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.serverTimeC2S != null && message.hasOwnProperty("serverTimeC2S"))
            $root.ServerTimeC2S.encode(message.serverTimeC2S, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.gamerSubChatChannelC2S != null && message.hasOwnProperty("gamerSubChatChannelC2S"))
            $root.GamerSubChatChannelC2S.encode(message.gamerSubChatChannelC2S, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.gamerChangeNameC2S != null && message.hasOwnProperty("gamerChangeNameC2S"))
            $root.GamerChangeNameC2S.encode(message.gamerChangeNameC2S, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.gamerChangeAvatarC2S != null && message.hasOwnProperty("gamerChangeAvatarC2S"))
            $root.GamerChangeAvatarC2S.encode(message.gamerChangeAvatarC2S, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.gamerGetBackpackC2S != null && message.hasOwnProperty("gamerGetBackpackC2S"))
            $root.GamerGetBackpackC2S.encode(message.gamerGetBackpackC2S, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.gamerSellItemC2S != null && message.hasOwnProperty("gamerSellItemC2S"))
            $root.GamerSellItemC2S.encode(message.gamerSellItemC2S, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.gamerUseItemC2S != null && message.hasOwnProperty("gamerUseItemC2S"))
            $root.GamerUseItemC2S.encode(message.gamerUseItemC2S, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.gamerFriendChatC2S != null && message.hasOwnProperty("gamerFriendChatC2S"))
            $root.GamerFriendChatC2S.encode(message.gamerFriendChatC2S, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.gamerWorldChatC2S != null && message.hasOwnProperty("gamerWorldChatC2S"))
            $root.GamerWorldChatC2S.encode(message.gamerWorldChatC2S, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.gamerTestChatC2S != null && message.hasOwnProperty("gamerTestChatC2S"))
            $root.GamerTestChatC2S.encode(message.gamerTestChatC2S, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.gamerClubRequestC2S != null && message.hasOwnProperty("gamerClubRequestC2S"))
            $root.GamerClubRequestC2S.encode(message.gamerClubRequestC2S, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.gamerNewFriendReqC2S != null && message.hasOwnProperty("gamerNewFriendReqC2S"))
            $root.GamerNewFriendReqC2S.encode(message.gamerNewFriendReqC2S, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        if (message.gamerDelFriendC2S != null && message.hasOwnProperty("gamerDelFriendC2S"))
            $root.GamerDelFriendC2S.encode(message.gamerDelFriendC2S, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
        if (message.gamerProcessFriendReqC2S != null && message.hasOwnProperty("gamerProcessFriendReqC2S"))
            $root.GamerProcessFriendReqC2S.encode(message.gamerProcessFriendReqC2S, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
        if (message.gamerGetMailC2S != null && message.hasOwnProperty("gamerGetMailC2S"))
            $root.GamerGetMailC2S.encode(message.gamerGetMailC2S, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
        if (message.gamerDelMailC2S != null && message.hasOwnProperty("gamerDelMailC2S"))
            $root.GamerDelMailC2S.encode(message.gamerDelMailC2S, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
        if (message.gamerDelHaveReadMailC2S != null && message.hasOwnProperty("gamerDelHaveReadMailC2S"))
            $root.GamerDelHaveReadMailC2S.encode(message.gamerDelHaveReadMailC2S, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.gamerOneKeyRcvMailRewardC2S != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardC2S"))
            $root.GamerOneKeyRcvMailRewardC2S.encode(message.gamerOneKeyRcvMailRewardC2S, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
        if (message.gamerChangeMailStateC2S != null && message.hasOwnProperty("gamerChangeMailStateC2S"))
            $root.GamerChangeMailStateC2S.encode(message.gamerChangeMailStateC2S, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
        if (message.gamerNewHeroC2S != null && message.hasOwnProperty("gamerNewHeroC2S"))
            $root.GamerNewHeroC2S.encode(message.gamerNewHeroC2S, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
        if (message.gamerUpgradeHeroC2S != null && message.hasOwnProperty("gamerUpgradeHeroC2S"))
            $root.GamerUpgradeHeroC2S.encode(message.gamerUpgradeHeroC2S, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
        if (message.gamerUseHeroMedicineC2S != null && message.hasOwnProperty("gamerUseHeroMedicineC2S"))
            $root.GamerUseHeroMedicineC2S.encode(message.gamerUseHeroMedicineC2S, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
        if (message.gamerUpStarHeroC2S != null && message.hasOwnProperty("gamerUpStarHeroC2S"))
            $root.GamerUpStarHeroC2S.encode(message.gamerUpStarHeroC2S, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
        if (message.gamerUpHeroSkillC2S != null && message.hasOwnProperty("gamerUpHeroSkillC2S"))
            $root.GamerUpHeroSkillC2S.encode(message.gamerUpHeroSkillC2S, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
        if (message.gamerGetHeroC2S != null && message.hasOwnProperty("gamerGetHeroC2S"))
            $root.GamerGetHeroC2S.encode(message.gamerGetHeroC2S, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
        if (message.gamerPVPLoadingC2S != null && message.hasOwnProperty("gamerPVPLoadingC2S"))
            $root.GamerPVPLoadingC2S.encode(message.gamerPVPLoadingC2S, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();
        if (message.gamerPVPSyncC2S != null && message.hasOwnProperty("gamerPVPSyncC2S"))
            $root.GamerPVPSyncC2S.encode(message.gamerPVPSyncC2S, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
        if (message.gamerReliveC2S != null && message.hasOwnProperty("gamerReliveC2S"))
            $root.GamerReliveC2S.encode(message.gamerReliveC2S, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
        if (message.gamerGetRealTimeRankC2S != null && message.hasOwnProperty("gamerGetRealTimeRankC2S"))
            $root.GamerGetRealTimeRankC2S.encode(message.gamerGetRealTimeRankC2S, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
        if (message.gamerCheckPVPBattleC2S != null && message.hasOwnProperty("gamerCheckPVPBattleC2S"))
            $root.GamerCheckPVPBattleC2S.encode(message.gamerCheckPVPBattleC2S, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
        if (message.gamerUploadWXInfoC2S != null && message.hasOwnProperty("gamerUploadWXInfoC2S"))
            $root.GamerUploadWXInfoC2S.encode(message.gamerUploadWXInfoC2S, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
        if (message.gamerGetNoviceGuideC2S != null && message.hasOwnProperty("gamerGetNoviceGuideC2S"))
            $root.GamerGetNoviceGuideC2S.encode(message.gamerGetNoviceGuideC2S, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
        if (message.gamerNoviceGuideChangeC2S != null && message.hasOwnProperty("gamerNoviceGuideChangeC2S"))
            $root.GamerNoviceGuideChangeC2S.encode(message.gamerNoviceGuideChangeC2S, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
        if (message.gamerMatchC2S != null && message.hasOwnProperty("gamerMatchC2S"))
            $root.GamerMatchC2S.encode(message.gamerMatchC2S, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
        if (message.gamerCancelMatchC2S != null && message.hasOwnProperty("gamerCancelMatchC2S"))
            $root.GamerCancelMatchC2S.encode(message.gamerCancelMatchC2S, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
        if (message.gamerGetRewardC2S != null && message.hasOwnProperty("gamerGetRewardC2S"))
            $root.GamerGetRewardC2S.encode(message.gamerGetRewardC2S, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
        if (message.gamerUseIconC2S != null && message.hasOwnProperty("gamerUseIconC2S"))
            $root.GamerUseIconC2S.encode(message.gamerUseIconC2S, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
        if (message.gamerExtractGashaponC2S != null && message.hasOwnProperty("gamerExtractGashaponC2S"))
            $root.GamerExtractGashaponC2S.encode(message.gamerExtractGashaponC2S, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
        if (message.gamerGetGashaponPreviewC2S != null && message.hasOwnProperty("gamerGetGashaponPreviewC2S"))
            $root.GamerGetGashaponPreviewC2S.encode(message.gamerGetGashaponPreviewC2S, writer.uint32(/* id 42, wireType 2 =*/338).fork()).ldelim();
        if (message.getActivityRewardC2S != null && message.hasOwnProperty("getActivityRewardC2S"))
            $root.GetActivityRewardC2S.encode(message.getActivityRewardC2S, writer.uint32(/* id 43, wireType 2 =*/346).fork()).ldelim();
        if (message.createGuildC2S != null && message.hasOwnProperty("createGuildC2S"))
            $root.CreateGuildC2S.encode(message.createGuildC2S, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
        if (message.guildGamerLoginC2S != null && message.hasOwnProperty("guildGamerLoginC2S"))
            $root.GuildGamerLoginC2S.encode(message.guildGamerLoginC2S, writer.uint32(/* id 45, wireType 2 =*/362).fork()).ldelim();
        if (message.guildGamerLoginoutC2S != null && message.hasOwnProperty("guildGamerLoginoutC2S"))
            $root.GuildGamerLoginoutC2S.encode(message.guildGamerLoginoutC2S, writer.uint32(/* id 46, wireType 2 =*/370).fork()).ldelim();
        if (message.dissolutionGuildC2S != null && message.hasOwnProperty("dissolutionGuildC2S"))
            $root.DissolutionGuildC2S.encode(message.dissolutionGuildC2S, writer.uint32(/* id 47, wireType 2 =*/378).fork()).ldelim();
        if (message.getGuildC2S != null && message.hasOwnProperty("getGuildC2S"))
            $root.GetGuildC2S.encode(message.getGuildC2S, writer.uint32(/* id 48, wireType 2 =*/386).fork()).ldelim();
        if (message.getGuildListC2S != null && message.hasOwnProperty("getGuildListC2S"))
            $root.GetGuildListC2S.encode(message.getGuildListC2S, writer.uint32(/* id 49, wireType 2 =*/394).fork()).ldelim();
        if (message.applyJoinGuildC2S != null && message.hasOwnProperty("applyJoinGuildC2S"))
            $root.ApplyJoinGuildC2S.encode(message.applyJoinGuildC2S, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
        if (message.approvalJoinGuildC2S != null && message.hasOwnProperty("approvalJoinGuildC2S"))
            $root.ApprovalJoinGuildC2S.encode(message.approvalJoinGuildC2S, writer.uint32(/* id 51, wireType 2 =*/410).fork()).ldelim();
        if (message.inviteJoinGuildC2S != null && message.hasOwnProperty("inviteJoinGuildC2S"))
            $root.InviteJoinGuildC2S.encode(message.inviteJoinGuildC2S, writer.uint32(/* id 52, wireType 2 =*/418).fork()).ldelim();
        if (message.agreeJoinGuildC2S != null && message.hasOwnProperty("agreeJoinGuildC2S"))
            $root.AgreeJoinGuildC2S.encode(message.agreeJoinGuildC2S, writer.uint32(/* id 53, wireType 2 =*/426).fork()).ldelim();
        if (message.quitGuildC2S != null && message.hasOwnProperty("quitGuildC2S"))
            $root.QuitGuildC2S.encode(message.quitGuildC2S, writer.uint32(/* id 54, wireType 2 =*/434).fork()).ldelim();
        if (message.kickOutGuildC2S != null && message.hasOwnProperty("kickOutGuildC2S"))
            $root.KickOutGuildC2S.encode(message.kickOutGuildC2S, writer.uint32(/* id 55, wireType 2 =*/442).fork()).ldelim();
        if (message.guildChatC2S != null && message.hasOwnProperty("guildChatC2S"))
            $root.GuildChatC2S.encode(message.guildChatC2S, writer.uint32(/* id 56, wireType 2 =*/450).fork()).ldelim();
        if (message.gMC2S != null && message.hasOwnProperty("gMC2S"))
            $root.GMC2S.encode(message.gMC2S, writer.uint32(/* id 57, wireType 2 =*/458).fork()).ldelim();
        if (message.checkPointListC2S != null && message.hasOwnProperty("checkPointListC2S"))
            $root.CheckPointListC2S.encode(message.checkPointListC2S, writer.uint32(/* id 58, wireType 2 =*/466).fork()).ldelim();
        if (message.getPlotStarRewardC2S != null && message.hasOwnProperty("getPlotStarRewardC2S"))
            $root.GetPlotStarRewardC2S.encode(message.getPlotStarRewardC2S, writer.uint32(/* id 59, wireType 2 =*/474).fork()).ldelim();
        if (message.buyTimesCheckPointC2S != null && message.hasOwnProperty("buyTimesCheckPointC2S"))
            $root.BuyTimesCheckPointC2S.encode(message.buyTimesCheckPointC2S, writer.uint32(/* id 60, wireType 2 =*/482).fork()).ldelim();
        if (message.sweepCheckPointC2S != null && message.hasOwnProperty("sweepCheckPointC2S"))
            $root.SweepCheckPointC2S.encode(message.sweepCheckPointC2S, writer.uint32(/* id 61, wireType 2 =*/490).fork()).ldelim();
        if (message.gamerSettlePVEC2S != null && message.hasOwnProperty("gamerSettlePVEC2S"))
            $root.GamerSettlePVEC2S.encode(message.gamerSettlePVEC2S, writer.uint32(/* id 62, wireType 2 =*/498).fork()).ldelim();
        if (message.draugListC2S != null && message.hasOwnProperty("draugListC2S"))
            $root.DraugListC2S.encode(message.draugListC2S, writer.uint32(/* id 63, wireType 2 =*/506).fork()).ldelim();
        if (message.awakenDraugC2S != null && message.hasOwnProperty("awakenDraugC2S"))
            $root.AwakenDraugC2S.encode(message.awakenDraugC2S, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
        if (message.putDraugIntoPackC2S != null && message.hasOwnProperty("putDraugIntoPackC2S"))
            $root.PutDraugIntoPackC2S.encode(message.putDraugIntoPackC2S, writer.uint32(/* id 65, wireType 2 =*/522).fork()).ldelim();
        if (message.swallowDraugC2S != null && message.hasOwnProperty("swallowDraugC2S"))
            $root.SwallowDraugC2S.encode(message.swallowDraugC2S, writer.uint32(/* id 66, wireType 2 =*/530).fork()).ldelim();
        if (message.decomposeDraugC2S != null && message.hasOwnProperty("decomposeDraugC2S"))
            $root.DecomposeDraugC2S.encode(message.decomposeDraugC2S, writer.uint32(/* id 67, wireType 2 =*/538).fork()).ldelim();
        if (message.lockDraugC2S != null && message.hasOwnProperty("lockDraugC2S"))
            $root.LockDraugC2S.encode(message.lockDraugC2S, writer.uint32(/* id 68, wireType 2 =*/546).fork()).ldelim();
        if (message.wearDraugC2S != null && message.hasOwnProperty("wearDraugC2S"))
            $root.WearDraugC2S.encode(message.wearDraugC2S, writer.uint32(/* id 69, wireType 2 =*/554).fork()).ldelim();
        if (message.unwearDraugC2S != null && message.hasOwnProperty("unwearDraugC2S"))
            $root.UnwearDraugC2S.encode(message.unwearDraugC2S, writer.uint32(/* id 70, wireType 2 =*/562).fork()).ldelim();
        if (message.draugSelectHeroC2S != null && message.hasOwnProperty("draugSelectHeroC2S"))
            $root.DraugSelectHeroC2S.encode(message.draugSelectHeroC2S, writer.uint32(/* id 71, wireType 2 =*/570).fork()).ldelim();
        if (message.heroGroupListC2S != null && message.hasOwnProperty("heroGroupListC2S"))
            $root.HeroGroupListC2S.encode(message.heroGroupListC2S, writer.uint32(/* id 72, wireType 2 =*/578).fork()).ldelim();
        if (message.unlockHeroGroupC2S != null && message.hasOwnProperty("unlockHeroGroupC2S"))
            $root.UnlockHeroGroupC2S.encode(message.unlockHeroGroupC2S, writer.uint32(/* id 73, wireType 2 =*/586).fork()).ldelim();
        if (message.changeNameHeroGroupC2S != null && message.hasOwnProperty("changeNameHeroGroupC2S"))
            $root.ChangeNameHeroGroupC2S.encode(message.changeNameHeroGroupC2S, writer.uint32(/* id 74, wireType 2 =*/594).fork()).ldelim();
        if (message.heroGroupChangeHeroC2S != null && message.hasOwnProperty("heroGroupChangeHeroC2S"))
            $root.HeroGroupChangeHeroC2S.encode(message.heroGroupChangeHeroC2S, writer.uint32(/* id 75, wireType 2 =*/602).fork()).ldelim();
        if (message.heroGroupChangeSkillC2S != null && message.hasOwnProperty("heroGroupChangeSkillC2S"))
            $root.HeroGroupChangeSkillC2S.encode(message.heroGroupChangeSkillC2S, writer.uint32(/* id 76, wireType 2 =*/610).fork()).ldelim();
        if (message.buyFatigueC2S != null && message.hasOwnProperty("buyFatigueC2S"))
            $root.BuyFatigueC2S.encode(message.buyFatigueC2S, writer.uint32(/* id 77, wireType 2 =*/618).fork()).ldelim();
        if (message.getFatigueWelfareC2S != null && message.hasOwnProperty("getFatigueWelfareC2S"))
            $root.GetFatigueWelfareC2S.encode(message.getFatigueWelfareC2S, writer.uint32(/* id 78, wireType 2 =*/626).fork()).ldelim();
        if (message.upStarEquipC2S != null && message.hasOwnProperty("upStarEquipC2S"))
            $root.UpStarEquipC2S.encode(message.upStarEquipC2S, writer.uint32(/* id 79, wireType 2 =*/634).fork()).ldelim();
        if (message.eatEquipsC2S != null && message.hasOwnProperty("eatEquipsC2S"))
            $root.EatEquipsC2S.encode(message.eatEquipsC2S, writer.uint32(/* id 80, wireType 2 =*/642).fork()).ldelim();
        if (message.desEquipC2S != null && message.hasOwnProperty("desEquipC2S"))
            $root.DesEquipC2S.encode(message.desEquipC2S, writer.uint32(/* id 81, wireType 2 =*/650).fork()).ldelim();
        if (message.takeOnEquipC2S != null && message.hasOwnProperty("takeOnEquipC2S"))
            $root.TakeOnEquipC2S.encode(message.takeOnEquipC2S, writer.uint32(/* id 82, wireType 2 =*/658).fork()).ldelim();
        if (message.takeOffEquipC2S != null && message.hasOwnProperty("takeOffEquipC2S"))
            $root.TakeOffEquipC2S.encode(message.takeOffEquipC2S, writer.uint32(/* id 83, wireType 2 =*/666).fork()).ldelim();
        if (message.redSpotC2S != null && message.hasOwnProperty("redSpotC2S"))
            $root.RedSpotC2S.encode(message.redSpotC2S, writer.uint32(/* id 84, wireType 2 =*/674).fork()).ldelim();
        if (message.makeTeamC2S != null && message.hasOwnProperty("makeTeamC2S"))
            $root.MakeTeamC2S.encode(message.makeTeamC2S, writer.uint32(/* id 85, wireType 2 =*/682).fork()).ldelim();
        if (message.setTeamAimC2S != null && message.hasOwnProperty("setTeamAimC2S"))
            $root.SetTeamAimC2S.encode(message.setTeamAimC2S, writer.uint32(/* id 86, wireType 2 =*/690).fork()).ldelim();
        if (message.joinTeamC2S != null && message.hasOwnProperty("joinTeamC2S"))
            $root.JoinTeamC2S.encode(message.joinTeamC2S, writer.uint32(/* id 87, wireType 2 =*/698).fork()).ldelim();
        if (message.exitTeamC2S != null && message.hasOwnProperty("exitTeamC2S"))
            $root.ExitTeamC2S.encode(message.exitTeamC2S, writer.uint32(/* id 88, wireType 2 =*/706).fork()).ldelim();
        if (message.turnOverTeamLeaderC2S != null && message.hasOwnProperty("turnOverTeamLeaderC2S"))
            $root.TurnOverTeamLeaderC2S.encode(message.turnOverTeamLeaderC2S, writer.uint32(/* id 89, wireType 2 =*/714).fork()).ldelim();
        if (message.inviteTeamC2S != null && message.hasOwnProperty("inviteTeamC2S"))
            $root.InviteTeamC2S.encode(message.inviteTeamC2S, writer.uint32(/* id 90, wireType 2 =*/722).fork()).ldelim();
        if (message.rejectTeamC2S != null && message.hasOwnProperty("rejectTeamC2S"))
            $root.RejectTeamC2S.encode(message.rejectTeamC2S, writer.uint32(/* id 91, wireType 2 =*/730).fork()).ldelim();
        if (message.kickTeamC2S != null && message.hasOwnProperty("kickTeamC2S"))
            $root.KickTeamC2S.encode(message.kickTeamC2S, writer.uint32(/* id 92, wireType 2 =*/738).fork()).ldelim();
        if (message.setTeamHelpC2S != null && message.hasOwnProperty("setTeamHelpC2S"))
            $root.SetTeamHelpC2S.encode(message.setTeamHelpC2S, writer.uint32(/* id 93, wireType 2 =*/746).fork()).ldelim();
        if (message.setTeamHeroC2S != null && message.hasOwnProperty("setTeamHeroC2S"))
            $root.SetTeamHeroC2S.encode(message.setTeamHeroC2S, writer.uint32(/* id 94, wireType 2 =*/754).fork()).ldelim();
        if (message.switchTeamReadyC2S != null && message.hasOwnProperty("switchTeamReadyC2S"))
            $root.SwitchTeamReadyC2S.encode(message.switchTeamReadyC2S, writer.uint32(/* id 95, wireType 2 =*/762).fork()).ldelim();
        if (message.teamBattleC2S != null && message.hasOwnProperty("teamBattleC2S"))
            $root.TeamBattleC2S.encode(message.teamBattleC2S, writer.uint32(/* id 96, wireType 2 =*/770).fork()).ldelim();
        if (message.getDanInfoC2S != null && message.hasOwnProperty("getDanInfoC2S"))
            $root.GetDanInfoC2S.encode(message.getDanInfoC2S, writer.uint32(/* id 97, wireType 2 =*/778).fork()).ldelim();
        if (message.getDuelRankC2S != null && message.hasOwnProperty("getDuelRankC2S"))
            $root.GetDuelRankC2S.encode(message.getDuelRankC2S, writer.uint32(/* id 98, wireType 2 =*/786).fork()).ldelim();
        if (message.sysListC2S != null && message.hasOwnProperty("sysListC2S"))
            $root.SysListC2S.encode(message.sysListC2S, writer.uint32(/* id 99, wireType 2 =*/794).fork()).ldelim();
        if (message.sysOpenShowC2S != null && message.hasOwnProperty("sysOpenShowC2S"))
            $root.SysOpenShowC2S.encode(message.sysOpenShowC2S, writer.uint32(/* id 100, wireType 2 =*/802).fork()).ldelim();
        if (message.getQuestsC2S != null && message.hasOwnProperty("getQuestsC2S"))
            $root.GetQuestsC2S.encode(message.getQuestsC2S, writer.uint32(/* id 101, wireType 2 =*/810).fork()).ldelim();
        if (message.getQuestRewardC2S != null && message.hasOwnProperty("getQuestRewardC2S"))
            $root.GetQuestRewardC2S.encode(message.getQuestRewardC2S, writer.uint32(/* id 102, wireType 2 =*/818).fork()).ldelim();
        if (message.getDailyQuestRewardC2S != null && message.hasOwnProperty("getDailyQuestRewardC2S"))
            $root.GetDailyQuestRewardC2S.encode(message.getDailyQuestRewardC2S, writer.uint32(/* id 103, wireType 2 =*/826).fork()).ldelim();
        if (message.gamerHeroImageChooseC2S != null && message.hasOwnProperty("gamerHeroImageChooseC2S"))
            $root.GamerHeroImageChooseC2S.encode(message.gamerHeroImageChooseC2S, writer.uint32(/* id 104, wireType 2 =*/834).fork()).ldelim();
        if (message.gamerHeroImageChangeC2S != null && message.hasOwnProperty("gamerHeroImageChangeC2S"))
            $root.GamerHeroImageChangeC2S.encode(message.gamerHeroImageChangeC2S, writer.uint32(/* id 105, wireType 2 =*/842).fork()).ldelim();
        if (message.gamerBuyRollC2S != null && message.hasOwnProperty("gamerBuyRollC2S"))
            $root.GamerBuyRollC2S.encode(message.gamerBuyRollC2S, writer.uint32(/* id 106, wireType 2 =*/850).fork()).ldelim();
        if (message.getGamerSecretLandC2S != null && message.hasOwnProperty("getGamerSecretLandC2S"))
            $root.GetGamerSecretLandC2S.encode(message.getGamerSecretLandC2S, writer.uint32(/* id 107, wireType 2 =*/858).fork()).ldelim();
        if (message.gamerSecretLandBattleRewardC2S != null && message.hasOwnProperty("gamerSecretLandBattleRewardC2S"))
            $root.GamerSecretLandBattleRewardC2S.encode(message.gamerSecretLandBattleRewardC2S, writer.uint32(/* id 108, wireType 2 =*/866).fork()).ldelim();
        if (message.gamerSecretLandWeekRewardC2S != null && message.hasOwnProperty("gamerSecretLandWeekRewardC2S"))
            $root.GamerSecretLandWeekRewardC2S.encode(message.gamerSecretLandWeekRewardC2S, writer.uint32(/* id 109, wireType 2 =*/874).fork()).ldelim();
        if (message.gamerSecretLandRankC2S != null && message.hasOwnProperty("gamerSecretLandRankC2S"))
            $root.GamerSecretLandRankC2S.encode(message.gamerSecretLandRankC2S, writer.uint32(/* id 110, wireType 2 =*/882).fork()).ldelim();
        if (message.getGamerSecretLandInfoC2S != null && message.hasOwnProperty("getGamerSecretLandInfoC2S"))
            $root.GetGamerSecretLandInfoC2S.encode(message.getGamerSecretLandInfoC2S, writer.uint32(/* id 111, wireType 2 =*/890).fork()).ldelim();
        if (message.gamerChangeItemIsSawC2S != null && message.hasOwnProperty("gamerChangeItemIsSawC2S"))
            $root.GamerChangeItemIsSawC2S.encode(message.gamerChangeItemIsSawC2S, writer.uint32(/* id 112, wireType 2 =*/898).fork()).ldelim();
        return writer;
    };
    C2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    C2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.C2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.key = reader.string();
                break;
            case 2:
                message.gamerLoginC2S = $root.GamerLoginC2S.decode(reader, reader.uint32());
                break;
            case 3:
                message.gamerLoginGetDataC2S = $root.GamerLoginGetDataC2S.decode(reader, reader.uint32());
                break;
            case 4:
                message.serverTimeC2S = $root.ServerTimeC2S.decode(reader, reader.uint32());
                break;
            case 5:
                message.gamerSubChatChannelC2S = $root.GamerSubChatChannelC2S.decode(reader, reader.uint32());
                break;
            case 6:
                message.gamerChangeNameC2S = $root.GamerChangeNameC2S.decode(reader, reader.uint32());
                break;
            case 7:
                message.gamerChangeAvatarC2S = $root.GamerChangeAvatarC2S.decode(reader, reader.uint32());
                break;
            case 8:
                message.gamerGetBackpackC2S = $root.GamerGetBackpackC2S.decode(reader, reader.uint32());
                break;
            case 9:
                message.gamerSellItemC2S = $root.GamerSellItemC2S.decode(reader, reader.uint32());
                break;
            case 10:
                message.gamerUseItemC2S = $root.GamerUseItemC2S.decode(reader, reader.uint32());
                break;
            case 11:
                message.gamerFriendChatC2S = $root.GamerFriendChatC2S.decode(reader, reader.uint32());
                break;
            case 12:
                message.gamerWorldChatC2S = $root.GamerWorldChatC2S.decode(reader, reader.uint32());
                break;
            case 13:
                message.gamerTestChatC2S = $root.GamerTestChatC2S.decode(reader, reader.uint32());
                break;
            case 14:
                message.gamerClubRequestC2S = $root.GamerClubRequestC2S.decode(reader, reader.uint32());
                break;
            case 15:
                message.gamerNewFriendReqC2S = $root.GamerNewFriendReqC2S.decode(reader, reader.uint32());
                break;
            case 16:
                message.gamerDelFriendC2S = $root.GamerDelFriendC2S.decode(reader, reader.uint32());
                break;
            case 17:
                message.gamerProcessFriendReqC2S = $root.GamerProcessFriendReqC2S.decode(reader, reader.uint32());
                break;
            case 18:
                message.gamerGetMailC2S = $root.GamerGetMailC2S.decode(reader, reader.uint32());
                break;
            case 19:
                message.gamerDelMailC2S = $root.GamerDelMailC2S.decode(reader, reader.uint32());
                break;
            case 20:
                message.gamerDelHaveReadMailC2S = $root.GamerDelHaveReadMailC2S.decode(reader, reader.uint32());
                break;
            case 21:
                message.gamerOneKeyRcvMailRewardC2S = $root.GamerOneKeyRcvMailRewardC2S.decode(reader, reader.uint32());
                break;
            case 22:
                message.gamerChangeMailStateC2S = $root.GamerChangeMailStateC2S.decode(reader, reader.uint32());
                break;
            case 23:
                message.gamerNewHeroC2S = $root.GamerNewHeroC2S.decode(reader, reader.uint32());
                break;
            case 24:
                message.gamerUpgradeHeroC2S = $root.GamerUpgradeHeroC2S.decode(reader, reader.uint32());
                break;
            case 25:
                message.gamerUseHeroMedicineC2S = $root.GamerUseHeroMedicineC2S.decode(reader, reader.uint32());
                break;
            case 26:
                message.gamerUpStarHeroC2S = $root.GamerUpStarHeroC2S.decode(reader, reader.uint32());
                break;
            case 27:
                message.gamerUpHeroSkillC2S = $root.GamerUpHeroSkillC2S.decode(reader, reader.uint32());
                break;
            case 28:
                message.gamerGetHeroC2S = $root.GamerGetHeroC2S.decode(reader, reader.uint32());
                break;
            case 29:
                message.gamerPVPLoadingC2S = $root.GamerPVPLoadingC2S.decode(reader, reader.uint32());
                break;
            case 30:
                message.gamerPVPSyncC2S = $root.GamerPVPSyncC2S.decode(reader, reader.uint32());
                break;
            case 31:
                message.gamerReliveC2S = $root.GamerReliveC2S.decode(reader, reader.uint32());
                break;
            case 32:
                message.gamerGetRealTimeRankC2S = $root.GamerGetRealTimeRankC2S.decode(reader, reader.uint32());
                break;
            case 33:
                message.gamerCheckPVPBattleC2S = $root.GamerCheckPVPBattleC2S.decode(reader, reader.uint32());
                break;
            case 34:
                message.gamerUploadWXInfoC2S = $root.GamerUploadWXInfoC2S.decode(reader, reader.uint32());
                break;
            case 35:
                message.gamerGetNoviceGuideC2S = $root.GamerGetNoviceGuideC2S.decode(reader, reader.uint32());
                break;
            case 36:
                message.gamerNoviceGuideChangeC2S = $root.GamerNoviceGuideChangeC2S.decode(reader, reader.uint32());
                break;
            case 37:
                message.gamerMatchC2S = $root.GamerMatchC2S.decode(reader, reader.uint32());
                break;
            case 38:
                message.gamerCancelMatchC2S = $root.GamerCancelMatchC2S.decode(reader, reader.uint32());
                break;
            case 39:
                message.gamerGetRewardC2S = $root.GamerGetRewardC2S.decode(reader, reader.uint32());
                break;
            case 40:
                message.gamerUseIconC2S = $root.GamerUseIconC2S.decode(reader, reader.uint32());
                break;
            case 41:
                message.gamerExtractGashaponC2S = $root.GamerExtractGashaponC2S.decode(reader, reader.uint32());
                break;
            case 42:
                message.gamerGetGashaponPreviewC2S = $root.GamerGetGashaponPreviewC2S.decode(reader, reader.uint32());
                break;
            case 43:
                message.getActivityRewardC2S = $root.GetActivityRewardC2S.decode(reader, reader.uint32());
                break;
            case 44:
                message.createGuildC2S = $root.CreateGuildC2S.decode(reader, reader.uint32());
                break;
            case 45:
                message.guildGamerLoginC2S = $root.GuildGamerLoginC2S.decode(reader, reader.uint32());
                break;
            case 46:
                message.guildGamerLoginoutC2S = $root.GuildGamerLoginoutC2S.decode(reader, reader.uint32());
                break;
            case 47:
                message.dissolutionGuildC2S = $root.DissolutionGuildC2S.decode(reader, reader.uint32());
                break;
            case 48:
                message.getGuildC2S = $root.GetGuildC2S.decode(reader, reader.uint32());
                break;
            case 49:
                message.getGuildListC2S = $root.GetGuildListC2S.decode(reader, reader.uint32());
                break;
            case 50:
                message.applyJoinGuildC2S = $root.ApplyJoinGuildC2S.decode(reader, reader.uint32());
                break;
            case 51:
                message.approvalJoinGuildC2S = $root.ApprovalJoinGuildC2S.decode(reader, reader.uint32());
                break;
            case 52:
                message.inviteJoinGuildC2S = $root.InviteJoinGuildC2S.decode(reader, reader.uint32());
                break;
            case 53:
                message.agreeJoinGuildC2S = $root.AgreeJoinGuildC2S.decode(reader, reader.uint32());
                break;
            case 54:
                message.quitGuildC2S = $root.QuitGuildC2S.decode(reader, reader.uint32());
                break;
            case 55:
                message.kickOutGuildC2S = $root.KickOutGuildC2S.decode(reader, reader.uint32());
                break;
            case 56:
                message.guildChatC2S = $root.GuildChatC2S.decode(reader, reader.uint32());
                break;
            case 57:
                message.gMC2S = $root.GMC2S.decode(reader, reader.uint32());
                break;
            case 58:
                message.checkPointListC2S = $root.CheckPointListC2S.decode(reader, reader.uint32());
                break;
            case 59:
                message.getPlotStarRewardC2S = $root.GetPlotStarRewardC2S.decode(reader, reader.uint32());
                break;
            case 60:
                message.buyTimesCheckPointC2S = $root.BuyTimesCheckPointC2S.decode(reader, reader.uint32());
                break;
            case 61:
                message.sweepCheckPointC2S = $root.SweepCheckPointC2S.decode(reader, reader.uint32());
                break;
            case 62:
                message.gamerSettlePVEC2S = $root.GamerSettlePVEC2S.decode(reader, reader.uint32());
                break;
            case 63:
                message.draugListC2S = $root.DraugListC2S.decode(reader, reader.uint32());
                break;
            case 64:
                message.awakenDraugC2S = $root.AwakenDraugC2S.decode(reader, reader.uint32());
                break;
            case 65:
                message.putDraugIntoPackC2S = $root.PutDraugIntoPackC2S.decode(reader, reader.uint32());
                break;
            case 66:
                message.swallowDraugC2S = $root.SwallowDraugC2S.decode(reader, reader.uint32());
                break;
            case 67:
                message.decomposeDraugC2S = $root.DecomposeDraugC2S.decode(reader, reader.uint32());
                break;
            case 68:
                message.lockDraugC2S = $root.LockDraugC2S.decode(reader, reader.uint32());
                break;
            case 69:
                message.wearDraugC2S = $root.WearDraugC2S.decode(reader, reader.uint32());
                break;
            case 70:
                message.unwearDraugC2S = $root.UnwearDraugC2S.decode(reader, reader.uint32());
                break;
            case 71:
                message.draugSelectHeroC2S = $root.DraugSelectHeroC2S.decode(reader, reader.uint32());
                break;
            case 72:
                message.heroGroupListC2S = $root.HeroGroupListC2S.decode(reader, reader.uint32());
                break;
            case 73:
                message.unlockHeroGroupC2S = $root.UnlockHeroGroupC2S.decode(reader, reader.uint32());
                break;
            case 74:
                message.changeNameHeroGroupC2S = $root.ChangeNameHeroGroupC2S.decode(reader, reader.uint32());
                break;
            case 75:
                message.heroGroupChangeHeroC2S = $root.HeroGroupChangeHeroC2S.decode(reader, reader.uint32());
                break;
            case 76:
                message.heroGroupChangeSkillC2S = $root.HeroGroupChangeSkillC2S.decode(reader, reader.uint32());
                break;
            case 77:
                message.buyFatigueC2S = $root.BuyFatigueC2S.decode(reader, reader.uint32());
                break;
            case 78:
                message.getFatigueWelfareC2S = $root.GetFatigueWelfareC2S.decode(reader, reader.uint32());
                break;
            case 79:
                message.upStarEquipC2S = $root.UpStarEquipC2S.decode(reader, reader.uint32());
                break;
            case 80:
                message.eatEquipsC2S = $root.EatEquipsC2S.decode(reader, reader.uint32());
                break;
            case 81:
                message.desEquipC2S = $root.DesEquipC2S.decode(reader, reader.uint32());
                break;
            case 82:
                message.takeOnEquipC2S = $root.TakeOnEquipC2S.decode(reader, reader.uint32());
                break;
            case 83:
                message.takeOffEquipC2S = $root.TakeOffEquipC2S.decode(reader, reader.uint32());
                break;
            case 84:
                message.redSpotC2S = $root.RedSpotC2S.decode(reader, reader.uint32());
                break;
            case 85:
                message.makeTeamC2S = $root.MakeTeamC2S.decode(reader, reader.uint32());
                break;
            case 86:
                message.setTeamAimC2S = $root.SetTeamAimC2S.decode(reader, reader.uint32());
                break;
            case 87:
                message.joinTeamC2S = $root.JoinTeamC2S.decode(reader, reader.uint32());
                break;
            case 88:
                message.exitTeamC2S = $root.ExitTeamC2S.decode(reader, reader.uint32());
                break;
            case 89:
                message.turnOverTeamLeaderC2S = $root.TurnOverTeamLeaderC2S.decode(reader, reader.uint32());
                break;
            case 90:
                message.inviteTeamC2S = $root.InviteTeamC2S.decode(reader, reader.uint32());
                break;
            case 91:
                message.rejectTeamC2S = $root.RejectTeamC2S.decode(reader, reader.uint32());
                break;
            case 92:
                message.kickTeamC2S = $root.KickTeamC2S.decode(reader, reader.uint32());
                break;
            case 93:
                message.setTeamHelpC2S = $root.SetTeamHelpC2S.decode(reader, reader.uint32());
                break;
            case 94:
                message.setTeamHeroC2S = $root.SetTeamHeroC2S.decode(reader, reader.uint32());
                break;
            case 95:
                message.switchTeamReadyC2S = $root.SwitchTeamReadyC2S.decode(reader, reader.uint32());
                break;
            case 96:
                message.teamBattleC2S = $root.TeamBattleC2S.decode(reader, reader.uint32());
                break;
            case 97:
                message.getDanInfoC2S = $root.GetDanInfoC2S.decode(reader, reader.uint32());
                break;
            case 98:
                message.getDuelRankC2S = $root.GetDuelRankC2S.decode(reader, reader.uint32());
                break;
            case 99:
                message.sysListC2S = $root.SysListC2S.decode(reader, reader.uint32());
                break;
            case 100:
                message.sysOpenShowC2S = $root.SysOpenShowC2S.decode(reader, reader.uint32());
                break;
            case 101:
                message.getQuestsC2S = $root.GetQuestsC2S.decode(reader, reader.uint32());
                break;
            case 102:
                message.getQuestRewardC2S = $root.GetQuestRewardC2S.decode(reader, reader.uint32());
                break;
            case 103:
                message.getDailyQuestRewardC2S = $root.GetDailyQuestRewardC2S.decode(reader, reader.uint32());
                break;
            case 104:
                message.gamerHeroImageChooseC2S = $root.GamerHeroImageChooseC2S.decode(reader, reader.uint32());
                break;
            case 105:
                message.gamerHeroImageChangeC2S = $root.GamerHeroImageChangeC2S.decode(reader, reader.uint32());
                break;
            case 106:
                message.gamerBuyRollC2S = $root.GamerBuyRollC2S.decode(reader, reader.uint32());
                break;
            case 107:
                message.getGamerSecretLandC2S = $root.GetGamerSecretLandC2S.decode(reader, reader.uint32());
                break;
            case 108:
                message.gamerSecretLandBattleRewardC2S = $root.GamerSecretLandBattleRewardC2S.decode(reader, reader.uint32());
                break;
            case 109:
                message.gamerSecretLandWeekRewardC2S = $root.GamerSecretLandWeekRewardC2S.decode(reader, reader.uint32());
                break;
            case 110:
                message.gamerSecretLandRankC2S = $root.GamerSecretLandRankC2S.decode(reader, reader.uint32());
                break;
            case 111:
                message.getGamerSecretLandInfoC2S = $root.GetGamerSecretLandInfoC2S.decode(reader, reader.uint32());
                break;
            case 112:
                message.gamerChangeItemIsSawC2S = $root.GamerChangeItemIsSawC2S.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    C2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    C2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isString(message.key))
                return "key: string expected";
        if (message.gamerLoginC2S != null && message.hasOwnProperty("gamerLoginC2S")) {
            var error = $root.GamerLoginC2S.verify(message.gamerLoginC2S);
            if (error)
                return "gamerLoginC2S." + error;
        }
        if (message.gamerLoginGetDataC2S != null && message.hasOwnProperty("gamerLoginGetDataC2S")) {
            var error = $root.GamerLoginGetDataC2S.verify(message.gamerLoginGetDataC2S);
            if (error)
                return "gamerLoginGetDataC2S." + error;
        }
        if (message.serverTimeC2S != null && message.hasOwnProperty("serverTimeC2S")) {
            var error = $root.ServerTimeC2S.verify(message.serverTimeC2S);
            if (error)
                return "serverTimeC2S." + error;
        }
        if (message.gamerSubChatChannelC2S != null && message.hasOwnProperty("gamerSubChatChannelC2S")) {
            var error = $root.GamerSubChatChannelC2S.verify(message.gamerSubChatChannelC2S);
            if (error)
                return "gamerSubChatChannelC2S." + error;
        }
        if (message.gamerChangeNameC2S != null && message.hasOwnProperty("gamerChangeNameC2S")) {
            var error = $root.GamerChangeNameC2S.verify(message.gamerChangeNameC2S);
            if (error)
                return "gamerChangeNameC2S." + error;
        }
        if (message.gamerChangeAvatarC2S != null && message.hasOwnProperty("gamerChangeAvatarC2S")) {
            var error = $root.GamerChangeAvatarC2S.verify(message.gamerChangeAvatarC2S);
            if (error)
                return "gamerChangeAvatarC2S." + error;
        }
        if (message.gamerGetBackpackC2S != null && message.hasOwnProperty("gamerGetBackpackC2S")) {
            var error = $root.GamerGetBackpackC2S.verify(message.gamerGetBackpackC2S);
            if (error)
                return "gamerGetBackpackC2S." + error;
        }
        if (message.gamerSellItemC2S != null && message.hasOwnProperty("gamerSellItemC2S")) {
            var error = $root.GamerSellItemC2S.verify(message.gamerSellItemC2S);
            if (error)
                return "gamerSellItemC2S." + error;
        }
        if (message.gamerUseItemC2S != null && message.hasOwnProperty("gamerUseItemC2S")) {
            var error = $root.GamerUseItemC2S.verify(message.gamerUseItemC2S);
            if (error)
                return "gamerUseItemC2S." + error;
        }
        if (message.gamerFriendChatC2S != null && message.hasOwnProperty("gamerFriendChatC2S")) {
            var error = $root.GamerFriendChatC2S.verify(message.gamerFriendChatC2S);
            if (error)
                return "gamerFriendChatC2S." + error;
        }
        if (message.gamerWorldChatC2S != null && message.hasOwnProperty("gamerWorldChatC2S")) {
            var error = $root.GamerWorldChatC2S.verify(message.gamerWorldChatC2S);
            if (error)
                return "gamerWorldChatC2S." + error;
        }
        if (message.gamerTestChatC2S != null && message.hasOwnProperty("gamerTestChatC2S")) {
            var error = $root.GamerTestChatC2S.verify(message.gamerTestChatC2S);
            if (error)
                return "gamerTestChatC2S." + error;
        }
        if (message.gamerClubRequestC2S != null && message.hasOwnProperty("gamerClubRequestC2S")) {
            var error = $root.GamerClubRequestC2S.verify(message.gamerClubRequestC2S);
            if (error)
                return "gamerClubRequestC2S." + error;
        }
        if (message.gamerNewFriendReqC2S != null && message.hasOwnProperty("gamerNewFriendReqC2S")) {
            var error = $root.GamerNewFriendReqC2S.verify(message.gamerNewFriendReqC2S);
            if (error)
                return "gamerNewFriendReqC2S." + error;
        }
        if (message.gamerDelFriendC2S != null && message.hasOwnProperty("gamerDelFriendC2S")) {
            var error = $root.GamerDelFriendC2S.verify(message.gamerDelFriendC2S);
            if (error)
                return "gamerDelFriendC2S." + error;
        }
        if (message.gamerProcessFriendReqC2S != null && message.hasOwnProperty("gamerProcessFriendReqC2S")) {
            var error = $root.GamerProcessFriendReqC2S.verify(message.gamerProcessFriendReqC2S);
            if (error)
                return "gamerProcessFriendReqC2S." + error;
        }
        if (message.gamerGetMailC2S != null && message.hasOwnProperty("gamerGetMailC2S")) {
            var error = $root.GamerGetMailC2S.verify(message.gamerGetMailC2S);
            if (error)
                return "gamerGetMailC2S." + error;
        }
        if (message.gamerDelMailC2S != null && message.hasOwnProperty("gamerDelMailC2S")) {
            var error = $root.GamerDelMailC2S.verify(message.gamerDelMailC2S);
            if (error)
                return "gamerDelMailC2S." + error;
        }
        if (message.gamerDelHaveReadMailC2S != null && message.hasOwnProperty("gamerDelHaveReadMailC2S")) {
            var error = $root.GamerDelHaveReadMailC2S.verify(message.gamerDelHaveReadMailC2S);
            if (error)
                return "gamerDelHaveReadMailC2S." + error;
        }
        if (message.gamerOneKeyRcvMailRewardC2S != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardC2S")) {
            var error = $root.GamerOneKeyRcvMailRewardC2S.verify(message.gamerOneKeyRcvMailRewardC2S);
            if (error)
                return "gamerOneKeyRcvMailRewardC2S." + error;
        }
        if (message.gamerChangeMailStateC2S != null && message.hasOwnProperty("gamerChangeMailStateC2S")) {
            var error = $root.GamerChangeMailStateC2S.verify(message.gamerChangeMailStateC2S);
            if (error)
                return "gamerChangeMailStateC2S." + error;
        }
        if (message.gamerNewHeroC2S != null && message.hasOwnProperty("gamerNewHeroC2S")) {
            var error = $root.GamerNewHeroC2S.verify(message.gamerNewHeroC2S);
            if (error)
                return "gamerNewHeroC2S." + error;
        }
        if (message.gamerUpgradeHeroC2S != null && message.hasOwnProperty("gamerUpgradeHeroC2S")) {
            var error = $root.GamerUpgradeHeroC2S.verify(message.gamerUpgradeHeroC2S);
            if (error)
                return "gamerUpgradeHeroC2S." + error;
        }
        if (message.gamerUseHeroMedicineC2S != null && message.hasOwnProperty("gamerUseHeroMedicineC2S")) {
            var error = $root.GamerUseHeroMedicineC2S.verify(message.gamerUseHeroMedicineC2S);
            if (error)
                return "gamerUseHeroMedicineC2S." + error;
        }
        if (message.gamerUpStarHeroC2S != null && message.hasOwnProperty("gamerUpStarHeroC2S")) {
            var error = $root.GamerUpStarHeroC2S.verify(message.gamerUpStarHeroC2S);
            if (error)
                return "gamerUpStarHeroC2S." + error;
        }
        if (message.gamerUpHeroSkillC2S != null && message.hasOwnProperty("gamerUpHeroSkillC2S")) {
            var error = $root.GamerUpHeroSkillC2S.verify(message.gamerUpHeroSkillC2S);
            if (error)
                return "gamerUpHeroSkillC2S." + error;
        }
        if (message.gamerGetHeroC2S != null && message.hasOwnProperty("gamerGetHeroC2S")) {
            var error = $root.GamerGetHeroC2S.verify(message.gamerGetHeroC2S);
            if (error)
                return "gamerGetHeroC2S." + error;
        }
        if (message.gamerPVPLoadingC2S != null && message.hasOwnProperty("gamerPVPLoadingC2S")) {
            var error = $root.GamerPVPLoadingC2S.verify(message.gamerPVPLoadingC2S);
            if (error)
                return "gamerPVPLoadingC2S." + error;
        }
        if (message.gamerPVPSyncC2S != null && message.hasOwnProperty("gamerPVPSyncC2S")) {
            var error = $root.GamerPVPSyncC2S.verify(message.gamerPVPSyncC2S);
            if (error)
                return "gamerPVPSyncC2S." + error;
        }
        if (message.gamerReliveC2S != null && message.hasOwnProperty("gamerReliveC2S")) {
            var error = $root.GamerReliveC2S.verify(message.gamerReliveC2S);
            if (error)
                return "gamerReliveC2S." + error;
        }
        if (message.gamerGetRealTimeRankC2S != null && message.hasOwnProperty("gamerGetRealTimeRankC2S")) {
            var error = $root.GamerGetRealTimeRankC2S.verify(message.gamerGetRealTimeRankC2S);
            if (error)
                return "gamerGetRealTimeRankC2S." + error;
        }
        if (message.gamerCheckPVPBattleC2S != null && message.hasOwnProperty("gamerCheckPVPBattleC2S")) {
            var error = $root.GamerCheckPVPBattleC2S.verify(message.gamerCheckPVPBattleC2S);
            if (error)
                return "gamerCheckPVPBattleC2S." + error;
        }
        if (message.gamerUploadWXInfoC2S != null && message.hasOwnProperty("gamerUploadWXInfoC2S")) {
            var error = $root.GamerUploadWXInfoC2S.verify(message.gamerUploadWXInfoC2S);
            if (error)
                return "gamerUploadWXInfoC2S." + error;
        }
        if (message.gamerGetNoviceGuideC2S != null && message.hasOwnProperty("gamerGetNoviceGuideC2S")) {
            var error = $root.GamerGetNoviceGuideC2S.verify(message.gamerGetNoviceGuideC2S);
            if (error)
                return "gamerGetNoviceGuideC2S." + error;
        }
        if (message.gamerNoviceGuideChangeC2S != null && message.hasOwnProperty("gamerNoviceGuideChangeC2S")) {
            var error = $root.GamerNoviceGuideChangeC2S.verify(message.gamerNoviceGuideChangeC2S);
            if (error)
                return "gamerNoviceGuideChangeC2S." + error;
        }
        if (message.gamerMatchC2S != null && message.hasOwnProperty("gamerMatchC2S")) {
            var error = $root.GamerMatchC2S.verify(message.gamerMatchC2S);
            if (error)
                return "gamerMatchC2S." + error;
        }
        if (message.gamerCancelMatchC2S != null && message.hasOwnProperty("gamerCancelMatchC2S")) {
            var error = $root.GamerCancelMatchC2S.verify(message.gamerCancelMatchC2S);
            if (error)
                return "gamerCancelMatchC2S." + error;
        }
        if (message.gamerGetRewardC2S != null && message.hasOwnProperty("gamerGetRewardC2S")) {
            var error = $root.GamerGetRewardC2S.verify(message.gamerGetRewardC2S);
            if (error)
                return "gamerGetRewardC2S." + error;
        }
        if (message.gamerUseIconC2S != null && message.hasOwnProperty("gamerUseIconC2S")) {
            var error = $root.GamerUseIconC2S.verify(message.gamerUseIconC2S);
            if (error)
                return "gamerUseIconC2S." + error;
        }
        if (message.gamerExtractGashaponC2S != null && message.hasOwnProperty("gamerExtractGashaponC2S")) {
            var error = $root.GamerExtractGashaponC2S.verify(message.gamerExtractGashaponC2S);
            if (error)
                return "gamerExtractGashaponC2S." + error;
        }
        if (message.gamerGetGashaponPreviewC2S != null && message.hasOwnProperty("gamerGetGashaponPreviewC2S")) {
            var error = $root.GamerGetGashaponPreviewC2S.verify(message.gamerGetGashaponPreviewC2S);
            if (error)
                return "gamerGetGashaponPreviewC2S." + error;
        }
        if (message.getActivityRewardC2S != null && message.hasOwnProperty("getActivityRewardC2S")) {
            var error = $root.GetActivityRewardC2S.verify(message.getActivityRewardC2S);
            if (error)
                return "getActivityRewardC2S." + error;
        }
        if (message.createGuildC2S != null && message.hasOwnProperty("createGuildC2S")) {
            var error = $root.CreateGuildC2S.verify(message.createGuildC2S);
            if (error)
                return "createGuildC2S." + error;
        }
        if (message.guildGamerLoginC2S != null && message.hasOwnProperty("guildGamerLoginC2S")) {
            var error = $root.GuildGamerLoginC2S.verify(message.guildGamerLoginC2S);
            if (error)
                return "guildGamerLoginC2S." + error;
        }
        if (message.guildGamerLoginoutC2S != null && message.hasOwnProperty("guildGamerLoginoutC2S")) {
            var error = $root.GuildGamerLoginoutC2S.verify(message.guildGamerLoginoutC2S);
            if (error)
                return "guildGamerLoginoutC2S." + error;
        }
        if (message.dissolutionGuildC2S != null && message.hasOwnProperty("dissolutionGuildC2S")) {
            var error = $root.DissolutionGuildC2S.verify(message.dissolutionGuildC2S);
            if (error)
                return "dissolutionGuildC2S." + error;
        }
        if (message.getGuildC2S != null && message.hasOwnProperty("getGuildC2S")) {
            var error = $root.GetGuildC2S.verify(message.getGuildC2S);
            if (error)
                return "getGuildC2S." + error;
        }
        if (message.getGuildListC2S != null && message.hasOwnProperty("getGuildListC2S")) {
            var error = $root.GetGuildListC2S.verify(message.getGuildListC2S);
            if (error)
                return "getGuildListC2S." + error;
        }
        if (message.applyJoinGuildC2S != null && message.hasOwnProperty("applyJoinGuildC2S")) {
            var error = $root.ApplyJoinGuildC2S.verify(message.applyJoinGuildC2S);
            if (error)
                return "applyJoinGuildC2S." + error;
        }
        if (message.approvalJoinGuildC2S != null && message.hasOwnProperty("approvalJoinGuildC2S")) {
            var error = $root.ApprovalJoinGuildC2S.verify(message.approvalJoinGuildC2S);
            if (error)
                return "approvalJoinGuildC2S." + error;
        }
        if (message.inviteJoinGuildC2S != null && message.hasOwnProperty("inviteJoinGuildC2S")) {
            var error = $root.InviteJoinGuildC2S.verify(message.inviteJoinGuildC2S);
            if (error)
                return "inviteJoinGuildC2S." + error;
        }
        if (message.agreeJoinGuildC2S != null && message.hasOwnProperty("agreeJoinGuildC2S")) {
            var error = $root.AgreeJoinGuildC2S.verify(message.agreeJoinGuildC2S);
            if (error)
                return "agreeJoinGuildC2S." + error;
        }
        if (message.quitGuildC2S != null && message.hasOwnProperty("quitGuildC2S")) {
            var error = $root.QuitGuildC2S.verify(message.quitGuildC2S);
            if (error)
                return "quitGuildC2S." + error;
        }
        if (message.kickOutGuildC2S != null && message.hasOwnProperty("kickOutGuildC2S")) {
            var error = $root.KickOutGuildC2S.verify(message.kickOutGuildC2S);
            if (error)
                return "kickOutGuildC2S." + error;
        }
        if (message.guildChatC2S != null && message.hasOwnProperty("guildChatC2S")) {
            var error = $root.GuildChatC2S.verify(message.guildChatC2S);
            if (error)
                return "guildChatC2S." + error;
        }
        if (message.gMC2S != null && message.hasOwnProperty("gMC2S")) {
            var error = $root.GMC2S.verify(message.gMC2S);
            if (error)
                return "gMC2S." + error;
        }
        if (message.checkPointListC2S != null && message.hasOwnProperty("checkPointListC2S")) {
            var error = $root.CheckPointListC2S.verify(message.checkPointListC2S);
            if (error)
                return "checkPointListC2S." + error;
        }
        if (message.getPlotStarRewardC2S != null && message.hasOwnProperty("getPlotStarRewardC2S")) {
            var error = $root.GetPlotStarRewardC2S.verify(message.getPlotStarRewardC2S);
            if (error)
                return "getPlotStarRewardC2S." + error;
        }
        if (message.buyTimesCheckPointC2S != null && message.hasOwnProperty("buyTimesCheckPointC2S")) {
            var error = $root.BuyTimesCheckPointC2S.verify(message.buyTimesCheckPointC2S);
            if (error)
                return "buyTimesCheckPointC2S." + error;
        }
        if (message.sweepCheckPointC2S != null && message.hasOwnProperty("sweepCheckPointC2S")) {
            var error = $root.SweepCheckPointC2S.verify(message.sweepCheckPointC2S);
            if (error)
                return "sweepCheckPointC2S." + error;
        }
        if (message.gamerSettlePVEC2S != null && message.hasOwnProperty("gamerSettlePVEC2S")) {
            var error = $root.GamerSettlePVEC2S.verify(message.gamerSettlePVEC2S);
            if (error)
                return "gamerSettlePVEC2S." + error;
        }
        if (message.draugListC2S != null && message.hasOwnProperty("draugListC2S")) {
            var error = $root.DraugListC2S.verify(message.draugListC2S);
            if (error)
                return "draugListC2S." + error;
        }
        if (message.awakenDraugC2S != null && message.hasOwnProperty("awakenDraugC2S")) {
            var error = $root.AwakenDraugC2S.verify(message.awakenDraugC2S);
            if (error)
                return "awakenDraugC2S." + error;
        }
        if (message.putDraugIntoPackC2S != null && message.hasOwnProperty("putDraugIntoPackC2S")) {
            var error = $root.PutDraugIntoPackC2S.verify(message.putDraugIntoPackC2S);
            if (error)
                return "putDraugIntoPackC2S." + error;
        }
        if (message.swallowDraugC2S != null && message.hasOwnProperty("swallowDraugC2S")) {
            var error = $root.SwallowDraugC2S.verify(message.swallowDraugC2S);
            if (error)
                return "swallowDraugC2S." + error;
        }
        if (message.decomposeDraugC2S != null && message.hasOwnProperty("decomposeDraugC2S")) {
            var error = $root.DecomposeDraugC2S.verify(message.decomposeDraugC2S);
            if (error)
                return "decomposeDraugC2S." + error;
        }
        if (message.lockDraugC2S != null && message.hasOwnProperty("lockDraugC2S")) {
            var error = $root.LockDraugC2S.verify(message.lockDraugC2S);
            if (error)
                return "lockDraugC2S." + error;
        }
        if (message.wearDraugC2S != null && message.hasOwnProperty("wearDraugC2S")) {
            var error = $root.WearDraugC2S.verify(message.wearDraugC2S);
            if (error)
                return "wearDraugC2S." + error;
        }
        if (message.unwearDraugC2S != null && message.hasOwnProperty("unwearDraugC2S")) {
            var error = $root.UnwearDraugC2S.verify(message.unwearDraugC2S);
            if (error)
                return "unwearDraugC2S." + error;
        }
        if (message.draugSelectHeroC2S != null && message.hasOwnProperty("draugSelectHeroC2S")) {
            var error = $root.DraugSelectHeroC2S.verify(message.draugSelectHeroC2S);
            if (error)
                return "draugSelectHeroC2S." + error;
        }
        if (message.heroGroupListC2S != null && message.hasOwnProperty("heroGroupListC2S")) {
            var error = $root.HeroGroupListC2S.verify(message.heroGroupListC2S);
            if (error)
                return "heroGroupListC2S." + error;
        }
        if (message.unlockHeroGroupC2S != null && message.hasOwnProperty("unlockHeroGroupC2S")) {
            var error = $root.UnlockHeroGroupC2S.verify(message.unlockHeroGroupC2S);
            if (error)
                return "unlockHeroGroupC2S." + error;
        }
        if (message.changeNameHeroGroupC2S != null && message.hasOwnProperty("changeNameHeroGroupC2S")) {
            var error = $root.ChangeNameHeroGroupC2S.verify(message.changeNameHeroGroupC2S);
            if (error)
                return "changeNameHeroGroupC2S." + error;
        }
        if (message.heroGroupChangeHeroC2S != null && message.hasOwnProperty("heroGroupChangeHeroC2S")) {
            var error = $root.HeroGroupChangeHeroC2S.verify(message.heroGroupChangeHeroC2S);
            if (error)
                return "heroGroupChangeHeroC2S." + error;
        }
        if (message.heroGroupChangeSkillC2S != null && message.hasOwnProperty("heroGroupChangeSkillC2S")) {
            var error = $root.HeroGroupChangeSkillC2S.verify(message.heroGroupChangeSkillC2S);
            if (error)
                return "heroGroupChangeSkillC2S." + error;
        }
        if (message.buyFatigueC2S != null && message.hasOwnProperty("buyFatigueC2S")) {
            var error = $root.BuyFatigueC2S.verify(message.buyFatigueC2S);
            if (error)
                return "buyFatigueC2S." + error;
        }
        if (message.getFatigueWelfareC2S != null && message.hasOwnProperty("getFatigueWelfareC2S")) {
            var error = $root.GetFatigueWelfareC2S.verify(message.getFatigueWelfareC2S);
            if (error)
                return "getFatigueWelfareC2S." + error;
        }
        if (message.upStarEquipC2S != null && message.hasOwnProperty("upStarEquipC2S")) {
            var error = $root.UpStarEquipC2S.verify(message.upStarEquipC2S);
            if (error)
                return "upStarEquipC2S." + error;
        }
        if (message.eatEquipsC2S != null && message.hasOwnProperty("eatEquipsC2S")) {
            var error = $root.EatEquipsC2S.verify(message.eatEquipsC2S);
            if (error)
                return "eatEquipsC2S." + error;
        }
        if (message.desEquipC2S != null && message.hasOwnProperty("desEquipC2S")) {
            var error = $root.DesEquipC2S.verify(message.desEquipC2S);
            if (error)
                return "desEquipC2S." + error;
        }
        if (message.takeOnEquipC2S != null && message.hasOwnProperty("takeOnEquipC2S")) {
            var error = $root.TakeOnEquipC2S.verify(message.takeOnEquipC2S);
            if (error)
                return "takeOnEquipC2S." + error;
        }
        if (message.takeOffEquipC2S != null && message.hasOwnProperty("takeOffEquipC2S")) {
            var error = $root.TakeOffEquipC2S.verify(message.takeOffEquipC2S);
            if (error)
                return "takeOffEquipC2S." + error;
        }
        if (message.redSpotC2S != null && message.hasOwnProperty("redSpotC2S")) {
            var error = $root.RedSpotC2S.verify(message.redSpotC2S);
            if (error)
                return "redSpotC2S." + error;
        }
        if (message.makeTeamC2S != null && message.hasOwnProperty("makeTeamC2S")) {
            var error = $root.MakeTeamC2S.verify(message.makeTeamC2S);
            if (error)
                return "makeTeamC2S." + error;
        }
        if (message.setTeamAimC2S != null && message.hasOwnProperty("setTeamAimC2S")) {
            var error = $root.SetTeamAimC2S.verify(message.setTeamAimC2S);
            if (error)
                return "setTeamAimC2S." + error;
        }
        if (message.joinTeamC2S != null && message.hasOwnProperty("joinTeamC2S")) {
            var error = $root.JoinTeamC2S.verify(message.joinTeamC2S);
            if (error)
                return "joinTeamC2S." + error;
        }
        if (message.exitTeamC2S != null && message.hasOwnProperty("exitTeamC2S")) {
            var error = $root.ExitTeamC2S.verify(message.exitTeamC2S);
            if (error)
                return "exitTeamC2S." + error;
        }
        if (message.turnOverTeamLeaderC2S != null && message.hasOwnProperty("turnOverTeamLeaderC2S")) {
            var error = $root.TurnOverTeamLeaderC2S.verify(message.turnOverTeamLeaderC2S);
            if (error)
                return "turnOverTeamLeaderC2S." + error;
        }
        if (message.inviteTeamC2S != null && message.hasOwnProperty("inviteTeamC2S")) {
            var error = $root.InviteTeamC2S.verify(message.inviteTeamC2S);
            if (error)
                return "inviteTeamC2S." + error;
        }
        if (message.rejectTeamC2S != null && message.hasOwnProperty("rejectTeamC2S")) {
            var error = $root.RejectTeamC2S.verify(message.rejectTeamC2S);
            if (error)
                return "rejectTeamC2S." + error;
        }
        if (message.kickTeamC2S != null && message.hasOwnProperty("kickTeamC2S")) {
            var error = $root.KickTeamC2S.verify(message.kickTeamC2S);
            if (error)
                return "kickTeamC2S." + error;
        }
        if (message.setTeamHelpC2S != null && message.hasOwnProperty("setTeamHelpC2S")) {
            var error = $root.SetTeamHelpC2S.verify(message.setTeamHelpC2S);
            if (error)
                return "setTeamHelpC2S." + error;
        }
        if (message.setTeamHeroC2S != null && message.hasOwnProperty("setTeamHeroC2S")) {
            var error = $root.SetTeamHeroC2S.verify(message.setTeamHeroC2S);
            if (error)
                return "setTeamHeroC2S." + error;
        }
        if (message.switchTeamReadyC2S != null && message.hasOwnProperty("switchTeamReadyC2S")) {
            var error = $root.SwitchTeamReadyC2S.verify(message.switchTeamReadyC2S);
            if (error)
                return "switchTeamReadyC2S." + error;
        }
        if (message.teamBattleC2S != null && message.hasOwnProperty("teamBattleC2S")) {
            var error = $root.TeamBattleC2S.verify(message.teamBattleC2S);
            if (error)
                return "teamBattleC2S." + error;
        }
        if (message.getDanInfoC2S != null && message.hasOwnProperty("getDanInfoC2S")) {
            var error = $root.GetDanInfoC2S.verify(message.getDanInfoC2S);
            if (error)
                return "getDanInfoC2S." + error;
        }
        if (message.getDuelRankC2S != null && message.hasOwnProperty("getDuelRankC2S")) {
            var error = $root.GetDuelRankC2S.verify(message.getDuelRankC2S);
            if (error)
                return "getDuelRankC2S." + error;
        }
        if (message.sysListC2S != null && message.hasOwnProperty("sysListC2S")) {
            var error = $root.SysListC2S.verify(message.sysListC2S);
            if (error)
                return "sysListC2S." + error;
        }
        if (message.sysOpenShowC2S != null && message.hasOwnProperty("sysOpenShowC2S")) {
            var error = $root.SysOpenShowC2S.verify(message.sysOpenShowC2S);
            if (error)
                return "sysOpenShowC2S." + error;
        }
        if (message.getQuestsC2S != null && message.hasOwnProperty("getQuestsC2S")) {
            var error = $root.GetQuestsC2S.verify(message.getQuestsC2S);
            if (error)
                return "getQuestsC2S." + error;
        }
        if (message.getQuestRewardC2S != null && message.hasOwnProperty("getQuestRewardC2S")) {
            var error = $root.GetQuestRewardC2S.verify(message.getQuestRewardC2S);
            if (error)
                return "getQuestRewardC2S." + error;
        }
        if (message.getDailyQuestRewardC2S != null && message.hasOwnProperty("getDailyQuestRewardC2S")) {
            var error = $root.GetDailyQuestRewardC2S.verify(message.getDailyQuestRewardC2S);
            if (error)
                return "getDailyQuestRewardC2S." + error;
        }
        if (message.gamerHeroImageChooseC2S != null && message.hasOwnProperty("gamerHeroImageChooseC2S")) {
            var error = $root.GamerHeroImageChooseC2S.verify(message.gamerHeroImageChooseC2S);
            if (error)
                return "gamerHeroImageChooseC2S." + error;
        }
        if (message.gamerHeroImageChangeC2S != null && message.hasOwnProperty("gamerHeroImageChangeC2S")) {
            var error = $root.GamerHeroImageChangeC2S.verify(message.gamerHeroImageChangeC2S);
            if (error)
                return "gamerHeroImageChangeC2S." + error;
        }
        if (message.gamerBuyRollC2S != null && message.hasOwnProperty("gamerBuyRollC2S")) {
            var error = $root.GamerBuyRollC2S.verify(message.gamerBuyRollC2S);
            if (error)
                return "gamerBuyRollC2S." + error;
        }
        if (message.getGamerSecretLandC2S != null && message.hasOwnProperty("getGamerSecretLandC2S")) {
            var error = $root.GetGamerSecretLandC2S.verify(message.getGamerSecretLandC2S);
            if (error)
                return "getGamerSecretLandC2S." + error;
        }
        if (message.gamerSecretLandBattleRewardC2S != null && message.hasOwnProperty("gamerSecretLandBattleRewardC2S")) {
            var error = $root.GamerSecretLandBattleRewardC2S.verify(message.gamerSecretLandBattleRewardC2S);
            if (error)
                return "gamerSecretLandBattleRewardC2S." + error;
        }
        if (message.gamerSecretLandWeekRewardC2S != null && message.hasOwnProperty("gamerSecretLandWeekRewardC2S")) {
            var error = $root.GamerSecretLandWeekRewardC2S.verify(message.gamerSecretLandWeekRewardC2S);
            if (error)
                return "gamerSecretLandWeekRewardC2S." + error;
        }
        if (message.gamerSecretLandRankC2S != null && message.hasOwnProperty("gamerSecretLandRankC2S")) {
            var error = $root.GamerSecretLandRankC2S.verify(message.gamerSecretLandRankC2S);
            if (error)
                return "gamerSecretLandRankC2S." + error;
        }
        if (message.getGamerSecretLandInfoC2S != null && message.hasOwnProperty("getGamerSecretLandInfoC2S")) {
            var error = $root.GetGamerSecretLandInfoC2S.verify(message.getGamerSecretLandInfoC2S);
            if (error)
                return "getGamerSecretLandInfoC2S." + error;
        }
        if (message.gamerChangeItemIsSawC2S != null && message.hasOwnProperty("gamerChangeItemIsSawC2S")) {
            var error = $root.GamerChangeItemIsSawC2S.verify(message.gamerChangeItemIsSawC2S);
            if (error)
                return "gamerChangeItemIsSawC2S." + error;
        }
        return null;
    };
    C2S.fromObject = function fromObject(object) {
        if (object instanceof $root.C2S)
            return object;
        var message = new $root.C2S();
        if (object.key != null)
            message.key = String(object.key);
        if (object.gamerLoginC2S != null) {
            if (typeof object.gamerLoginC2S !== "object")
                throw TypeError(".C2S.gamerLoginC2S: object expected");
            message.gamerLoginC2S = $root.GamerLoginC2S.fromObject(object.gamerLoginC2S);
        }
        if (object.gamerLoginGetDataC2S != null) {
            if (typeof object.gamerLoginGetDataC2S !== "object")
                throw TypeError(".C2S.gamerLoginGetDataC2S: object expected");
            message.gamerLoginGetDataC2S = $root.GamerLoginGetDataC2S.fromObject(object.gamerLoginGetDataC2S);
        }
        if (object.serverTimeC2S != null) {
            if (typeof object.serverTimeC2S !== "object")
                throw TypeError(".C2S.serverTimeC2S: object expected");
            message.serverTimeC2S = $root.ServerTimeC2S.fromObject(object.serverTimeC2S);
        }
        if (object.gamerSubChatChannelC2S != null) {
            if (typeof object.gamerSubChatChannelC2S !== "object")
                throw TypeError(".C2S.gamerSubChatChannelC2S: object expected");
            message.gamerSubChatChannelC2S = $root.GamerSubChatChannelC2S.fromObject(object.gamerSubChatChannelC2S);
        }
        if (object.gamerChangeNameC2S != null) {
            if (typeof object.gamerChangeNameC2S !== "object")
                throw TypeError(".C2S.gamerChangeNameC2S: object expected");
            message.gamerChangeNameC2S = $root.GamerChangeNameC2S.fromObject(object.gamerChangeNameC2S);
        }
        if (object.gamerChangeAvatarC2S != null) {
            if (typeof object.gamerChangeAvatarC2S !== "object")
                throw TypeError(".C2S.gamerChangeAvatarC2S: object expected");
            message.gamerChangeAvatarC2S = $root.GamerChangeAvatarC2S.fromObject(object.gamerChangeAvatarC2S);
        }
        if (object.gamerGetBackpackC2S != null) {
            if (typeof object.gamerGetBackpackC2S !== "object")
                throw TypeError(".C2S.gamerGetBackpackC2S: object expected");
            message.gamerGetBackpackC2S = $root.GamerGetBackpackC2S.fromObject(object.gamerGetBackpackC2S);
        }
        if (object.gamerSellItemC2S != null) {
            if (typeof object.gamerSellItemC2S !== "object")
                throw TypeError(".C2S.gamerSellItemC2S: object expected");
            message.gamerSellItemC2S = $root.GamerSellItemC2S.fromObject(object.gamerSellItemC2S);
        }
        if (object.gamerUseItemC2S != null) {
            if (typeof object.gamerUseItemC2S !== "object")
                throw TypeError(".C2S.gamerUseItemC2S: object expected");
            message.gamerUseItemC2S = $root.GamerUseItemC2S.fromObject(object.gamerUseItemC2S);
        }
        if (object.gamerFriendChatC2S != null) {
            if (typeof object.gamerFriendChatC2S !== "object")
                throw TypeError(".C2S.gamerFriendChatC2S: object expected");
            message.gamerFriendChatC2S = $root.GamerFriendChatC2S.fromObject(object.gamerFriendChatC2S);
        }
        if (object.gamerWorldChatC2S != null) {
            if (typeof object.gamerWorldChatC2S !== "object")
                throw TypeError(".C2S.gamerWorldChatC2S: object expected");
            message.gamerWorldChatC2S = $root.GamerWorldChatC2S.fromObject(object.gamerWorldChatC2S);
        }
        if (object.gamerTestChatC2S != null) {
            if (typeof object.gamerTestChatC2S !== "object")
                throw TypeError(".C2S.gamerTestChatC2S: object expected");
            message.gamerTestChatC2S = $root.GamerTestChatC2S.fromObject(object.gamerTestChatC2S);
        }
        if (object.gamerClubRequestC2S != null) {
            if (typeof object.gamerClubRequestC2S !== "object")
                throw TypeError(".C2S.gamerClubRequestC2S: object expected");
            message.gamerClubRequestC2S = $root.GamerClubRequestC2S.fromObject(object.gamerClubRequestC2S);
        }
        if (object.gamerNewFriendReqC2S != null) {
            if (typeof object.gamerNewFriendReqC2S !== "object")
                throw TypeError(".C2S.gamerNewFriendReqC2S: object expected");
            message.gamerNewFriendReqC2S = $root.GamerNewFriendReqC2S.fromObject(object.gamerNewFriendReqC2S);
        }
        if (object.gamerDelFriendC2S != null) {
            if (typeof object.gamerDelFriendC2S !== "object")
                throw TypeError(".C2S.gamerDelFriendC2S: object expected");
            message.gamerDelFriendC2S = $root.GamerDelFriendC2S.fromObject(object.gamerDelFriendC2S);
        }
        if (object.gamerProcessFriendReqC2S != null) {
            if (typeof object.gamerProcessFriendReqC2S !== "object")
                throw TypeError(".C2S.gamerProcessFriendReqC2S: object expected");
            message.gamerProcessFriendReqC2S = $root.GamerProcessFriendReqC2S.fromObject(object.gamerProcessFriendReqC2S);
        }
        if (object.gamerGetMailC2S != null) {
            if (typeof object.gamerGetMailC2S !== "object")
                throw TypeError(".C2S.gamerGetMailC2S: object expected");
            message.gamerGetMailC2S = $root.GamerGetMailC2S.fromObject(object.gamerGetMailC2S);
        }
        if (object.gamerDelMailC2S != null) {
            if (typeof object.gamerDelMailC2S !== "object")
                throw TypeError(".C2S.gamerDelMailC2S: object expected");
            message.gamerDelMailC2S = $root.GamerDelMailC2S.fromObject(object.gamerDelMailC2S);
        }
        if (object.gamerDelHaveReadMailC2S != null) {
            if (typeof object.gamerDelHaveReadMailC2S !== "object")
                throw TypeError(".C2S.gamerDelHaveReadMailC2S: object expected");
            message.gamerDelHaveReadMailC2S = $root.GamerDelHaveReadMailC2S.fromObject(object.gamerDelHaveReadMailC2S);
        }
        if (object.gamerOneKeyRcvMailRewardC2S != null) {
            if (typeof object.gamerOneKeyRcvMailRewardC2S !== "object")
                throw TypeError(".C2S.gamerOneKeyRcvMailRewardC2S: object expected");
            message.gamerOneKeyRcvMailRewardC2S = $root.GamerOneKeyRcvMailRewardC2S.fromObject(object.gamerOneKeyRcvMailRewardC2S);
        }
        if (object.gamerChangeMailStateC2S != null) {
            if (typeof object.gamerChangeMailStateC2S !== "object")
                throw TypeError(".C2S.gamerChangeMailStateC2S: object expected");
            message.gamerChangeMailStateC2S = $root.GamerChangeMailStateC2S.fromObject(object.gamerChangeMailStateC2S);
        }
        if (object.gamerNewHeroC2S != null) {
            if (typeof object.gamerNewHeroC2S !== "object")
                throw TypeError(".C2S.gamerNewHeroC2S: object expected");
            message.gamerNewHeroC2S = $root.GamerNewHeroC2S.fromObject(object.gamerNewHeroC2S);
        }
        if (object.gamerUpgradeHeroC2S != null) {
            if (typeof object.gamerUpgradeHeroC2S !== "object")
                throw TypeError(".C2S.gamerUpgradeHeroC2S: object expected");
            message.gamerUpgradeHeroC2S = $root.GamerUpgradeHeroC2S.fromObject(object.gamerUpgradeHeroC2S);
        }
        if (object.gamerUseHeroMedicineC2S != null) {
            if (typeof object.gamerUseHeroMedicineC2S !== "object")
                throw TypeError(".C2S.gamerUseHeroMedicineC2S: object expected");
            message.gamerUseHeroMedicineC2S = $root.GamerUseHeroMedicineC2S.fromObject(object.gamerUseHeroMedicineC2S);
        }
        if (object.gamerUpStarHeroC2S != null) {
            if (typeof object.gamerUpStarHeroC2S !== "object")
                throw TypeError(".C2S.gamerUpStarHeroC2S: object expected");
            message.gamerUpStarHeroC2S = $root.GamerUpStarHeroC2S.fromObject(object.gamerUpStarHeroC2S);
        }
        if (object.gamerUpHeroSkillC2S != null) {
            if (typeof object.gamerUpHeroSkillC2S !== "object")
                throw TypeError(".C2S.gamerUpHeroSkillC2S: object expected");
            message.gamerUpHeroSkillC2S = $root.GamerUpHeroSkillC2S.fromObject(object.gamerUpHeroSkillC2S);
        }
        if (object.gamerGetHeroC2S != null) {
            if (typeof object.gamerGetHeroC2S !== "object")
                throw TypeError(".C2S.gamerGetHeroC2S: object expected");
            message.gamerGetHeroC2S = $root.GamerGetHeroC2S.fromObject(object.gamerGetHeroC2S);
        }
        if (object.gamerPVPLoadingC2S != null) {
            if (typeof object.gamerPVPLoadingC2S !== "object")
                throw TypeError(".C2S.gamerPVPLoadingC2S: object expected");
            message.gamerPVPLoadingC2S = $root.GamerPVPLoadingC2S.fromObject(object.gamerPVPLoadingC2S);
        }
        if (object.gamerPVPSyncC2S != null) {
            if (typeof object.gamerPVPSyncC2S !== "object")
                throw TypeError(".C2S.gamerPVPSyncC2S: object expected");
            message.gamerPVPSyncC2S = $root.GamerPVPSyncC2S.fromObject(object.gamerPVPSyncC2S);
        }
        if (object.gamerReliveC2S != null) {
            if (typeof object.gamerReliveC2S !== "object")
                throw TypeError(".C2S.gamerReliveC2S: object expected");
            message.gamerReliveC2S = $root.GamerReliveC2S.fromObject(object.gamerReliveC2S);
        }
        if (object.gamerGetRealTimeRankC2S != null) {
            if (typeof object.gamerGetRealTimeRankC2S !== "object")
                throw TypeError(".C2S.gamerGetRealTimeRankC2S: object expected");
            message.gamerGetRealTimeRankC2S = $root.GamerGetRealTimeRankC2S.fromObject(object.gamerGetRealTimeRankC2S);
        }
        if (object.gamerCheckPVPBattleC2S != null) {
            if (typeof object.gamerCheckPVPBattleC2S !== "object")
                throw TypeError(".C2S.gamerCheckPVPBattleC2S: object expected");
            message.gamerCheckPVPBattleC2S = $root.GamerCheckPVPBattleC2S.fromObject(object.gamerCheckPVPBattleC2S);
        }
        if (object.gamerUploadWXInfoC2S != null) {
            if (typeof object.gamerUploadWXInfoC2S !== "object")
                throw TypeError(".C2S.gamerUploadWXInfoC2S: object expected");
            message.gamerUploadWXInfoC2S = $root.GamerUploadWXInfoC2S.fromObject(object.gamerUploadWXInfoC2S);
        }
        if (object.gamerGetNoviceGuideC2S != null) {
            if (typeof object.gamerGetNoviceGuideC2S !== "object")
                throw TypeError(".C2S.gamerGetNoviceGuideC2S: object expected");
            message.gamerGetNoviceGuideC2S = $root.GamerGetNoviceGuideC2S.fromObject(object.gamerGetNoviceGuideC2S);
        }
        if (object.gamerNoviceGuideChangeC2S != null) {
            if (typeof object.gamerNoviceGuideChangeC2S !== "object")
                throw TypeError(".C2S.gamerNoviceGuideChangeC2S: object expected");
            message.gamerNoviceGuideChangeC2S = $root.GamerNoviceGuideChangeC2S.fromObject(object.gamerNoviceGuideChangeC2S);
        }
        if (object.gamerMatchC2S != null) {
            if (typeof object.gamerMatchC2S !== "object")
                throw TypeError(".C2S.gamerMatchC2S: object expected");
            message.gamerMatchC2S = $root.GamerMatchC2S.fromObject(object.gamerMatchC2S);
        }
        if (object.gamerCancelMatchC2S != null) {
            if (typeof object.gamerCancelMatchC2S !== "object")
                throw TypeError(".C2S.gamerCancelMatchC2S: object expected");
            message.gamerCancelMatchC2S = $root.GamerCancelMatchC2S.fromObject(object.gamerCancelMatchC2S);
        }
        if (object.gamerGetRewardC2S != null) {
            if (typeof object.gamerGetRewardC2S !== "object")
                throw TypeError(".C2S.gamerGetRewardC2S: object expected");
            message.gamerGetRewardC2S = $root.GamerGetRewardC2S.fromObject(object.gamerGetRewardC2S);
        }
        if (object.gamerUseIconC2S != null) {
            if (typeof object.gamerUseIconC2S !== "object")
                throw TypeError(".C2S.gamerUseIconC2S: object expected");
            message.gamerUseIconC2S = $root.GamerUseIconC2S.fromObject(object.gamerUseIconC2S);
        }
        if (object.gamerExtractGashaponC2S != null) {
            if (typeof object.gamerExtractGashaponC2S !== "object")
                throw TypeError(".C2S.gamerExtractGashaponC2S: object expected");
            message.gamerExtractGashaponC2S = $root.GamerExtractGashaponC2S.fromObject(object.gamerExtractGashaponC2S);
        }
        if (object.gamerGetGashaponPreviewC2S != null) {
            if (typeof object.gamerGetGashaponPreviewC2S !== "object")
                throw TypeError(".C2S.gamerGetGashaponPreviewC2S: object expected");
            message.gamerGetGashaponPreviewC2S = $root.GamerGetGashaponPreviewC2S.fromObject(object.gamerGetGashaponPreviewC2S);
        }
        if (object.getActivityRewardC2S != null) {
            if (typeof object.getActivityRewardC2S !== "object")
                throw TypeError(".C2S.getActivityRewardC2S: object expected");
            message.getActivityRewardC2S = $root.GetActivityRewardC2S.fromObject(object.getActivityRewardC2S);
        }
        if (object.createGuildC2S != null) {
            if (typeof object.createGuildC2S !== "object")
                throw TypeError(".C2S.createGuildC2S: object expected");
            message.createGuildC2S = $root.CreateGuildC2S.fromObject(object.createGuildC2S);
        }
        if (object.guildGamerLoginC2S != null) {
            if (typeof object.guildGamerLoginC2S !== "object")
                throw TypeError(".C2S.guildGamerLoginC2S: object expected");
            message.guildGamerLoginC2S = $root.GuildGamerLoginC2S.fromObject(object.guildGamerLoginC2S);
        }
        if (object.guildGamerLoginoutC2S != null) {
            if (typeof object.guildGamerLoginoutC2S !== "object")
                throw TypeError(".C2S.guildGamerLoginoutC2S: object expected");
            message.guildGamerLoginoutC2S = $root.GuildGamerLoginoutC2S.fromObject(object.guildGamerLoginoutC2S);
        }
        if (object.dissolutionGuildC2S != null) {
            if (typeof object.dissolutionGuildC2S !== "object")
                throw TypeError(".C2S.dissolutionGuildC2S: object expected");
            message.dissolutionGuildC2S = $root.DissolutionGuildC2S.fromObject(object.dissolutionGuildC2S);
        }
        if (object.getGuildC2S != null) {
            if (typeof object.getGuildC2S !== "object")
                throw TypeError(".C2S.getGuildC2S: object expected");
            message.getGuildC2S = $root.GetGuildC2S.fromObject(object.getGuildC2S);
        }
        if (object.getGuildListC2S != null) {
            if (typeof object.getGuildListC2S !== "object")
                throw TypeError(".C2S.getGuildListC2S: object expected");
            message.getGuildListC2S = $root.GetGuildListC2S.fromObject(object.getGuildListC2S);
        }
        if (object.applyJoinGuildC2S != null) {
            if (typeof object.applyJoinGuildC2S !== "object")
                throw TypeError(".C2S.applyJoinGuildC2S: object expected");
            message.applyJoinGuildC2S = $root.ApplyJoinGuildC2S.fromObject(object.applyJoinGuildC2S);
        }
        if (object.approvalJoinGuildC2S != null) {
            if (typeof object.approvalJoinGuildC2S !== "object")
                throw TypeError(".C2S.approvalJoinGuildC2S: object expected");
            message.approvalJoinGuildC2S = $root.ApprovalJoinGuildC2S.fromObject(object.approvalJoinGuildC2S);
        }
        if (object.inviteJoinGuildC2S != null) {
            if (typeof object.inviteJoinGuildC2S !== "object")
                throw TypeError(".C2S.inviteJoinGuildC2S: object expected");
            message.inviteJoinGuildC2S = $root.InviteJoinGuildC2S.fromObject(object.inviteJoinGuildC2S);
        }
        if (object.agreeJoinGuildC2S != null) {
            if (typeof object.agreeJoinGuildC2S !== "object")
                throw TypeError(".C2S.agreeJoinGuildC2S: object expected");
            message.agreeJoinGuildC2S = $root.AgreeJoinGuildC2S.fromObject(object.agreeJoinGuildC2S);
        }
        if (object.quitGuildC2S != null) {
            if (typeof object.quitGuildC2S !== "object")
                throw TypeError(".C2S.quitGuildC2S: object expected");
            message.quitGuildC2S = $root.QuitGuildC2S.fromObject(object.quitGuildC2S);
        }
        if (object.kickOutGuildC2S != null) {
            if (typeof object.kickOutGuildC2S !== "object")
                throw TypeError(".C2S.kickOutGuildC2S: object expected");
            message.kickOutGuildC2S = $root.KickOutGuildC2S.fromObject(object.kickOutGuildC2S);
        }
        if (object.guildChatC2S != null) {
            if (typeof object.guildChatC2S !== "object")
                throw TypeError(".C2S.guildChatC2S: object expected");
            message.guildChatC2S = $root.GuildChatC2S.fromObject(object.guildChatC2S);
        }
        if (object.gMC2S != null) {
            if (typeof object.gMC2S !== "object")
                throw TypeError(".C2S.gMC2S: object expected");
            message.gMC2S = $root.GMC2S.fromObject(object.gMC2S);
        }
        if (object.checkPointListC2S != null) {
            if (typeof object.checkPointListC2S !== "object")
                throw TypeError(".C2S.checkPointListC2S: object expected");
            message.checkPointListC2S = $root.CheckPointListC2S.fromObject(object.checkPointListC2S);
        }
        if (object.getPlotStarRewardC2S != null) {
            if (typeof object.getPlotStarRewardC2S !== "object")
                throw TypeError(".C2S.getPlotStarRewardC2S: object expected");
            message.getPlotStarRewardC2S = $root.GetPlotStarRewardC2S.fromObject(object.getPlotStarRewardC2S);
        }
        if (object.buyTimesCheckPointC2S != null) {
            if (typeof object.buyTimesCheckPointC2S !== "object")
                throw TypeError(".C2S.buyTimesCheckPointC2S: object expected");
            message.buyTimesCheckPointC2S = $root.BuyTimesCheckPointC2S.fromObject(object.buyTimesCheckPointC2S);
        }
        if (object.sweepCheckPointC2S != null) {
            if (typeof object.sweepCheckPointC2S !== "object")
                throw TypeError(".C2S.sweepCheckPointC2S: object expected");
            message.sweepCheckPointC2S = $root.SweepCheckPointC2S.fromObject(object.sweepCheckPointC2S);
        }
        if (object.gamerSettlePVEC2S != null) {
            if (typeof object.gamerSettlePVEC2S !== "object")
                throw TypeError(".C2S.gamerSettlePVEC2S: object expected");
            message.gamerSettlePVEC2S = $root.GamerSettlePVEC2S.fromObject(object.gamerSettlePVEC2S);
        }
        if (object.draugListC2S != null) {
            if (typeof object.draugListC2S !== "object")
                throw TypeError(".C2S.draugListC2S: object expected");
            message.draugListC2S = $root.DraugListC2S.fromObject(object.draugListC2S);
        }
        if (object.awakenDraugC2S != null) {
            if (typeof object.awakenDraugC2S !== "object")
                throw TypeError(".C2S.awakenDraugC2S: object expected");
            message.awakenDraugC2S = $root.AwakenDraugC2S.fromObject(object.awakenDraugC2S);
        }
        if (object.putDraugIntoPackC2S != null) {
            if (typeof object.putDraugIntoPackC2S !== "object")
                throw TypeError(".C2S.putDraugIntoPackC2S: object expected");
            message.putDraugIntoPackC2S = $root.PutDraugIntoPackC2S.fromObject(object.putDraugIntoPackC2S);
        }
        if (object.swallowDraugC2S != null) {
            if (typeof object.swallowDraugC2S !== "object")
                throw TypeError(".C2S.swallowDraugC2S: object expected");
            message.swallowDraugC2S = $root.SwallowDraugC2S.fromObject(object.swallowDraugC2S);
        }
        if (object.decomposeDraugC2S != null) {
            if (typeof object.decomposeDraugC2S !== "object")
                throw TypeError(".C2S.decomposeDraugC2S: object expected");
            message.decomposeDraugC2S = $root.DecomposeDraugC2S.fromObject(object.decomposeDraugC2S);
        }
        if (object.lockDraugC2S != null) {
            if (typeof object.lockDraugC2S !== "object")
                throw TypeError(".C2S.lockDraugC2S: object expected");
            message.lockDraugC2S = $root.LockDraugC2S.fromObject(object.lockDraugC2S);
        }
        if (object.wearDraugC2S != null) {
            if (typeof object.wearDraugC2S !== "object")
                throw TypeError(".C2S.wearDraugC2S: object expected");
            message.wearDraugC2S = $root.WearDraugC2S.fromObject(object.wearDraugC2S);
        }
        if (object.unwearDraugC2S != null) {
            if (typeof object.unwearDraugC2S !== "object")
                throw TypeError(".C2S.unwearDraugC2S: object expected");
            message.unwearDraugC2S = $root.UnwearDraugC2S.fromObject(object.unwearDraugC2S);
        }
        if (object.draugSelectHeroC2S != null) {
            if (typeof object.draugSelectHeroC2S !== "object")
                throw TypeError(".C2S.draugSelectHeroC2S: object expected");
            message.draugSelectHeroC2S = $root.DraugSelectHeroC2S.fromObject(object.draugSelectHeroC2S);
        }
        if (object.heroGroupListC2S != null) {
            if (typeof object.heroGroupListC2S !== "object")
                throw TypeError(".C2S.heroGroupListC2S: object expected");
            message.heroGroupListC2S = $root.HeroGroupListC2S.fromObject(object.heroGroupListC2S);
        }
        if (object.unlockHeroGroupC2S != null) {
            if (typeof object.unlockHeroGroupC2S !== "object")
                throw TypeError(".C2S.unlockHeroGroupC2S: object expected");
            message.unlockHeroGroupC2S = $root.UnlockHeroGroupC2S.fromObject(object.unlockHeroGroupC2S);
        }
        if (object.changeNameHeroGroupC2S != null) {
            if (typeof object.changeNameHeroGroupC2S !== "object")
                throw TypeError(".C2S.changeNameHeroGroupC2S: object expected");
            message.changeNameHeroGroupC2S = $root.ChangeNameHeroGroupC2S.fromObject(object.changeNameHeroGroupC2S);
        }
        if (object.heroGroupChangeHeroC2S != null) {
            if (typeof object.heroGroupChangeHeroC2S !== "object")
                throw TypeError(".C2S.heroGroupChangeHeroC2S: object expected");
            message.heroGroupChangeHeroC2S = $root.HeroGroupChangeHeroC2S.fromObject(object.heroGroupChangeHeroC2S);
        }
        if (object.heroGroupChangeSkillC2S != null) {
            if (typeof object.heroGroupChangeSkillC2S !== "object")
                throw TypeError(".C2S.heroGroupChangeSkillC2S: object expected");
            message.heroGroupChangeSkillC2S = $root.HeroGroupChangeSkillC2S.fromObject(object.heroGroupChangeSkillC2S);
        }
        if (object.buyFatigueC2S != null) {
            if (typeof object.buyFatigueC2S !== "object")
                throw TypeError(".C2S.buyFatigueC2S: object expected");
            message.buyFatigueC2S = $root.BuyFatigueC2S.fromObject(object.buyFatigueC2S);
        }
        if (object.getFatigueWelfareC2S != null) {
            if (typeof object.getFatigueWelfareC2S !== "object")
                throw TypeError(".C2S.getFatigueWelfareC2S: object expected");
            message.getFatigueWelfareC2S = $root.GetFatigueWelfareC2S.fromObject(object.getFatigueWelfareC2S);
        }
        if (object.upStarEquipC2S != null) {
            if (typeof object.upStarEquipC2S !== "object")
                throw TypeError(".C2S.upStarEquipC2S: object expected");
            message.upStarEquipC2S = $root.UpStarEquipC2S.fromObject(object.upStarEquipC2S);
        }
        if (object.eatEquipsC2S != null) {
            if (typeof object.eatEquipsC2S !== "object")
                throw TypeError(".C2S.eatEquipsC2S: object expected");
            message.eatEquipsC2S = $root.EatEquipsC2S.fromObject(object.eatEquipsC2S);
        }
        if (object.desEquipC2S != null) {
            if (typeof object.desEquipC2S !== "object")
                throw TypeError(".C2S.desEquipC2S: object expected");
            message.desEquipC2S = $root.DesEquipC2S.fromObject(object.desEquipC2S);
        }
        if (object.takeOnEquipC2S != null) {
            if (typeof object.takeOnEquipC2S !== "object")
                throw TypeError(".C2S.takeOnEquipC2S: object expected");
            message.takeOnEquipC2S = $root.TakeOnEquipC2S.fromObject(object.takeOnEquipC2S);
        }
        if (object.takeOffEquipC2S != null) {
            if (typeof object.takeOffEquipC2S !== "object")
                throw TypeError(".C2S.takeOffEquipC2S: object expected");
            message.takeOffEquipC2S = $root.TakeOffEquipC2S.fromObject(object.takeOffEquipC2S);
        }
        if (object.redSpotC2S != null) {
            if (typeof object.redSpotC2S !== "object")
                throw TypeError(".C2S.redSpotC2S: object expected");
            message.redSpotC2S = $root.RedSpotC2S.fromObject(object.redSpotC2S);
        }
        if (object.makeTeamC2S != null) {
            if (typeof object.makeTeamC2S !== "object")
                throw TypeError(".C2S.makeTeamC2S: object expected");
            message.makeTeamC2S = $root.MakeTeamC2S.fromObject(object.makeTeamC2S);
        }
        if (object.setTeamAimC2S != null) {
            if (typeof object.setTeamAimC2S !== "object")
                throw TypeError(".C2S.setTeamAimC2S: object expected");
            message.setTeamAimC2S = $root.SetTeamAimC2S.fromObject(object.setTeamAimC2S);
        }
        if (object.joinTeamC2S != null) {
            if (typeof object.joinTeamC2S !== "object")
                throw TypeError(".C2S.joinTeamC2S: object expected");
            message.joinTeamC2S = $root.JoinTeamC2S.fromObject(object.joinTeamC2S);
        }
        if (object.exitTeamC2S != null) {
            if (typeof object.exitTeamC2S !== "object")
                throw TypeError(".C2S.exitTeamC2S: object expected");
            message.exitTeamC2S = $root.ExitTeamC2S.fromObject(object.exitTeamC2S);
        }
        if (object.turnOverTeamLeaderC2S != null) {
            if (typeof object.turnOverTeamLeaderC2S !== "object")
                throw TypeError(".C2S.turnOverTeamLeaderC2S: object expected");
            message.turnOverTeamLeaderC2S = $root.TurnOverTeamLeaderC2S.fromObject(object.turnOverTeamLeaderC2S);
        }
        if (object.inviteTeamC2S != null) {
            if (typeof object.inviteTeamC2S !== "object")
                throw TypeError(".C2S.inviteTeamC2S: object expected");
            message.inviteTeamC2S = $root.InviteTeamC2S.fromObject(object.inviteTeamC2S);
        }
        if (object.rejectTeamC2S != null) {
            if (typeof object.rejectTeamC2S !== "object")
                throw TypeError(".C2S.rejectTeamC2S: object expected");
            message.rejectTeamC2S = $root.RejectTeamC2S.fromObject(object.rejectTeamC2S);
        }
        if (object.kickTeamC2S != null) {
            if (typeof object.kickTeamC2S !== "object")
                throw TypeError(".C2S.kickTeamC2S: object expected");
            message.kickTeamC2S = $root.KickTeamC2S.fromObject(object.kickTeamC2S);
        }
        if (object.setTeamHelpC2S != null) {
            if (typeof object.setTeamHelpC2S !== "object")
                throw TypeError(".C2S.setTeamHelpC2S: object expected");
            message.setTeamHelpC2S = $root.SetTeamHelpC2S.fromObject(object.setTeamHelpC2S);
        }
        if (object.setTeamHeroC2S != null) {
            if (typeof object.setTeamHeroC2S !== "object")
                throw TypeError(".C2S.setTeamHeroC2S: object expected");
            message.setTeamHeroC2S = $root.SetTeamHeroC2S.fromObject(object.setTeamHeroC2S);
        }
        if (object.switchTeamReadyC2S != null) {
            if (typeof object.switchTeamReadyC2S !== "object")
                throw TypeError(".C2S.switchTeamReadyC2S: object expected");
            message.switchTeamReadyC2S = $root.SwitchTeamReadyC2S.fromObject(object.switchTeamReadyC2S);
        }
        if (object.teamBattleC2S != null) {
            if (typeof object.teamBattleC2S !== "object")
                throw TypeError(".C2S.teamBattleC2S: object expected");
            message.teamBattleC2S = $root.TeamBattleC2S.fromObject(object.teamBattleC2S);
        }
        if (object.getDanInfoC2S != null) {
            if (typeof object.getDanInfoC2S !== "object")
                throw TypeError(".C2S.getDanInfoC2S: object expected");
            message.getDanInfoC2S = $root.GetDanInfoC2S.fromObject(object.getDanInfoC2S);
        }
        if (object.getDuelRankC2S != null) {
            if (typeof object.getDuelRankC2S !== "object")
                throw TypeError(".C2S.getDuelRankC2S: object expected");
            message.getDuelRankC2S = $root.GetDuelRankC2S.fromObject(object.getDuelRankC2S);
        }
        if (object.sysListC2S != null) {
            if (typeof object.sysListC2S !== "object")
                throw TypeError(".C2S.sysListC2S: object expected");
            message.sysListC2S = $root.SysListC2S.fromObject(object.sysListC2S);
        }
        if (object.sysOpenShowC2S != null) {
            if (typeof object.sysOpenShowC2S !== "object")
                throw TypeError(".C2S.sysOpenShowC2S: object expected");
            message.sysOpenShowC2S = $root.SysOpenShowC2S.fromObject(object.sysOpenShowC2S);
        }
        if (object.getQuestsC2S != null) {
            if (typeof object.getQuestsC2S !== "object")
                throw TypeError(".C2S.getQuestsC2S: object expected");
            message.getQuestsC2S = $root.GetQuestsC2S.fromObject(object.getQuestsC2S);
        }
        if (object.getQuestRewardC2S != null) {
            if (typeof object.getQuestRewardC2S !== "object")
                throw TypeError(".C2S.getQuestRewardC2S: object expected");
            message.getQuestRewardC2S = $root.GetQuestRewardC2S.fromObject(object.getQuestRewardC2S);
        }
        if (object.getDailyQuestRewardC2S != null) {
            if (typeof object.getDailyQuestRewardC2S !== "object")
                throw TypeError(".C2S.getDailyQuestRewardC2S: object expected");
            message.getDailyQuestRewardC2S = $root.GetDailyQuestRewardC2S.fromObject(object.getDailyQuestRewardC2S);
        }
        if (object.gamerHeroImageChooseC2S != null) {
            if (typeof object.gamerHeroImageChooseC2S !== "object")
                throw TypeError(".C2S.gamerHeroImageChooseC2S: object expected");
            message.gamerHeroImageChooseC2S = $root.GamerHeroImageChooseC2S.fromObject(object.gamerHeroImageChooseC2S);
        }
        if (object.gamerHeroImageChangeC2S != null) {
            if (typeof object.gamerHeroImageChangeC2S !== "object")
                throw TypeError(".C2S.gamerHeroImageChangeC2S: object expected");
            message.gamerHeroImageChangeC2S = $root.GamerHeroImageChangeC2S.fromObject(object.gamerHeroImageChangeC2S);
        }
        if (object.gamerBuyRollC2S != null) {
            if (typeof object.gamerBuyRollC2S !== "object")
                throw TypeError(".C2S.gamerBuyRollC2S: object expected");
            message.gamerBuyRollC2S = $root.GamerBuyRollC2S.fromObject(object.gamerBuyRollC2S);
        }
        if (object.getGamerSecretLandC2S != null) {
            if (typeof object.getGamerSecretLandC2S !== "object")
                throw TypeError(".C2S.getGamerSecretLandC2S: object expected");
            message.getGamerSecretLandC2S = $root.GetGamerSecretLandC2S.fromObject(object.getGamerSecretLandC2S);
        }
        if (object.gamerSecretLandBattleRewardC2S != null) {
            if (typeof object.gamerSecretLandBattleRewardC2S !== "object")
                throw TypeError(".C2S.gamerSecretLandBattleRewardC2S: object expected");
            message.gamerSecretLandBattleRewardC2S = $root.GamerSecretLandBattleRewardC2S.fromObject(object.gamerSecretLandBattleRewardC2S);
        }
        if (object.gamerSecretLandWeekRewardC2S != null) {
            if (typeof object.gamerSecretLandWeekRewardC2S !== "object")
                throw TypeError(".C2S.gamerSecretLandWeekRewardC2S: object expected");
            message.gamerSecretLandWeekRewardC2S = $root.GamerSecretLandWeekRewardC2S.fromObject(object.gamerSecretLandWeekRewardC2S);
        }
        if (object.gamerSecretLandRankC2S != null) {
            if (typeof object.gamerSecretLandRankC2S !== "object")
                throw TypeError(".C2S.gamerSecretLandRankC2S: object expected");
            message.gamerSecretLandRankC2S = $root.GamerSecretLandRankC2S.fromObject(object.gamerSecretLandRankC2S);
        }
        if (object.getGamerSecretLandInfoC2S != null) {
            if (typeof object.getGamerSecretLandInfoC2S !== "object")
                throw TypeError(".C2S.getGamerSecretLandInfoC2S: object expected");
            message.getGamerSecretLandInfoC2S = $root.GetGamerSecretLandInfoC2S.fromObject(object.getGamerSecretLandInfoC2S);
        }
        if (object.gamerChangeItemIsSawC2S != null) {
            if (typeof object.gamerChangeItemIsSawC2S !== "object")
                throw TypeError(".C2S.gamerChangeItemIsSawC2S: object expected");
            message.gamerChangeItemIsSawC2S = $root.GamerChangeItemIsSawC2S.fromObject(object.gamerChangeItemIsSawC2S);
        }
        return message;
    };
    C2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = "";
            object.gamerLoginC2S = null;
            object.gamerLoginGetDataC2S = null;
            object.serverTimeC2S = null;
            object.gamerSubChatChannelC2S = null;
            object.gamerChangeNameC2S = null;
            object.gamerChangeAvatarC2S = null;
            object.gamerGetBackpackC2S = null;
            object.gamerSellItemC2S = null;
            object.gamerUseItemC2S = null;
            object.gamerFriendChatC2S = null;
            object.gamerWorldChatC2S = null;
            object.gamerTestChatC2S = null;
            object.gamerClubRequestC2S = null;
            object.gamerNewFriendReqC2S = null;
            object.gamerDelFriendC2S = null;
            object.gamerProcessFriendReqC2S = null;
            object.gamerGetMailC2S = null;
            object.gamerDelMailC2S = null;
            object.gamerDelHaveReadMailC2S = null;
            object.gamerOneKeyRcvMailRewardC2S = null;
            object.gamerChangeMailStateC2S = null;
            object.gamerNewHeroC2S = null;
            object.gamerUpgradeHeroC2S = null;
            object.gamerUseHeroMedicineC2S = null;
            object.gamerUpStarHeroC2S = null;
            object.gamerUpHeroSkillC2S = null;
            object.gamerGetHeroC2S = null;
            object.gamerPVPLoadingC2S = null;
            object.gamerPVPSyncC2S = null;
            object.gamerReliveC2S = null;
            object.gamerGetRealTimeRankC2S = null;
            object.gamerCheckPVPBattleC2S = null;
            object.gamerUploadWXInfoC2S = null;
            object.gamerGetNoviceGuideC2S = null;
            object.gamerNoviceGuideChangeC2S = null;
            object.gamerMatchC2S = null;
            object.gamerCancelMatchC2S = null;
            object.gamerGetRewardC2S = null;
            object.gamerUseIconC2S = null;
            object.gamerExtractGashaponC2S = null;
            object.gamerGetGashaponPreviewC2S = null;
            object.getActivityRewardC2S = null;
            object.createGuildC2S = null;
            object.guildGamerLoginC2S = null;
            object.guildGamerLoginoutC2S = null;
            object.dissolutionGuildC2S = null;
            object.getGuildC2S = null;
            object.getGuildListC2S = null;
            object.applyJoinGuildC2S = null;
            object.approvalJoinGuildC2S = null;
            object.inviteJoinGuildC2S = null;
            object.agreeJoinGuildC2S = null;
            object.quitGuildC2S = null;
            object.kickOutGuildC2S = null;
            object.guildChatC2S = null;
            object.gMC2S = null;
            object.checkPointListC2S = null;
            object.getPlotStarRewardC2S = null;
            object.buyTimesCheckPointC2S = null;
            object.sweepCheckPointC2S = null;
            object.gamerSettlePVEC2S = null;
            object.draugListC2S = null;
            object.awakenDraugC2S = null;
            object.putDraugIntoPackC2S = null;
            object.swallowDraugC2S = null;
            object.decomposeDraugC2S = null;
            object.lockDraugC2S = null;
            object.wearDraugC2S = null;
            object.unwearDraugC2S = null;
            object.draugSelectHeroC2S = null;
            object.heroGroupListC2S = null;
            object.unlockHeroGroupC2S = null;
            object.changeNameHeroGroupC2S = null;
            object.heroGroupChangeHeroC2S = null;
            object.heroGroupChangeSkillC2S = null;
            object.buyFatigueC2S = null;
            object.getFatigueWelfareC2S = null;
            object.upStarEquipC2S = null;
            object.eatEquipsC2S = null;
            object.desEquipC2S = null;
            object.takeOnEquipC2S = null;
            object.takeOffEquipC2S = null;
            object.redSpotC2S = null;
            object.makeTeamC2S = null;
            object.setTeamAimC2S = null;
            object.joinTeamC2S = null;
            object.exitTeamC2S = null;
            object.turnOverTeamLeaderC2S = null;
            object.inviteTeamC2S = null;
            object.rejectTeamC2S = null;
            object.kickTeamC2S = null;
            object.setTeamHelpC2S = null;
            object.setTeamHeroC2S = null;
            object.switchTeamReadyC2S = null;
            object.teamBattleC2S = null;
            object.getDanInfoC2S = null;
            object.getDuelRankC2S = null;
            object.sysListC2S = null;
            object.sysOpenShowC2S = null;
            object.getQuestsC2S = null;
            object.getQuestRewardC2S = null;
            object.getDailyQuestRewardC2S = null;
            object.gamerHeroImageChooseC2S = null;
            object.gamerHeroImageChangeC2S = null;
            object.gamerBuyRollC2S = null;
            object.getGamerSecretLandC2S = null;
            object.gamerSecretLandBattleRewardC2S = null;
            object.gamerSecretLandWeekRewardC2S = null;
            object.gamerSecretLandRankC2S = null;
            object.getGamerSecretLandInfoC2S = null;
            object.gamerChangeItemIsSawC2S = null;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.gamerLoginC2S != null && message.hasOwnProperty("gamerLoginC2S"))
            object.gamerLoginC2S = $root.GamerLoginC2S.toObject(message.gamerLoginC2S, options);
        if (message.gamerLoginGetDataC2S != null && message.hasOwnProperty("gamerLoginGetDataC2S"))
            object.gamerLoginGetDataC2S = $root.GamerLoginGetDataC2S.toObject(message.gamerLoginGetDataC2S, options);
        if (message.serverTimeC2S != null && message.hasOwnProperty("serverTimeC2S"))
            object.serverTimeC2S = $root.ServerTimeC2S.toObject(message.serverTimeC2S, options);
        if (message.gamerSubChatChannelC2S != null && message.hasOwnProperty("gamerSubChatChannelC2S"))
            object.gamerSubChatChannelC2S = $root.GamerSubChatChannelC2S.toObject(message.gamerSubChatChannelC2S, options);
        if (message.gamerChangeNameC2S != null && message.hasOwnProperty("gamerChangeNameC2S"))
            object.gamerChangeNameC2S = $root.GamerChangeNameC2S.toObject(message.gamerChangeNameC2S, options);
        if (message.gamerChangeAvatarC2S != null && message.hasOwnProperty("gamerChangeAvatarC2S"))
            object.gamerChangeAvatarC2S = $root.GamerChangeAvatarC2S.toObject(message.gamerChangeAvatarC2S, options);
        if (message.gamerGetBackpackC2S != null && message.hasOwnProperty("gamerGetBackpackC2S"))
            object.gamerGetBackpackC2S = $root.GamerGetBackpackC2S.toObject(message.gamerGetBackpackC2S, options);
        if (message.gamerSellItemC2S != null && message.hasOwnProperty("gamerSellItemC2S"))
            object.gamerSellItemC2S = $root.GamerSellItemC2S.toObject(message.gamerSellItemC2S, options);
        if (message.gamerUseItemC2S != null && message.hasOwnProperty("gamerUseItemC2S"))
            object.gamerUseItemC2S = $root.GamerUseItemC2S.toObject(message.gamerUseItemC2S, options);
        if (message.gamerFriendChatC2S != null && message.hasOwnProperty("gamerFriendChatC2S"))
            object.gamerFriendChatC2S = $root.GamerFriendChatC2S.toObject(message.gamerFriendChatC2S, options);
        if (message.gamerWorldChatC2S != null && message.hasOwnProperty("gamerWorldChatC2S"))
            object.gamerWorldChatC2S = $root.GamerWorldChatC2S.toObject(message.gamerWorldChatC2S, options);
        if (message.gamerTestChatC2S != null && message.hasOwnProperty("gamerTestChatC2S"))
            object.gamerTestChatC2S = $root.GamerTestChatC2S.toObject(message.gamerTestChatC2S, options);
        if (message.gamerClubRequestC2S != null && message.hasOwnProperty("gamerClubRequestC2S"))
            object.gamerClubRequestC2S = $root.GamerClubRequestC2S.toObject(message.gamerClubRequestC2S, options);
        if (message.gamerNewFriendReqC2S != null && message.hasOwnProperty("gamerNewFriendReqC2S"))
            object.gamerNewFriendReqC2S = $root.GamerNewFriendReqC2S.toObject(message.gamerNewFriendReqC2S, options);
        if (message.gamerDelFriendC2S != null && message.hasOwnProperty("gamerDelFriendC2S"))
            object.gamerDelFriendC2S = $root.GamerDelFriendC2S.toObject(message.gamerDelFriendC2S, options);
        if (message.gamerProcessFriendReqC2S != null && message.hasOwnProperty("gamerProcessFriendReqC2S"))
            object.gamerProcessFriendReqC2S = $root.GamerProcessFriendReqC2S.toObject(message.gamerProcessFriendReqC2S, options);
        if (message.gamerGetMailC2S != null && message.hasOwnProperty("gamerGetMailC2S"))
            object.gamerGetMailC2S = $root.GamerGetMailC2S.toObject(message.gamerGetMailC2S, options);
        if (message.gamerDelMailC2S != null && message.hasOwnProperty("gamerDelMailC2S"))
            object.gamerDelMailC2S = $root.GamerDelMailC2S.toObject(message.gamerDelMailC2S, options);
        if (message.gamerDelHaveReadMailC2S != null && message.hasOwnProperty("gamerDelHaveReadMailC2S"))
            object.gamerDelHaveReadMailC2S = $root.GamerDelHaveReadMailC2S.toObject(message.gamerDelHaveReadMailC2S, options);
        if (message.gamerOneKeyRcvMailRewardC2S != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardC2S"))
            object.gamerOneKeyRcvMailRewardC2S = $root.GamerOneKeyRcvMailRewardC2S.toObject(message.gamerOneKeyRcvMailRewardC2S, options);
        if (message.gamerChangeMailStateC2S != null && message.hasOwnProperty("gamerChangeMailStateC2S"))
            object.gamerChangeMailStateC2S = $root.GamerChangeMailStateC2S.toObject(message.gamerChangeMailStateC2S, options);
        if (message.gamerNewHeroC2S != null && message.hasOwnProperty("gamerNewHeroC2S"))
            object.gamerNewHeroC2S = $root.GamerNewHeroC2S.toObject(message.gamerNewHeroC2S, options);
        if (message.gamerUpgradeHeroC2S != null && message.hasOwnProperty("gamerUpgradeHeroC2S"))
            object.gamerUpgradeHeroC2S = $root.GamerUpgradeHeroC2S.toObject(message.gamerUpgradeHeroC2S, options);
        if (message.gamerUseHeroMedicineC2S != null && message.hasOwnProperty("gamerUseHeroMedicineC2S"))
            object.gamerUseHeroMedicineC2S = $root.GamerUseHeroMedicineC2S.toObject(message.gamerUseHeroMedicineC2S, options);
        if (message.gamerUpStarHeroC2S != null && message.hasOwnProperty("gamerUpStarHeroC2S"))
            object.gamerUpStarHeroC2S = $root.GamerUpStarHeroC2S.toObject(message.gamerUpStarHeroC2S, options);
        if (message.gamerUpHeroSkillC2S != null && message.hasOwnProperty("gamerUpHeroSkillC2S"))
            object.gamerUpHeroSkillC2S = $root.GamerUpHeroSkillC2S.toObject(message.gamerUpHeroSkillC2S, options);
        if (message.gamerGetHeroC2S != null && message.hasOwnProperty("gamerGetHeroC2S"))
            object.gamerGetHeroC2S = $root.GamerGetHeroC2S.toObject(message.gamerGetHeroC2S, options);
        if (message.gamerPVPLoadingC2S != null && message.hasOwnProperty("gamerPVPLoadingC2S"))
            object.gamerPVPLoadingC2S = $root.GamerPVPLoadingC2S.toObject(message.gamerPVPLoadingC2S, options);
        if (message.gamerPVPSyncC2S != null && message.hasOwnProperty("gamerPVPSyncC2S"))
            object.gamerPVPSyncC2S = $root.GamerPVPSyncC2S.toObject(message.gamerPVPSyncC2S, options);
        if (message.gamerReliveC2S != null && message.hasOwnProperty("gamerReliveC2S"))
            object.gamerReliveC2S = $root.GamerReliveC2S.toObject(message.gamerReliveC2S, options);
        if (message.gamerGetRealTimeRankC2S != null && message.hasOwnProperty("gamerGetRealTimeRankC2S"))
            object.gamerGetRealTimeRankC2S = $root.GamerGetRealTimeRankC2S.toObject(message.gamerGetRealTimeRankC2S, options);
        if (message.gamerCheckPVPBattleC2S != null && message.hasOwnProperty("gamerCheckPVPBattleC2S"))
            object.gamerCheckPVPBattleC2S = $root.GamerCheckPVPBattleC2S.toObject(message.gamerCheckPVPBattleC2S, options);
        if (message.gamerUploadWXInfoC2S != null && message.hasOwnProperty("gamerUploadWXInfoC2S"))
            object.gamerUploadWXInfoC2S = $root.GamerUploadWXInfoC2S.toObject(message.gamerUploadWXInfoC2S, options);
        if (message.gamerGetNoviceGuideC2S != null && message.hasOwnProperty("gamerGetNoviceGuideC2S"))
            object.gamerGetNoviceGuideC2S = $root.GamerGetNoviceGuideC2S.toObject(message.gamerGetNoviceGuideC2S, options);
        if (message.gamerNoviceGuideChangeC2S != null && message.hasOwnProperty("gamerNoviceGuideChangeC2S"))
            object.gamerNoviceGuideChangeC2S = $root.GamerNoviceGuideChangeC2S.toObject(message.gamerNoviceGuideChangeC2S, options);
        if (message.gamerMatchC2S != null && message.hasOwnProperty("gamerMatchC2S"))
            object.gamerMatchC2S = $root.GamerMatchC2S.toObject(message.gamerMatchC2S, options);
        if (message.gamerCancelMatchC2S != null && message.hasOwnProperty("gamerCancelMatchC2S"))
            object.gamerCancelMatchC2S = $root.GamerCancelMatchC2S.toObject(message.gamerCancelMatchC2S, options);
        if (message.gamerGetRewardC2S != null && message.hasOwnProperty("gamerGetRewardC2S"))
            object.gamerGetRewardC2S = $root.GamerGetRewardC2S.toObject(message.gamerGetRewardC2S, options);
        if (message.gamerUseIconC2S != null && message.hasOwnProperty("gamerUseIconC2S"))
            object.gamerUseIconC2S = $root.GamerUseIconC2S.toObject(message.gamerUseIconC2S, options);
        if (message.gamerExtractGashaponC2S != null && message.hasOwnProperty("gamerExtractGashaponC2S"))
            object.gamerExtractGashaponC2S = $root.GamerExtractGashaponC2S.toObject(message.gamerExtractGashaponC2S, options);
        if (message.gamerGetGashaponPreviewC2S != null && message.hasOwnProperty("gamerGetGashaponPreviewC2S"))
            object.gamerGetGashaponPreviewC2S = $root.GamerGetGashaponPreviewC2S.toObject(message.gamerGetGashaponPreviewC2S, options);
        if (message.getActivityRewardC2S != null && message.hasOwnProperty("getActivityRewardC2S"))
            object.getActivityRewardC2S = $root.GetActivityRewardC2S.toObject(message.getActivityRewardC2S, options);
        if (message.createGuildC2S != null && message.hasOwnProperty("createGuildC2S"))
            object.createGuildC2S = $root.CreateGuildC2S.toObject(message.createGuildC2S, options);
        if (message.guildGamerLoginC2S != null && message.hasOwnProperty("guildGamerLoginC2S"))
            object.guildGamerLoginC2S = $root.GuildGamerLoginC2S.toObject(message.guildGamerLoginC2S, options);
        if (message.guildGamerLoginoutC2S != null && message.hasOwnProperty("guildGamerLoginoutC2S"))
            object.guildGamerLoginoutC2S = $root.GuildGamerLoginoutC2S.toObject(message.guildGamerLoginoutC2S, options);
        if (message.dissolutionGuildC2S != null && message.hasOwnProperty("dissolutionGuildC2S"))
            object.dissolutionGuildC2S = $root.DissolutionGuildC2S.toObject(message.dissolutionGuildC2S, options);
        if (message.getGuildC2S != null && message.hasOwnProperty("getGuildC2S"))
            object.getGuildC2S = $root.GetGuildC2S.toObject(message.getGuildC2S, options);
        if (message.getGuildListC2S != null && message.hasOwnProperty("getGuildListC2S"))
            object.getGuildListC2S = $root.GetGuildListC2S.toObject(message.getGuildListC2S, options);
        if (message.applyJoinGuildC2S != null && message.hasOwnProperty("applyJoinGuildC2S"))
            object.applyJoinGuildC2S = $root.ApplyJoinGuildC2S.toObject(message.applyJoinGuildC2S, options);
        if (message.approvalJoinGuildC2S != null && message.hasOwnProperty("approvalJoinGuildC2S"))
            object.approvalJoinGuildC2S = $root.ApprovalJoinGuildC2S.toObject(message.approvalJoinGuildC2S, options);
        if (message.inviteJoinGuildC2S != null && message.hasOwnProperty("inviteJoinGuildC2S"))
            object.inviteJoinGuildC2S = $root.InviteJoinGuildC2S.toObject(message.inviteJoinGuildC2S, options);
        if (message.agreeJoinGuildC2S != null && message.hasOwnProperty("agreeJoinGuildC2S"))
            object.agreeJoinGuildC2S = $root.AgreeJoinGuildC2S.toObject(message.agreeJoinGuildC2S, options);
        if (message.quitGuildC2S != null && message.hasOwnProperty("quitGuildC2S"))
            object.quitGuildC2S = $root.QuitGuildC2S.toObject(message.quitGuildC2S, options);
        if (message.kickOutGuildC2S != null && message.hasOwnProperty("kickOutGuildC2S"))
            object.kickOutGuildC2S = $root.KickOutGuildC2S.toObject(message.kickOutGuildC2S, options);
        if (message.guildChatC2S != null && message.hasOwnProperty("guildChatC2S"))
            object.guildChatC2S = $root.GuildChatC2S.toObject(message.guildChatC2S, options);
        if (message.gMC2S != null && message.hasOwnProperty("gMC2S"))
            object.gMC2S = $root.GMC2S.toObject(message.gMC2S, options);
        if (message.checkPointListC2S != null && message.hasOwnProperty("checkPointListC2S"))
            object.checkPointListC2S = $root.CheckPointListC2S.toObject(message.checkPointListC2S, options);
        if (message.getPlotStarRewardC2S != null && message.hasOwnProperty("getPlotStarRewardC2S"))
            object.getPlotStarRewardC2S = $root.GetPlotStarRewardC2S.toObject(message.getPlotStarRewardC2S, options);
        if (message.buyTimesCheckPointC2S != null && message.hasOwnProperty("buyTimesCheckPointC2S"))
            object.buyTimesCheckPointC2S = $root.BuyTimesCheckPointC2S.toObject(message.buyTimesCheckPointC2S, options);
        if (message.sweepCheckPointC2S != null && message.hasOwnProperty("sweepCheckPointC2S"))
            object.sweepCheckPointC2S = $root.SweepCheckPointC2S.toObject(message.sweepCheckPointC2S, options);
        if (message.gamerSettlePVEC2S != null && message.hasOwnProperty("gamerSettlePVEC2S"))
            object.gamerSettlePVEC2S = $root.GamerSettlePVEC2S.toObject(message.gamerSettlePVEC2S, options);
        if (message.draugListC2S != null && message.hasOwnProperty("draugListC2S"))
            object.draugListC2S = $root.DraugListC2S.toObject(message.draugListC2S, options);
        if (message.awakenDraugC2S != null && message.hasOwnProperty("awakenDraugC2S"))
            object.awakenDraugC2S = $root.AwakenDraugC2S.toObject(message.awakenDraugC2S, options);
        if (message.putDraugIntoPackC2S != null && message.hasOwnProperty("putDraugIntoPackC2S"))
            object.putDraugIntoPackC2S = $root.PutDraugIntoPackC2S.toObject(message.putDraugIntoPackC2S, options);
        if (message.swallowDraugC2S != null && message.hasOwnProperty("swallowDraugC2S"))
            object.swallowDraugC2S = $root.SwallowDraugC2S.toObject(message.swallowDraugC2S, options);
        if (message.decomposeDraugC2S != null && message.hasOwnProperty("decomposeDraugC2S"))
            object.decomposeDraugC2S = $root.DecomposeDraugC2S.toObject(message.decomposeDraugC2S, options);
        if (message.lockDraugC2S != null && message.hasOwnProperty("lockDraugC2S"))
            object.lockDraugC2S = $root.LockDraugC2S.toObject(message.lockDraugC2S, options);
        if (message.wearDraugC2S != null && message.hasOwnProperty("wearDraugC2S"))
            object.wearDraugC2S = $root.WearDraugC2S.toObject(message.wearDraugC2S, options);
        if (message.unwearDraugC2S != null && message.hasOwnProperty("unwearDraugC2S"))
            object.unwearDraugC2S = $root.UnwearDraugC2S.toObject(message.unwearDraugC2S, options);
        if (message.draugSelectHeroC2S != null && message.hasOwnProperty("draugSelectHeroC2S"))
            object.draugSelectHeroC2S = $root.DraugSelectHeroC2S.toObject(message.draugSelectHeroC2S, options);
        if (message.heroGroupListC2S != null && message.hasOwnProperty("heroGroupListC2S"))
            object.heroGroupListC2S = $root.HeroGroupListC2S.toObject(message.heroGroupListC2S, options);
        if (message.unlockHeroGroupC2S != null && message.hasOwnProperty("unlockHeroGroupC2S"))
            object.unlockHeroGroupC2S = $root.UnlockHeroGroupC2S.toObject(message.unlockHeroGroupC2S, options);
        if (message.changeNameHeroGroupC2S != null && message.hasOwnProperty("changeNameHeroGroupC2S"))
            object.changeNameHeroGroupC2S = $root.ChangeNameHeroGroupC2S.toObject(message.changeNameHeroGroupC2S, options);
        if (message.heroGroupChangeHeroC2S != null && message.hasOwnProperty("heroGroupChangeHeroC2S"))
            object.heroGroupChangeHeroC2S = $root.HeroGroupChangeHeroC2S.toObject(message.heroGroupChangeHeroC2S, options);
        if (message.heroGroupChangeSkillC2S != null && message.hasOwnProperty("heroGroupChangeSkillC2S"))
            object.heroGroupChangeSkillC2S = $root.HeroGroupChangeSkillC2S.toObject(message.heroGroupChangeSkillC2S, options);
        if (message.buyFatigueC2S != null && message.hasOwnProperty("buyFatigueC2S"))
            object.buyFatigueC2S = $root.BuyFatigueC2S.toObject(message.buyFatigueC2S, options);
        if (message.getFatigueWelfareC2S != null && message.hasOwnProperty("getFatigueWelfareC2S"))
            object.getFatigueWelfareC2S = $root.GetFatigueWelfareC2S.toObject(message.getFatigueWelfareC2S, options);
        if (message.upStarEquipC2S != null && message.hasOwnProperty("upStarEquipC2S"))
            object.upStarEquipC2S = $root.UpStarEquipC2S.toObject(message.upStarEquipC2S, options);
        if (message.eatEquipsC2S != null && message.hasOwnProperty("eatEquipsC2S"))
            object.eatEquipsC2S = $root.EatEquipsC2S.toObject(message.eatEquipsC2S, options);
        if (message.desEquipC2S != null && message.hasOwnProperty("desEquipC2S"))
            object.desEquipC2S = $root.DesEquipC2S.toObject(message.desEquipC2S, options);
        if (message.takeOnEquipC2S != null && message.hasOwnProperty("takeOnEquipC2S"))
            object.takeOnEquipC2S = $root.TakeOnEquipC2S.toObject(message.takeOnEquipC2S, options);
        if (message.takeOffEquipC2S != null && message.hasOwnProperty("takeOffEquipC2S"))
            object.takeOffEquipC2S = $root.TakeOffEquipC2S.toObject(message.takeOffEquipC2S, options);
        if (message.redSpotC2S != null && message.hasOwnProperty("redSpotC2S"))
            object.redSpotC2S = $root.RedSpotC2S.toObject(message.redSpotC2S, options);
        if (message.makeTeamC2S != null && message.hasOwnProperty("makeTeamC2S"))
            object.makeTeamC2S = $root.MakeTeamC2S.toObject(message.makeTeamC2S, options);
        if (message.setTeamAimC2S != null && message.hasOwnProperty("setTeamAimC2S"))
            object.setTeamAimC2S = $root.SetTeamAimC2S.toObject(message.setTeamAimC2S, options);
        if (message.joinTeamC2S != null && message.hasOwnProperty("joinTeamC2S"))
            object.joinTeamC2S = $root.JoinTeamC2S.toObject(message.joinTeamC2S, options);
        if (message.exitTeamC2S != null && message.hasOwnProperty("exitTeamC2S"))
            object.exitTeamC2S = $root.ExitTeamC2S.toObject(message.exitTeamC2S, options);
        if (message.turnOverTeamLeaderC2S != null && message.hasOwnProperty("turnOverTeamLeaderC2S"))
            object.turnOverTeamLeaderC2S = $root.TurnOverTeamLeaderC2S.toObject(message.turnOverTeamLeaderC2S, options);
        if (message.inviteTeamC2S != null && message.hasOwnProperty("inviteTeamC2S"))
            object.inviteTeamC2S = $root.InviteTeamC2S.toObject(message.inviteTeamC2S, options);
        if (message.rejectTeamC2S != null && message.hasOwnProperty("rejectTeamC2S"))
            object.rejectTeamC2S = $root.RejectTeamC2S.toObject(message.rejectTeamC2S, options);
        if (message.kickTeamC2S != null && message.hasOwnProperty("kickTeamC2S"))
            object.kickTeamC2S = $root.KickTeamC2S.toObject(message.kickTeamC2S, options);
        if (message.setTeamHelpC2S != null && message.hasOwnProperty("setTeamHelpC2S"))
            object.setTeamHelpC2S = $root.SetTeamHelpC2S.toObject(message.setTeamHelpC2S, options);
        if (message.setTeamHeroC2S != null && message.hasOwnProperty("setTeamHeroC2S"))
            object.setTeamHeroC2S = $root.SetTeamHeroC2S.toObject(message.setTeamHeroC2S, options);
        if (message.switchTeamReadyC2S != null && message.hasOwnProperty("switchTeamReadyC2S"))
            object.switchTeamReadyC2S = $root.SwitchTeamReadyC2S.toObject(message.switchTeamReadyC2S, options);
        if (message.teamBattleC2S != null && message.hasOwnProperty("teamBattleC2S"))
            object.teamBattleC2S = $root.TeamBattleC2S.toObject(message.teamBattleC2S, options);
        if (message.getDanInfoC2S != null && message.hasOwnProperty("getDanInfoC2S"))
            object.getDanInfoC2S = $root.GetDanInfoC2S.toObject(message.getDanInfoC2S, options);
        if (message.getDuelRankC2S != null && message.hasOwnProperty("getDuelRankC2S"))
            object.getDuelRankC2S = $root.GetDuelRankC2S.toObject(message.getDuelRankC2S, options);
        if (message.sysListC2S != null && message.hasOwnProperty("sysListC2S"))
            object.sysListC2S = $root.SysListC2S.toObject(message.sysListC2S, options);
        if (message.sysOpenShowC2S != null && message.hasOwnProperty("sysOpenShowC2S"))
            object.sysOpenShowC2S = $root.SysOpenShowC2S.toObject(message.sysOpenShowC2S, options);
        if (message.getQuestsC2S != null && message.hasOwnProperty("getQuestsC2S"))
            object.getQuestsC2S = $root.GetQuestsC2S.toObject(message.getQuestsC2S, options);
        if (message.getQuestRewardC2S != null && message.hasOwnProperty("getQuestRewardC2S"))
            object.getQuestRewardC2S = $root.GetQuestRewardC2S.toObject(message.getQuestRewardC2S, options);
        if (message.getDailyQuestRewardC2S != null && message.hasOwnProperty("getDailyQuestRewardC2S"))
            object.getDailyQuestRewardC2S = $root.GetDailyQuestRewardC2S.toObject(message.getDailyQuestRewardC2S, options);
        if (message.gamerHeroImageChooseC2S != null && message.hasOwnProperty("gamerHeroImageChooseC2S"))
            object.gamerHeroImageChooseC2S = $root.GamerHeroImageChooseC2S.toObject(message.gamerHeroImageChooseC2S, options);
        if (message.gamerHeroImageChangeC2S != null && message.hasOwnProperty("gamerHeroImageChangeC2S"))
            object.gamerHeroImageChangeC2S = $root.GamerHeroImageChangeC2S.toObject(message.gamerHeroImageChangeC2S, options);
        if (message.gamerBuyRollC2S != null && message.hasOwnProperty("gamerBuyRollC2S"))
            object.gamerBuyRollC2S = $root.GamerBuyRollC2S.toObject(message.gamerBuyRollC2S, options);
        if (message.getGamerSecretLandC2S != null && message.hasOwnProperty("getGamerSecretLandC2S"))
            object.getGamerSecretLandC2S = $root.GetGamerSecretLandC2S.toObject(message.getGamerSecretLandC2S, options);
        if (message.gamerSecretLandBattleRewardC2S != null && message.hasOwnProperty("gamerSecretLandBattleRewardC2S"))
            object.gamerSecretLandBattleRewardC2S = $root.GamerSecretLandBattleRewardC2S.toObject(message.gamerSecretLandBattleRewardC2S, options);
        if (message.gamerSecretLandWeekRewardC2S != null && message.hasOwnProperty("gamerSecretLandWeekRewardC2S"))
            object.gamerSecretLandWeekRewardC2S = $root.GamerSecretLandWeekRewardC2S.toObject(message.gamerSecretLandWeekRewardC2S, options);
        if (message.gamerSecretLandRankC2S != null && message.hasOwnProperty("gamerSecretLandRankC2S"))
            object.gamerSecretLandRankC2S = $root.GamerSecretLandRankC2S.toObject(message.gamerSecretLandRankC2S, options);
        if (message.getGamerSecretLandInfoC2S != null && message.hasOwnProperty("getGamerSecretLandInfoC2S"))
            object.getGamerSecretLandInfoC2S = $root.GetGamerSecretLandInfoC2S.toObject(message.getGamerSecretLandInfoC2S, options);
        if (message.gamerChangeItemIsSawC2S != null && message.hasOwnProperty("gamerChangeItemIsSawC2S"))
            object.gamerChangeItemIsSawC2S = $root.GamerChangeItemIsSawC2S.toObject(message.gamerChangeItemIsSawC2S, options);
        return object;
    };
    C2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return C2S;
})();
$root.GamerLoginC2S = (function() {
    function GamerLoginC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerLoginC2S.prototype.id = 0;
    GamerLoginC2S.prototype.session = "";
    GamerLoginC2S.prototype.addr = "";
    GamerLoginC2S.create = function create(properties) {
        return new GamerLoginC2S(properties);
    };
    GamerLoginC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.session);
        if (message.addr != null && message.hasOwnProperty("addr"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.addr);
        return writer;
    };
    GamerLoginC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerLoginC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerLoginC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.session = reader.string();
                break;
            case 3:
                message.addr = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerLoginC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerLoginC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        if (message.addr != null && message.hasOwnProperty("addr"))
            if (!$util.isString(message.addr))
                return "addr: string expected";
        return null;
    };
    GamerLoginC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerLoginC2S)
            return object;
        var message = new $root.GamerLoginC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.session != null)
            message.session = String(object.session);
        if (object.addr != null)
            message.addr = String(object.addr);
        return message;
    };
    GamerLoginC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.session = "";
            object.addr = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        if (message.addr != null && message.hasOwnProperty("addr"))
            object.addr = message.addr;
        return object;
    };
    GamerLoginC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerLoginC2S;
})();
$root.GamerLoginS2C = (function() {
    function GamerLoginS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerLoginS2C.prototype.error = 0;
    GamerLoginS2C.prototype.main = null;
    GamerLoginS2C.prototype.changeNameNum = 0;
    GamerLoginS2C.create = function create(properties) {
        return new GamerLoginS2C(properties);
    };
    GamerLoginS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.main != null && message.hasOwnProperty("main"))
            $root.GamerMain.encode(message.main, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.changeNameNum != null && message.hasOwnProperty("changeNameNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.changeNameNum);
        return writer;
    };
    GamerLoginS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerLoginS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerLoginS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.main = $root.GamerMain.decode(reader, reader.uint32());
                break;
            case 3:
                message.changeNameNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerLoginS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerLoginS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.main != null && message.hasOwnProperty("main")) {
            var error = $root.GamerMain.verify(message.main);
            if (error)
                return "main." + error;
        }
        if (message.changeNameNum != null && message.hasOwnProperty("changeNameNum"))
            if (!$util.isInteger(message.changeNameNum))
                return "changeNameNum: integer expected";
        return null;
    };
    GamerLoginS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerLoginS2C)
            return object;
        var message = new $root.GamerLoginS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.main != null) {
            if (typeof object.main !== "object")
                throw TypeError(".GamerLoginS2C.main: object expected");
            message.main = $root.GamerMain.fromObject(object.main);
        }
        if (object.changeNameNum != null)
            message.changeNameNum = object.changeNameNum | 0;
        return message;
    };
    GamerLoginS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.main = null;
            object.changeNameNum = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.main != null && message.hasOwnProperty("main"))
            object.main = $root.GamerMain.toObject(message.main, options);
        if (message.changeNameNum != null && message.hasOwnProperty("changeNameNum"))
            object.changeNameNum = message.changeNameNum;
        return object;
    };
    GamerLoginS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerLoginS2C;
})();
$root.GamerLoginGetDataC2S = (function() {
    function GamerLoginGetDataC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerLoginGetDataC2S.prototype.id = 0;
    GamerLoginGetDataC2S.create = function create(properties) {
        return new GamerLoginGetDataC2S(properties);
    };
    GamerLoginGetDataC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerLoginGetDataC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerLoginGetDataC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerLoginGetDataC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerLoginGetDataC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerLoginGetDataC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerLoginGetDataC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerLoginGetDataC2S)
            return object;
        var message = new $root.GamerLoginGetDataC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerLoginGetDataC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerLoginGetDataC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerLoginGetDataC2S;
})();
$root.GamerLoginGetDataS2C = (function() {
    function GamerLoginGetDataS2C(properties) {
        this.friendReqs = [];
        this.friends = [];
        this.heros = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerLoginGetDataS2C.prototype.error = 0;
    GamerLoginGetDataS2C.prototype.time = null;
    GamerLoginGetDataS2C.prototype.friendReqs = $util.emptyArray;
    GamerLoginGetDataS2C.prototype.friends = $util.emptyArray;
    GamerLoginGetDataS2C.prototype.heros = $util.emptyArray;
    GamerLoginGetDataS2C.prototype.fatigue = null;
    GamerLoginGetDataS2C.prototype.lengthRank = 0;
    GamerLoginGetDataS2C.prototype.length = 0;
    GamerLoginGetDataS2C.create = function create(properties) {
        return new GamerLoginGetDataS2C(properties);
    };
    GamerLoginGetDataS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.time != null && message.hasOwnProperty("time"))
            $root.ServerTime.encode(message.time, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.friendReqs != null && message.friendReqs.length)
            for (var i = 0; i < message.friendReqs.length; ++i)
                $root.GamerFriendRequest.encode(message.friendReqs[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.friends != null && message.friends.length)
            for (var i = 0; i < message.friends.length; ++i)
                $root.GamerFriend.encode(message.friends[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.heros != null && message.heros.length)
            for (var i = 0; i < message.heros.length; ++i)
                $root.GamerHero.encode(message.heros[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.fatigue != null && message.hasOwnProperty("fatigue"))
            $root.FatigueInfo.encode(message.fatigue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.lengthRank != null && message.hasOwnProperty("lengthRank"))
            writer.uint32(/* id 1001, wireType 0 =*/8008).int32(message.lengthRank);
        if (message.length != null && message.hasOwnProperty("length"))
            writer.uint32(/* id 1002, wireType 0 =*/8016).int32(message.length);
        return writer;
    };
    GamerLoginGetDataS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerLoginGetDataS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerLoginGetDataS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.time = $root.ServerTime.decode(reader, reader.uint32());
                break;
            case 3:
                if (!(message.friendReqs && message.friendReqs.length))
                    message.friendReqs = [];
                message.friendReqs.push($root.GamerFriendRequest.decode(reader, reader.uint32()));
                break;
            case 4:
                if (!(message.friends && message.friends.length))
                    message.friends = [];
                message.friends.push($root.GamerFriend.decode(reader, reader.uint32()));
                break;
            case 5:
                if (!(message.heros && message.heros.length))
                    message.heros = [];
                message.heros.push($root.GamerHero.decode(reader, reader.uint32()));
                break;
            case 6:
                message.fatigue = $root.FatigueInfo.decode(reader, reader.uint32());
                break;
            case 1001:
                message.lengthRank = reader.int32();
                break;
            case 1002:
                message.length = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerLoginGetDataS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerLoginGetDataS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.time != null && message.hasOwnProperty("time")) {
            var error = $root.ServerTime.verify(message.time);
            if (error)
                return "time." + error;
        }
        if (message.friendReqs != null && message.hasOwnProperty("friendReqs")) {
            if (!Array.isArray(message.friendReqs))
                return "friendReqs: array expected";
            for (var i = 0; i < message.friendReqs.length; ++i) {
                var error = $root.GamerFriendRequest.verify(message.friendReqs[i]);
                if (error)
                    return "friendReqs." + error;
            }
        }
        if (message.friends != null && message.hasOwnProperty("friends")) {
            if (!Array.isArray(message.friends))
                return "friends: array expected";
            for (var i = 0; i < message.friends.length; ++i) {
                var error = $root.GamerFriend.verify(message.friends[i]);
                if (error)
                    return "friends." + error;
            }
        }
        if (message.heros != null && message.hasOwnProperty("heros")) {
            if (!Array.isArray(message.heros))
                return "heros: array expected";
            for (var i = 0; i < message.heros.length; ++i) {
                var error = $root.GamerHero.verify(message.heros[i]);
                if (error)
                    return "heros." + error;
            }
        }
        if (message.fatigue != null && message.hasOwnProperty("fatigue")) {
            var error = $root.FatigueInfo.verify(message.fatigue);
            if (error)
                return "fatigue." + error;
        }
        if (message.lengthRank != null && message.hasOwnProperty("lengthRank"))
            if (!$util.isInteger(message.lengthRank))
                return "lengthRank: integer expected";
        if (message.length != null && message.hasOwnProperty("length"))
            if (!$util.isInteger(message.length))
                return "length: integer expected";
        return null;
    };
    GamerLoginGetDataS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerLoginGetDataS2C)
            return object;
        var message = new $root.GamerLoginGetDataS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.time != null) {
            if (typeof object.time !== "object")
                throw TypeError(".GamerLoginGetDataS2C.time: object expected");
            message.time = $root.ServerTime.fromObject(object.time);
        }
        if (object.friendReqs) {
            if (!Array.isArray(object.friendReqs))
                throw TypeError(".GamerLoginGetDataS2C.friendReqs: array expected");
            message.friendReqs = [];
            for (var i = 0; i < object.friendReqs.length; ++i) {
                if (typeof object.friendReqs[i] !== "object")
                    throw TypeError(".GamerLoginGetDataS2C.friendReqs: object expected");
                message.friendReqs[i] = $root.GamerFriendRequest.fromObject(object.friendReqs[i]);
            }
        }
        if (object.friends) {
            if (!Array.isArray(object.friends))
                throw TypeError(".GamerLoginGetDataS2C.friends: array expected");
            message.friends = [];
            for (var i = 0; i < object.friends.length; ++i) {
                if (typeof object.friends[i] !== "object")
                    throw TypeError(".GamerLoginGetDataS2C.friends: object expected");
                message.friends[i] = $root.GamerFriend.fromObject(object.friends[i]);
            }
        }
        if (object.heros) {
            if (!Array.isArray(object.heros))
                throw TypeError(".GamerLoginGetDataS2C.heros: array expected");
            message.heros = [];
            for (var i = 0; i < object.heros.length; ++i) {
                if (typeof object.heros[i] !== "object")
                    throw TypeError(".GamerLoginGetDataS2C.heros: object expected");
                message.heros[i] = $root.GamerHero.fromObject(object.heros[i]);
            }
        }
        if (object.fatigue != null) {
            if (typeof object.fatigue !== "object")
                throw TypeError(".GamerLoginGetDataS2C.fatigue: object expected");
            message.fatigue = $root.FatigueInfo.fromObject(object.fatigue);
        }
        if (object.lengthRank != null)
            message.lengthRank = object.lengthRank | 0;
        if (object.length != null)
            message.length = object.length | 0;
        return message;
    };
    GamerLoginGetDataS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.friendReqs = [];
            object.friends = [];
            object.heros = [];
        }
        if (options.defaults) {
            object.error = 0;
            object.time = null;
            object.fatigue = null;
            object.lengthRank = 0;
            object.length = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = $root.ServerTime.toObject(message.time, options);
        if (message.friendReqs && message.friendReqs.length) {
            object.friendReqs = [];
            for (var j = 0; j < message.friendReqs.length; ++j)
                object.friendReqs[j] = $root.GamerFriendRequest.toObject(message.friendReqs[j], options);
        }
        if (message.friends && message.friends.length) {
            object.friends = [];
            for (var j = 0; j < message.friends.length; ++j)
                object.friends[j] = $root.GamerFriend.toObject(message.friends[j], options);
        }
        if (message.heros && message.heros.length) {
            object.heros = [];
            for (var j = 0; j < message.heros.length; ++j)
                object.heros[j] = $root.GamerHero.toObject(message.heros[j], options);
        }
        if (message.fatigue != null && message.hasOwnProperty("fatigue"))
            object.fatigue = $root.FatigueInfo.toObject(message.fatigue, options);
        if (message.lengthRank != null && message.hasOwnProperty("lengthRank"))
            object.lengthRank = message.lengthRank;
        if (message.length != null && message.hasOwnProperty("length"))
            object.length = message.length;
        return object;
    };
    GamerLoginGetDataS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerLoginGetDataS2C;
})();
$root.ServerTimeC2S = (function() {
    function ServerTimeC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ServerTimeC2S.prototype.id = 0;
    ServerTimeC2S.create = function create(properties) {
        return new ServerTimeC2S(properties);
    };
    ServerTimeC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    ServerTimeC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ServerTimeC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ServerTimeC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ServerTimeC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ServerTimeC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    ServerTimeC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.ServerTimeC2S)
            return object;
        var message = new $root.ServerTimeC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    ServerTimeC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    ServerTimeC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ServerTimeC2S;
})();
$root.ServerTimeS2C = (function() {
    function ServerTimeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ServerTimeS2C.prototype.error = 0;
    ServerTimeS2C.prototype.time = null;
    ServerTimeS2C.create = function create(properties) {
        return new ServerTimeS2C(properties);
    };
    ServerTimeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.time != null && message.hasOwnProperty("time"))
            $root.ServerTime.encode(message.time, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    ServerTimeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ServerTimeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ServerTimeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.time = $root.ServerTime.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ServerTimeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ServerTimeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.time != null && message.hasOwnProperty("time")) {
            var error = $root.ServerTime.verify(message.time);
            if (error)
                return "time." + error;
        }
        return null;
    };
    ServerTimeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.ServerTimeS2C)
            return object;
        var message = new $root.ServerTimeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.time != null) {
            if (typeof object.time !== "object")
                throw TypeError(".ServerTimeS2C.time: object expected");
            message.time = $root.ServerTime.fromObject(object.time);
        }
        return message;
    };
    ServerTimeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.time = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = $root.ServerTime.toObject(message.time, options);
        return object;
    };
    ServerTimeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ServerTimeS2C;
})();
$root.GamerNotifyLoginOtherS2C = (function() {
    function GamerNotifyLoginOtherS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyLoginOtherS2C.prototype.error = 0;
    GamerNotifyLoginOtherS2C.create = function create(properties) {
        return new GamerNotifyLoginOtherS2C(properties);
    };
    GamerNotifyLoginOtherS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerNotifyLoginOtherS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyLoginOtherS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyLoginOtherS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyLoginOtherS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyLoginOtherS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerNotifyLoginOtherS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyLoginOtherS2C)
            return object;
        var message = new $root.GamerNotifyLoginOtherS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerNotifyLoginOtherS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerNotifyLoginOtherS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyLoginOtherS2C;
})();
$root.GamerSubChatChannelC2S = (function() {
    function GamerSubChatChannelC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSubChatChannelC2S.prototype.id = 0;
    GamerSubChatChannelC2S.prototype.channel = 0;
    GamerSubChatChannelC2S.prototype.open = false;
    GamerSubChatChannelC2S.create = function create(properties) {
        return new GamerSubChatChannelC2S(properties);
    };
    GamerSubChatChannelC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.channel != null && message.hasOwnProperty("channel"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.channel);
        if (message.open != null && message.hasOwnProperty("open"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.open);
        return writer;
    };
    GamerSubChatChannelC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSubChatChannelC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSubChatChannelC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.channel = reader.int32();
                break;
            case 3:
                message.open = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSubChatChannelC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSubChatChannelC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.channel != null && message.hasOwnProperty("channel"))
            if (!$util.isInteger(message.channel))
                return "channel: integer expected";
        if (message.open != null && message.hasOwnProperty("open"))
            if (typeof message.open !== "boolean")
                return "open: boolean expected";
        return null;
    };
    GamerSubChatChannelC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSubChatChannelC2S)
            return object;
        var message = new $root.GamerSubChatChannelC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.channel != null)
            message.channel = object.channel | 0;
        if (object.open != null)
            message.open = Boolean(object.open);
        return message;
    };
    GamerSubChatChannelC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.channel = 0;
            object.open = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.channel != null && message.hasOwnProperty("channel"))
            object.channel = message.channel;
        if (message.open != null && message.hasOwnProperty("open"))
            object.open = message.open;
        return object;
    };
    GamerSubChatChannelC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSubChatChannelC2S;
})();
$root.GamerSubChatChannelS2C = (function() {
    function GamerSubChatChannelS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSubChatChannelS2C.prototype.error = 0;
    GamerSubChatChannelS2C.create = function create(properties) {
        return new GamerSubChatChannelS2C(properties);
    };
    GamerSubChatChannelS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerSubChatChannelS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSubChatChannelS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSubChatChannelS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSubChatChannelS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSubChatChannelS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerSubChatChannelS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSubChatChannelS2C)
            return object;
        var message = new $root.GamerSubChatChannelS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerSubChatChannelS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerSubChatChannelS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSubChatChannelS2C;
})();
$root.GamerChangeNameC2S = (function() {
    function GamerChangeNameC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeNameC2S.prototype.id = 0;
    GamerChangeNameC2S.prototype.newName = "";
    GamerChangeNameC2S.create = function create(properties) {
        return new GamerChangeNameC2S(properties);
    };
    GamerChangeNameC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.newName != null && message.hasOwnProperty("newName"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.newName);
        return writer;
    };
    GamerChangeNameC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeNameC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeNameC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.newName = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeNameC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeNameC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.newName != null && message.hasOwnProperty("newName"))
            if (!$util.isString(message.newName))
                return "newName: string expected";
        return null;
    };
    GamerChangeNameC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeNameC2S)
            return object;
        var message = new $root.GamerChangeNameC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.newName != null)
            message.newName = String(object.newName);
        return message;
    };
    GamerChangeNameC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.newName = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.newName != null && message.hasOwnProperty("newName"))
            object.newName = message.newName;
        return object;
    };
    GamerChangeNameC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeNameC2S;
})();
$root.GamerChangeNameS2C = (function() {
    function GamerChangeNameS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeNameS2C.prototype.error = 0;
    GamerChangeNameS2C.create = function create(properties) {
        return new GamerChangeNameS2C(properties);
    };
    GamerChangeNameS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerChangeNameS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeNameS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeNameS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeNameS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeNameS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerChangeNameS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeNameS2C)
            return object;
        var message = new $root.GamerChangeNameS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerChangeNameS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerChangeNameS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeNameS2C;
})();
$root.GamerChangeAvatarC2S = (function() {
    function GamerChangeAvatarC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeAvatarC2S.prototype.id = 0;
    GamerChangeAvatarC2S.prototype.Avatar = "";
    GamerChangeAvatarC2S.create = function create(properties) {
        return new GamerChangeAvatarC2S(properties);
    };
    GamerChangeAvatarC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.Avatar != null && message.hasOwnProperty("Avatar"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.Avatar);
        return writer;
    };
    GamerChangeAvatarC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeAvatarC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeAvatarC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.Avatar = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeAvatarC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeAvatarC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.Avatar != null && message.hasOwnProperty("Avatar"))
            if (!$util.isString(message.Avatar))
                return "Avatar: string expected";
        return null;
    };
    GamerChangeAvatarC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeAvatarC2S)
            return object;
        var message = new $root.GamerChangeAvatarC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.Avatar != null)
            message.Avatar = String(object.Avatar);
        return message;
    };
    GamerChangeAvatarC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.Avatar = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.Avatar != null && message.hasOwnProperty("Avatar"))
            object.Avatar = message.Avatar;
        return object;
    };
    GamerChangeAvatarC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeAvatarC2S;
})();
$root.GamerChangeAvatarS2C = (function() {
    function GamerChangeAvatarS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeAvatarS2C.prototype.error = 0;
    GamerChangeAvatarS2C.prototype.Avatar = "";
    GamerChangeAvatarS2C.create = function create(properties) {
        return new GamerChangeAvatarS2C(properties);
    };
    GamerChangeAvatarS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.Avatar != null && message.hasOwnProperty("Avatar"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.Avatar);
        return writer;
    };
    GamerChangeAvatarS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeAvatarS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeAvatarS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.Avatar = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeAvatarS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeAvatarS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.Avatar != null && message.hasOwnProperty("Avatar"))
            if (!$util.isString(message.Avatar))
                return "Avatar: string expected";
        return null;
    };
    GamerChangeAvatarS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeAvatarS2C)
            return object;
        var message = new $root.GamerChangeAvatarS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.Avatar != null)
            message.Avatar = String(object.Avatar);
        return message;
    };
    GamerChangeAvatarS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.Avatar = "";
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.Avatar != null && message.hasOwnProperty("Avatar"))
            object.Avatar = message.Avatar;
        return object;
    };
    GamerChangeAvatarS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeAvatarS2C;
})();
$root.GamerNotifyExpLevelS2C = (function() {
    function GamerNotifyExpLevelS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyExpLevelS2C.prototype.error = 0;
    GamerNotifyExpLevelS2C.prototype.exp = 0;
    GamerNotifyExpLevelS2C.prototype.level = 0;
    GamerNotifyExpLevelS2C.create = function create(properties) {
        return new GamerNotifyExpLevelS2C(properties);
    };
    GamerNotifyExpLevelS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.exp != null && message.hasOwnProperty("exp"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.exp);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.level);
        return writer;
    };
    GamerNotifyExpLevelS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyExpLevelS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyExpLevelS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.exp = reader.int32();
                break;
            case 3:
                message.level = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyExpLevelS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyExpLevelS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.exp != null && message.hasOwnProperty("exp"))
            if (!$util.isInteger(message.exp))
                return "exp: integer expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        return null;
    };
    GamerNotifyExpLevelS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyExpLevelS2C)
            return object;
        var message = new $root.GamerNotifyExpLevelS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.exp != null)
            message.exp = object.exp | 0;
        if (object.level != null)
            message.level = object.level | 0;
        return message;
    };
    GamerNotifyExpLevelS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.exp = 0;
            object.level = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.exp != null && message.hasOwnProperty("exp"))
            object.exp = message.exp;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        return object;
    };
    GamerNotifyExpLevelS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyExpLevelS2C;
})();
$root.GamerGetBackpackC2S = (function() {
    function GamerGetBackpackC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetBackpackC2S.prototype.id = 0;
    GamerGetBackpackC2S.create = function create(properties) {
        return new GamerGetBackpackC2S(properties);
    };
    GamerGetBackpackC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerGetBackpackC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetBackpackC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetBackpackC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetBackpackC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetBackpackC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerGetBackpackC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetBackpackC2S)
            return object;
        var message = new $root.GamerGetBackpackC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerGetBackpackC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerGetBackpackC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetBackpackC2S;
})();
$root.GamerGetBackpackS2C = (function() {
    function GamerGetBackpackS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetBackpackS2C.prototype.error = 0;
    GamerGetBackpackS2C.prototype.items = $util.emptyArray;
    GamerGetBackpackS2C.create = function create(properties) {
        return new GamerGetBackpackS2C(properties);
    };
    GamerGetBackpackS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerGetBackpackS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetBackpackS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetBackpackS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetBackpackS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetBackpackS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    GamerGetBackpackS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetBackpackS2C)
            return object;
        var message = new $root.GamerGetBackpackS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerGetBackpackS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerGetBackpackS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    GamerGetBackpackS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    GamerGetBackpackS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetBackpackS2C;
})();
$root.GamerNotifyItemChangeS2C = (function() {
    function GamerNotifyItemChangeS2C(properties) {
        this.itemsChange = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyItemChangeS2C.prototype.error = 0;
    GamerNotifyItemChangeS2C.prototype.itemsChange = $util.emptyArray;
    GamerNotifyItemChangeS2C.create = function create(properties) {
        return new GamerNotifyItemChangeS2C(properties);
    };
    GamerNotifyItemChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.itemsChange != null && message.itemsChange.length)
            for (var i = 0; i < message.itemsChange.length; ++i)
                $root.GameItem.encode(message.itemsChange[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyItemChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyItemChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyItemChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.itemsChange && message.itemsChange.length))
                    message.itemsChange = [];
                message.itemsChange.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyItemChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyItemChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.itemsChange != null && message.hasOwnProperty("itemsChange")) {
            if (!Array.isArray(message.itemsChange))
                return "itemsChange: array expected";
            for (var i = 0; i < message.itemsChange.length; ++i) {
                var error = $root.GameItem.verify(message.itemsChange[i]);
                if (error)
                    return "itemsChange." + error;
            }
        }
        return null;
    };
    GamerNotifyItemChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyItemChangeS2C)
            return object;
        var message = new $root.GamerNotifyItemChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.itemsChange) {
            if (!Array.isArray(object.itemsChange))
                throw TypeError(".GamerNotifyItemChangeS2C.itemsChange: array expected");
            message.itemsChange = [];
            for (var i = 0; i < object.itemsChange.length; ++i) {
                if (typeof object.itemsChange[i] !== "object")
                    throw TypeError(".GamerNotifyItemChangeS2C.itemsChange: object expected");
                message.itemsChange[i] = $root.GameItem.fromObject(object.itemsChange[i]);
            }
        }
        return message;
    };
    GamerNotifyItemChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.itemsChange = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.itemsChange && message.itemsChange.length) {
            object.itemsChange = [];
            for (var j = 0; j < message.itemsChange.length; ++j)
                object.itemsChange[j] = $root.GameItem.toObject(message.itemsChange[j], options);
        }
        return object;
    };
    GamerNotifyItemChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyItemChangeS2C;
})();
$root.GamerSellItemC2S = (function() {
    function GamerSellItemC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSellItemC2S.prototype.id = 0;
    GamerSellItemC2S.prototype.itemId = 0;
    GamerSellItemC2S.prototype.num = 0;
    GamerSellItemC2S.prototype.uid = 0;
    GamerSellItemC2S.create = function create(properties) {
        return new GamerSellItemC2S(properties);
    };
    GamerSellItemC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.itemId);
        if (message.num != null && message.hasOwnProperty("num"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.num);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.uid);
        return writer;
    };
    GamerSellItemC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSellItemC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSellItemC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.itemId = reader.int32();
                break;
            case 3:
                message.num = reader.int32();
                break;
            case 4:
                message.uid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSellItemC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSellItemC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            if (!$util.isInteger(message.itemId))
                return "itemId: integer expected";
        if (message.num != null && message.hasOwnProperty("num"))
            if (!$util.isInteger(message.num))
                return "num: integer expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid))
                return "uid: integer expected";
        return null;
    };
    GamerSellItemC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSellItemC2S)
            return object;
        var message = new $root.GamerSellItemC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.itemId != null)
            message.itemId = object.itemId | 0;
        if (object.num != null)
            message.num = object.num | 0;
        if (object.uid != null)
            message.uid = object.uid | 0;
        return message;
    };
    GamerSellItemC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.itemId = 0;
            object.num = 0;
            object.uid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        if (message.num != null && message.hasOwnProperty("num"))
            object.num = message.num;
        if (message.uid != null && message.hasOwnProperty("uid"))
            object.uid = message.uid;
        return object;
    };
    GamerSellItemC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSellItemC2S;
})();
$root.GamerSellItemS2C = (function() {
    function GamerSellItemS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSellItemS2C.prototype.error = 0;
    GamerSellItemS2C.prototype.items = $util.emptyArray;
    GamerSellItemS2C.create = function create(properties) {
        return new GamerSellItemS2C(properties);
    };
    GamerSellItemS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerSellItemS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSellItemS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSellItemS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSellItemS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSellItemS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    GamerSellItemS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSellItemS2C)
            return object;
        var message = new $root.GamerSellItemS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerSellItemS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerSellItemS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    GamerSellItemS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    GamerSellItemS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSellItemS2C;
})();
$root.GamerUseItemC2S = (function() {
    function GamerUseItemC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUseItemC2S.prototype.id = 0;
    GamerUseItemC2S.prototype.itemId = 0;
    GamerUseItemC2S.prototype.num = 0;
    GamerUseItemC2S.prototype.uid = 0;
    GamerUseItemC2S.create = function create(properties) {
        return new GamerUseItemC2S(properties);
    };
    GamerUseItemC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.itemId);
        if (message.num != null && message.hasOwnProperty("num"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.num);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.uid);
        return writer;
    };
    GamerUseItemC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUseItemC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUseItemC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.itemId = reader.int32();
                break;
            case 3:
                message.num = reader.int32();
                break;
            case 4:
                message.uid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUseItemC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUseItemC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            if (!$util.isInteger(message.itemId))
                return "itemId: integer expected";
        if (message.num != null && message.hasOwnProperty("num"))
            if (!$util.isInteger(message.num))
                return "num: integer expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid))
                return "uid: integer expected";
        return null;
    };
    GamerUseItemC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUseItemC2S)
            return object;
        var message = new $root.GamerUseItemC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.itemId != null)
            message.itemId = object.itemId | 0;
        if (object.num != null)
            message.num = object.num | 0;
        if (object.uid != null)
            message.uid = object.uid | 0;
        return message;
    };
    GamerUseItemC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.itemId = 0;
            object.num = 0;
            object.uid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        if (message.num != null && message.hasOwnProperty("num"))
            object.num = message.num;
        if (message.uid != null && message.hasOwnProperty("uid"))
            object.uid = message.uid;
        return object;
    };
    GamerUseItemC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUseItemC2S;
})();
$root.GamerUseItemS2C = (function() {
    function GamerUseItemS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUseItemS2C.prototype.error = 0;
    GamerUseItemS2C.prototype.useItemId = 0;
    GamerUseItemS2C.prototype.items = $util.emptyArray;
    GamerUseItemS2C.create = function create(properties) {
        return new GamerUseItemS2C(properties);
    };
    GamerUseItemS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.useItemId != null && message.hasOwnProperty("useItemId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.useItemId);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerUseItemS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUseItemS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUseItemS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.useItemId = reader.int32();
                break;
            case 3:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUseItemS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUseItemS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.useItemId != null && message.hasOwnProperty("useItemId"))
            if (!$util.isInteger(message.useItemId))
                return "useItemId: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    GamerUseItemS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUseItemS2C)
            return object;
        var message = new $root.GamerUseItemS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.useItemId != null)
            message.useItemId = object.useItemId | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerUseItemS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerUseItemS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    GamerUseItemS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults) {
            object.error = 0;
            object.useItemId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.useItemId != null && message.hasOwnProperty("useItemId"))
            object.useItemId = message.useItemId;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    GamerUseItemS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUseItemS2C;
})();
$root.GamerFriendChatC2S = (function() {
    function GamerFriendChatC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerFriendChatC2S.prototype.id = 0;
    GamerFriendChatC2S.prototype.toId = 0;
    GamerFriendChatC2S.prototype.msg = "";
    GamerFriendChatC2S.create = function create(properties) {
        return new GamerFriendChatC2S(properties);
    };
    GamerFriendChatC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.toId != null && message.hasOwnProperty("toId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.toId);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerFriendChatC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerFriendChatC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerFriendChatC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.toId = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerFriendChatC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerFriendChatC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.toId != null && message.hasOwnProperty("toId"))
            if (!$util.isInteger(message.toId))
                return "toId: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerFriendChatC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerFriendChatC2S)
            return object;
        var message = new $root.GamerFriendChatC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.toId != null)
            message.toId = object.toId | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerFriendChatC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.toId = 0;
            object.msg = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.toId != null && message.hasOwnProperty("toId"))
            object.toId = message.toId;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerFriendChatC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerFriendChatC2S;
})();
$root.GamerFriendChatS2C = (function() {
    function GamerFriendChatS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerFriendChatS2C.prototype.error = 0;
    GamerFriendChatS2C.create = function create(properties) {
        return new GamerFriendChatS2C(properties);
    };
    GamerFriendChatS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerFriendChatS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerFriendChatS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerFriendChatS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerFriendChatS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerFriendChatS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerFriendChatS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerFriendChatS2C)
            return object;
        var message = new $root.GamerFriendChatS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerFriendChatS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerFriendChatS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerFriendChatS2C;
})();
$root.GamerWorldChatC2S = (function() {
    function GamerWorldChatC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerWorldChatC2S.prototype.id = 0;
    GamerWorldChatC2S.prototype.server = 0;
    GamerWorldChatC2S.prototype.msg = "";
    GamerWorldChatC2S.create = function create(properties) {
        return new GamerWorldChatC2S(properties);
    };
    GamerWorldChatC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.server != null && message.hasOwnProperty("server"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.server);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerWorldChatC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerWorldChatC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerWorldChatC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.server = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerWorldChatC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerWorldChatC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.server != null && message.hasOwnProperty("server"))
            if (!$util.isInteger(message.server))
                return "server: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerWorldChatC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerWorldChatC2S)
            return object;
        var message = new $root.GamerWorldChatC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.server != null)
            message.server = object.server | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerWorldChatC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.server = 0;
            object.msg = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.server != null && message.hasOwnProperty("server"))
            object.server = message.server;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerWorldChatC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerWorldChatC2S;
})();
$root.GamerWorldChatS2C = (function() {
    function GamerWorldChatS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerWorldChatS2C.prototype.error = 0;
    GamerWorldChatS2C.create = function create(properties) {
        return new GamerWorldChatS2C(properties);
    };
    GamerWorldChatS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerWorldChatS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerWorldChatS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerWorldChatS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerWorldChatS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerWorldChatS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerWorldChatS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerWorldChatS2C)
            return object;
        var message = new $root.GamerWorldChatS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerWorldChatS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerWorldChatS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerWorldChatS2C;
})();
$root.GamerTestChatC2S = (function() {
    function GamerTestChatC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerTestChatC2S.prototype.id = 0;
    GamerTestChatC2S.prototype.toId = 0;
    GamerTestChatC2S.prototype.msg = "";
    GamerTestChatC2S.create = function create(properties) {
        return new GamerTestChatC2S(properties);
    };
    GamerTestChatC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.toId != null && message.hasOwnProperty("toId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.toId);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerTestChatC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerTestChatC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerTestChatC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.toId = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerTestChatC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerTestChatC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.toId != null && message.hasOwnProperty("toId"))
            if (!$util.isInteger(message.toId))
                return "toId: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerTestChatC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerTestChatC2S)
            return object;
        var message = new $root.GamerTestChatC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.toId != null)
            message.toId = object.toId | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerTestChatC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.toId = 0;
            object.msg = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.toId != null && message.hasOwnProperty("toId"))
            object.toId = message.toId;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerTestChatC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerTestChatC2S;
})();
$root.GamerTestChatS2C = (function() {
    function GamerTestChatS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerTestChatS2C.prototype.error = 0;
    GamerTestChatS2C.prototype.id = 0;
    GamerTestChatS2C.create = function create(properties) {
        return new GamerTestChatS2C(properties);
    };
    GamerTestChatS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
        return writer;
    };
    GamerTestChatS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerTestChatS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerTestChatS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerTestChatS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerTestChatS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerTestChatS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerTestChatS2C)
            return object;
        var message = new $root.GamerTestChatS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerTestChatS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.id = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerTestChatS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerTestChatS2C;
})();
$root.GamerClubRequestC2S = (function() {
    function GamerClubRequestC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerClubRequestC2S.prototype.id = 0;
    GamerClubRequestC2S.prototype.clubId = 0;
    GamerClubRequestC2S.prototype.msg = "";
    GamerClubRequestC2S.create = function create(properties) {
        return new GamerClubRequestC2S(properties);
    };
    GamerClubRequestC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.clubId != null && message.hasOwnProperty("clubId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.clubId);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerClubRequestC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerClubRequestC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerClubRequestC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.clubId = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerClubRequestC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerClubRequestC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.clubId != null && message.hasOwnProperty("clubId"))
            if (!$util.isInteger(message.clubId))
                return "clubId: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerClubRequestC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerClubRequestC2S)
            return object;
        var message = new $root.GamerClubRequestC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.clubId != null)
            message.clubId = object.clubId | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerClubRequestC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.clubId = 0;
            object.msg = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.clubId != null && message.hasOwnProperty("clubId"))
            object.clubId = message.clubId;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerClubRequestC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerClubRequestC2S;
})();
$root.GamerClubRequestS2C = (function() {
    function GamerClubRequestS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerClubRequestS2C.prototype.error = 0;
    GamerClubRequestS2C.prototype.id = 0;
    GamerClubRequestS2C.prototype.ok = false;
    GamerClubRequestS2C.create = function create(properties) {
        return new GamerClubRequestS2C(properties);
    };
    GamerClubRequestS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
        if (message.ok != null && message.hasOwnProperty("ok"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.ok);
        return writer;
    };
    GamerClubRequestS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerClubRequestS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerClubRequestS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.id = reader.int32();
                break;
            case 3:
                message.ok = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerClubRequestS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerClubRequestS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.ok != null && message.hasOwnProperty("ok"))
            if (typeof message.ok !== "boolean")
                return "ok: boolean expected";
        return null;
    };
    GamerClubRequestS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerClubRequestS2C)
            return object;
        var message = new $root.GamerClubRequestS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.id != null)
            message.id = object.id | 0;
        if (object.ok != null)
            message.ok = Boolean(object.ok);
        return message;
    };
    GamerClubRequestS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.id = 0;
            object.ok = false;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.ok != null && message.hasOwnProperty("ok"))
            object.ok = message.ok;
        return object;
    };
    GamerClubRequestS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerClubRequestS2C;
})();
$root.GamerNotifyNewChatS2C = (function() {
    function GamerNotifyNewChatS2C(properties) {
        this.chats = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewChatS2C.prototype.error = 0;
    GamerNotifyNewChatS2C.prototype.chats = $util.emptyArray;
    GamerNotifyNewChatS2C.create = function create(properties) {
        return new GamerNotifyNewChatS2C(properties);
    };
    GamerNotifyNewChatS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.chats != null && message.chats.length)
            for (var i = 0; i < message.chats.length; ++i)
                $root.ChatData.encode(message.chats[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyNewChatS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewChatS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewChatS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.chats && message.chats.length))
                    message.chats = [];
                message.chats.push($root.ChatData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewChatS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewChatS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.chats != null && message.hasOwnProperty("chats")) {
            if (!Array.isArray(message.chats))
                return "chats: array expected";
            for (var i = 0; i < message.chats.length; ++i) {
                var error = $root.ChatData.verify(message.chats[i]);
                if (error)
                    return "chats." + error;
            }
        }
        return null;
    };
    GamerNotifyNewChatS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewChatS2C)
            return object;
        var message = new $root.GamerNotifyNewChatS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.chats) {
            if (!Array.isArray(object.chats))
                throw TypeError(".GamerNotifyNewChatS2C.chats: array expected");
            message.chats = [];
            for (var i = 0; i < object.chats.length; ++i) {
                if (typeof object.chats[i] !== "object")
                    throw TypeError(".GamerNotifyNewChatS2C.chats: object expected");
                message.chats[i] = $root.ChatData.fromObject(object.chats[i]);
            }
        }
        return message;
    };
    GamerNotifyNewChatS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.chats = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.chats && message.chats.length) {
            object.chats = [];
            for (var j = 0; j < message.chats.length; ++j)
                object.chats[j] = $root.ChatData.toObject(message.chats[j], options);
        }
        return object;
    };
    GamerNotifyNewChatS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewChatS2C;
})();
$root.GamerNewFriendReqC2S = (function() {
    function GamerNewFriendReqC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNewFriendReqC2S.prototype.id = 0;
    GamerNewFriendReqC2S.prototype.oid = 0;
    GamerNewFriendReqC2S.prototype.msg = "";
    GamerNewFriendReqC2S.create = function create(properties) {
        return new GamerNewFriendReqC2S(properties);
    };
    GamerNewFriendReqC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.oid != null && message.hasOwnProperty("oid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.oid);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerNewFriendReqC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNewFriendReqC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNewFriendReqC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.oid = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNewFriendReqC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNewFriendReqC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.oid != null && message.hasOwnProperty("oid"))
            if (!$util.isInteger(message.oid))
                return "oid: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerNewFriendReqC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNewFriendReqC2S)
            return object;
        var message = new $root.GamerNewFriendReqC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.oid != null)
            message.oid = object.oid | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerNewFriendReqC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.oid = 0;
            object.msg = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.oid != null && message.hasOwnProperty("oid"))
            object.oid = message.oid;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerNewFriendReqC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNewFriendReqC2S;
})();
$root.GamerNewFriendReqS2C = (function() {
    function GamerNewFriendReqS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNewFriendReqS2C.prototype.error = 0;
    GamerNewFriendReqS2C.create = function create(properties) {
        return new GamerNewFriendReqS2C(properties);
    };
    GamerNewFriendReqS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerNewFriendReqS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNewFriendReqS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNewFriendReqS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNewFriendReqS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNewFriendReqS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerNewFriendReqS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNewFriendReqS2C)
            return object;
        var message = new $root.GamerNewFriendReqS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerNewFriendReqS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerNewFriendReqS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNewFriendReqS2C;
})();
$root.GamerDelFriendC2S = (function() {
    function GamerDelFriendC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerDelFriendC2S.prototype.id = 0;
    GamerDelFriendC2S.prototype.oid = 0;
    GamerDelFriendC2S.create = function create(properties) {
        return new GamerDelFriendC2S(properties);
    };
    GamerDelFriendC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.oid != null && message.hasOwnProperty("oid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.oid);
        return writer;
    };
    GamerDelFriendC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerDelFriendC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerDelFriendC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.oid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerDelFriendC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerDelFriendC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.oid != null && message.hasOwnProperty("oid"))
            if (!$util.isInteger(message.oid))
                return "oid: integer expected";
        return null;
    };
    GamerDelFriendC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerDelFriendC2S)
            return object;
        var message = new $root.GamerDelFriendC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.oid != null)
            message.oid = object.oid | 0;
        return message;
    };
    GamerDelFriendC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.oid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.oid != null && message.hasOwnProperty("oid"))
            object.oid = message.oid;
        return object;
    };
    GamerDelFriendC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerDelFriendC2S;
})();
$root.GamerDelFriendS2C = (function() {
    function GamerDelFriendS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerDelFriendS2C.prototype.error = 0;
    GamerDelFriendS2C.create = function create(properties) {
        return new GamerDelFriendS2C(properties);
    };
    GamerDelFriendS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerDelFriendS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerDelFriendS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerDelFriendS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerDelFriendS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerDelFriendS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerDelFriendS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerDelFriendS2C)
            return object;
        var message = new $root.GamerDelFriendS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerDelFriendS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerDelFriendS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerDelFriendS2C;
})();
$root.GamerNotifyNewFriendReqS2C = (function() {
    function GamerNotifyNewFriendReqS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewFriendReqS2C.prototype.error = 0;
    GamerNotifyNewFriendReqS2C.prototype.request = null;
    GamerNotifyNewFriendReqS2C.create = function create(properties) {
        return new GamerNotifyNewFriendReqS2C(properties);
    };
    GamerNotifyNewFriendReqS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.request != null && message.hasOwnProperty("request"))
            $root.GamerFriendRequest.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyNewFriendReqS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewFriendReqS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewFriendReqS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.request = $root.GamerFriendRequest.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewFriendReqS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewFriendReqS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.request != null && message.hasOwnProperty("request")) {
            var error = $root.GamerFriendRequest.verify(message.request);
            if (error)
                return "request." + error;
        }
        return null;
    };
    GamerNotifyNewFriendReqS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewFriendReqS2C)
            return object;
        var message = new $root.GamerNotifyNewFriendReqS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.request != null) {
            if (typeof object.request !== "object")
                throw TypeError(".GamerNotifyNewFriendReqS2C.request: object expected");
            message.request = $root.GamerFriendRequest.fromObject(object.request);
        }
        return message;
    };
    GamerNotifyNewFriendReqS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.request = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.request != null && message.hasOwnProperty("request"))
            object.request = $root.GamerFriendRequest.toObject(message.request, options);
        return object;
    };
    GamerNotifyNewFriendReqS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewFriendReqS2C;
})();
$root.GamerProcessFriendReqC2S = (function() {
    function GamerProcessFriendReqC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerProcessFriendReqC2S.prototype.id = 0;
    GamerProcessFriendReqC2S.prototype.oid = 0;
    GamerProcessFriendReqC2S.prototype.result = false;
    GamerProcessFriendReqC2S.create = function create(properties) {
        return new GamerProcessFriendReqC2S(properties);
    };
    GamerProcessFriendReqC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.oid != null && message.hasOwnProperty("oid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.oid);
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.result);
        return writer;
    };
    GamerProcessFriendReqC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerProcessFriendReqC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerProcessFriendReqC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.oid = reader.int32();
                break;
            case 3:
                message.result = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerProcessFriendReqC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerProcessFriendReqC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.oid != null && message.hasOwnProperty("oid"))
            if (!$util.isInteger(message.oid))
                return "oid: integer expected";
        if (message.result != null && message.hasOwnProperty("result"))
            if (typeof message.result !== "boolean")
                return "result: boolean expected";
        return null;
    };
    GamerProcessFriendReqC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerProcessFriendReqC2S)
            return object;
        var message = new $root.GamerProcessFriendReqC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.oid != null)
            message.oid = object.oid | 0;
        if (object.result != null)
            message.result = Boolean(object.result);
        return message;
    };
    GamerProcessFriendReqC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.oid = 0;
            object.result = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.oid != null && message.hasOwnProperty("oid"))
            object.oid = message.oid;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };
    GamerProcessFriendReqC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerProcessFriendReqC2S;
})();
$root.GamerProcessFriendReqS2C = (function() {
    function GamerProcessFriendReqS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerProcessFriendReqS2C.prototype.error = 0;
    GamerProcessFriendReqS2C.create = function create(properties) {
        return new GamerProcessFriendReqS2C(properties);
    };
    GamerProcessFriendReqS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerProcessFriendReqS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerProcessFriendReqS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerProcessFriendReqS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerProcessFriendReqS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerProcessFriendReqS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerProcessFriendReqS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerProcessFriendReqS2C)
            return object;
        var message = new $root.GamerProcessFriendReqS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerProcessFriendReqS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerProcessFriendReqS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerProcessFriendReqS2C;
})();
$root.GamerNotifyNewFriendS2C = (function() {
    function GamerNotifyNewFriendS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewFriendS2C.prototype.error = 0;
    GamerNotifyNewFriendS2C.prototype.friend = null;
    GamerNotifyNewFriendS2C.create = function create(properties) {
        return new GamerNotifyNewFriendS2C(properties);
    };
    GamerNotifyNewFriendS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.friend != null && message.hasOwnProperty("friend"))
            $root.GamerFriend.encode(message.friend, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyNewFriendS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewFriendS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewFriendS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.friend = $root.GamerFriend.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewFriendS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewFriendS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.friend != null && message.hasOwnProperty("friend")) {
            var error = $root.GamerFriend.verify(message.friend);
            if (error)
                return "friend." + error;
        }
        return null;
    };
    GamerNotifyNewFriendS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewFriendS2C)
            return object;
        var message = new $root.GamerNotifyNewFriendS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.friend != null) {
            if (typeof object.friend !== "object")
                throw TypeError(".GamerNotifyNewFriendS2C.friend: object expected");
            message.friend = $root.GamerFriend.fromObject(object.friend);
        }
        return message;
    };
    GamerNotifyNewFriendS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.friend = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.friend != null && message.hasOwnProperty("friend"))
            object.friend = $root.GamerFriend.toObject(message.friend, options);
        return object;
    };
    GamerNotifyNewFriendS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewFriendS2C;
})();
$root.GamerNotifyDelFriendS2C = (function() {
    function GamerNotifyDelFriendS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyDelFriendS2C.prototype.error = 0;
    GamerNotifyDelFriendS2C.prototype.oid = 0;
    GamerNotifyDelFriendS2C.create = function create(properties) {
        return new GamerNotifyDelFriendS2C(properties);
    };
    GamerNotifyDelFriendS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.oid != null && message.hasOwnProperty("oid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.oid);
        return writer;
    };
    GamerNotifyDelFriendS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyDelFriendS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyDelFriendS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.oid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyDelFriendS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyDelFriendS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.oid != null && message.hasOwnProperty("oid"))
            if (!$util.isInteger(message.oid))
                return "oid: integer expected";
        return null;
    };
    GamerNotifyDelFriendS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyDelFriendS2C)
            return object;
        var message = new $root.GamerNotifyDelFriendS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.oid != null)
            message.oid = object.oid | 0;
        return message;
    };
    GamerNotifyDelFriendS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.oid = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.oid != null && message.hasOwnProperty("oid"))
            object.oid = message.oid;
        return object;
    };
    GamerNotifyDelFriendS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyDelFriendS2C;
})();
$root.GamerNotifyNoticeS2C = (function() {
    function GamerNotifyNoticeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNoticeS2C.prototype.error = 0;
    GamerNotifyNoticeS2C.prototype.type = 0;
    GamerNotifyNoticeS2C.prototype.msg = "";
    GamerNotifyNoticeS2C.create = function create(properties) {
        return new GamerNotifyNoticeS2C(properties);
    };
    GamerNotifyNoticeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerNotifyNoticeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNoticeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNoticeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNoticeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNoticeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
                break;
            }
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerNotifyNoticeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNoticeS2C)
            return object;
        var message = new $root.GamerNotifyNoticeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        switch (object.type) {
        case "NoticeType_horseLamp":
        case 0:
            message.type = 0;
            break;
        }
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerNotifyNoticeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.type = options.enums === String ? "NoticeType_horseLamp" : 0;
            object.msg = "";
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.NoticeType[message.type] : message.type;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerNotifyNoticeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNoticeS2C;
})();
$root.GamerNotifyMailS2C = (function() {
    function GamerNotifyMailS2C(properties) {
        this.mails = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyMailS2C.prototype.error = 0;
    GamerNotifyMailS2C.prototype.leftMailNum = 0;
    GamerNotifyMailS2C.prototype.mails = $util.emptyArray;
    GamerNotifyMailS2C.create = function create(properties) {
        return new GamerNotifyMailS2C(properties);
    };
    GamerNotifyMailS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.leftMailNum != null && message.hasOwnProperty("leftMailNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.leftMailNum);
        if (message.mails != null && message.mails.length)
            for (var i = 0; i < message.mails.length; ++i)
                $root.Mail.encode(message.mails[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerNotifyMailS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyMailS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyMailS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.leftMailNum = reader.int32();
                break;
            case 3:
                if (!(message.mails && message.mails.length))
                    message.mails = [];
                message.mails.push($root.Mail.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyMailS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyMailS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.leftMailNum != null && message.hasOwnProperty("leftMailNum"))
            if (!$util.isInteger(message.leftMailNum))
                return "leftMailNum: integer expected";
        if (message.mails != null && message.hasOwnProperty("mails")) {
            if (!Array.isArray(message.mails))
                return "mails: array expected";
            for (var i = 0; i < message.mails.length; ++i) {
                var error = $root.Mail.verify(message.mails[i]);
                if (error)
                    return "mails." + error;
            }
        }
        return null;
    };
    GamerNotifyMailS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyMailS2C)
            return object;
        var message = new $root.GamerNotifyMailS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.leftMailNum != null)
            message.leftMailNum = object.leftMailNum | 0;
        if (object.mails) {
            if (!Array.isArray(object.mails))
                throw TypeError(".GamerNotifyMailS2C.mails: array expected");
            message.mails = [];
            for (var i = 0; i < object.mails.length; ++i) {
                if (typeof object.mails[i] !== "object")
                    throw TypeError(".GamerNotifyMailS2C.mails: object expected");
                message.mails[i] = $root.Mail.fromObject(object.mails[i]);
            }
        }
        return message;
    };
    GamerNotifyMailS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.mails = [];
        if (options.defaults) {
            object.error = 0;
            object.leftMailNum = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.leftMailNum != null && message.hasOwnProperty("leftMailNum"))
            object.leftMailNum = message.leftMailNum;
        if (message.mails && message.mails.length) {
            object.mails = [];
            for (var j = 0; j < message.mails.length; ++j)
                object.mails[j] = $root.Mail.toObject(message.mails[j], options);
        }
        return object;
    };
    GamerNotifyMailS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyMailS2C;
})();
$root.GamerNotifyNewMailS2C = (function() {
    function GamerNotifyNewMailS2C(properties) {
        this.mails = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewMailS2C.prototype.error = 0;
    GamerNotifyNewMailS2C.prototype.mails = $util.emptyArray;
    GamerNotifyNewMailS2C.create = function create(properties) {
        return new GamerNotifyNewMailS2C(properties);
    };
    GamerNotifyNewMailS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.mails != null && message.mails.length)
            for (var i = 0; i < message.mails.length; ++i)
                $root.Mail.encode(message.mails[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyNewMailS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewMailS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewMailS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.mails && message.mails.length))
                    message.mails = [];
                message.mails.push($root.Mail.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewMailS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewMailS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.mails != null && message.hasOwnProperty("mails")) {
            if (!Array.isArray(message.mails))
                return "mails: array expected";
            for (var i = 0; i < message.mails.length; ++i) {
                var error = $root.Mail.verify(message.mails[i]);
                if (error)
                    return "mails." + error;
            }
        }
        return null;
    };
    GamerNotifyNewMailS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewMailS2C)
            return object;
        var message = new $root.GamerNotifyNewMailS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.mails) {
            if (!Array.isArray(object.mails))
                throw TypeError(".GamerNotifyNewMailS2C.mails: array expected");
            message.mails = [];
            for (var i = 0; i < object.mails.length; ++i) {
                if (typeof object.mails[i] !== "object")
                    throw TypeError(".GamerNotifyNewMailS2C.mails: object expected");
                message.mails[i] = $root.Mail.fromObject(object.mails[i]);
            }
        }
        return message;
    };
    GamerNotifyNewMailS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.mails = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.mails && message.mails.length) {
            object.mails = [];
            for (var j = 0; j < message.mails.length; ++j)
                object.mails[j] = $root.Mail.toObject(message.mails[j], options);
        }
        return object;
    };
    GamerNotifyNewMailS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewMailS2C;
})();
$root.GamerGetMailC2S = (function() {
    function GamerGetMailC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetMailC2S.prototype.id = 0;
    GamerGetMailC2S.create = function create(properties) {
        return new GamerGetMailC2S(properties);
    };
    GamerGetMailC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerGetMailC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetMailC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetMailC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetMailC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetMailC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerGetMailC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetMailC2S)
            return object;
        var message = new $root.GamerGetMailC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerGetMailC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerGetMailC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetMailC2S;
})();
$root.GamerGetMailS2C = (function() {
    function GamerGetMailS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetMailS2C.prototype.error = 0;
    GamerGetMailS2C.create = function create(properties) {
        return new GamerGetMailS2C(properties);
    };
    GamerGetMailS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerGetMailS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetMailS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetMailS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetMailS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetMailS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerGetMailS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetMailS2C)
            return object;
        var message = new $root.GamerGetMailS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerGetMailS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerGetMailS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetMailS2C;
})();
$root.GamerDelMailC2S = (function() {
    function GamerDelMailC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerDelMailC2S.prototype.id = 0;
    GamerDelMailC2S.prototype.mailId = "";
    GamerDelMailC2S.create = function create(properties) {
        return new GamerDelMailC2S(properties);
    };
    GamerDelMailC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.mailId);
        return writer;
    };
    GamerDelMailC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerDelMailC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerDelMailC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.mailId = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerDelMailC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerDelMailC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            if (!$util.isString(message.mailId))
                return "mailId: string expected";
        return null;
    };
    GamerDelMailC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerDelMailC2S)
            return object;
        var message = new $root.GamerDelMailC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.mailId != null)
            message.mailId = String(object.mailId);
        return message;
    };
    GamerDelMailC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.mailId = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            object.mailId = message.mailId;
        return object;
    };
    GamerDelMailC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerDelMailC2S;
})();
$root.GamerDelMailS2C = (function() {
    function GamerDelMailS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerDelMailS2C.prototype.error = 0;
    GamerDelMailS2C.create = function create(properties) {
        return new GamerDelMailS2C(properties);
    };
    GamerDelMailS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerDelMailS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerDelMailS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerDelMailS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerDelMailS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerDelMailS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerDelMailS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerDelMailS2C)
            return object;
        var message = new $root.GamerDelMailS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerDelMailS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerDelMailS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerDelMailS2C;
})();
$root.GamerDelHaveReadMailC2S = (function() {
    function GamerDelHaveReadMailC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerDelHaveReadMailC2S.prototype.id = 0;
    GamerDelHaveReadMailC2S.create = function create(properties) {
        return new GamerDelHaveReadMailC2S(properties);
    };
    GamerDelHaveReadMailC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerDelHaveReadMailC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerDelHaveReadMailC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerDelHaveReadMailC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerDelHaveReadMailC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerDelHaveReadMailC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerDelHaveReadMailC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerDelHaveReadMailC2S)
            return object;
        var message = new $root.GamerDelHaveReadMailC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerDelHaveReadMailC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerDelHaveReadMailC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerDelHaveReadMailC2S;
})();
$root.GamerDelHaveReadMailS2C = (function() {
    function GamerDelHaveReadMailS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerDelHaveReadMailS2C.prototype.error = 0;
    GamerDelHaveReadMailS2C.create = function create(properties) {
        return new GamerDelHaveReadMailS2C(properties);
    };
    GamerDelHaveReadMailS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerDelHaveReadMailS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerDelHaveReadMailS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerDelHaveReadMailS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerDelHaveReadMailS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerDelHaveReadMailS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerDelHaveReadMailS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerDelHaveReadMailS2C)
            return object;
        var message = new $root.GamerDelHaveReadMailS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerDelHaveReadMailS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerDelHaveReadMailS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerDelHaveReadMailS2C;
})();
$root.GamerOneKeyRcvMailRewardC2S = (function() {
    function GamerOneKeyRcvMailRewardC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerOneKeyRcvMailRewardC2S.prototype.id = 0;
    GamerOneKeyRcvMailRewardC2S.create = function create(properties) {
        return new GamerOneKeyRcvMailRewardC2S(properties);
    };
    GamerOneKeyRcvMailRewardC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerOneKeyRcvMailRewardC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerOneKeyRcvMailRewardC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerOneKeyRcvMailRewardC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerOneKeyRcvMailRewardC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerOneKeyRcvMailRewardC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerOneKeyRcvMailRewardC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerOneKeyRcvMailRewardC2S)
            return object;
        var message = new $root.GamerOneKeyRcvMailRewardC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerOneKeyRcvMailRewardC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerOneKeyRcvMailRewardC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerOneKeyRcvMailRewardC2S;
})();
$root.GamerOneKeyRcvMailRewardS2C = (function() {
    function GamerOneKeyRcvMailRewardS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerOneKeyRcvMailRewardS2C.prototype.error = 0;
    GamerOneKeyRcvMailRewardS2C.create = function create(properties) {
        return new GamerOneKeyRcvMailRewardS2C(properties);
    };
    GamerOneKeyRcvMailRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerOneKeyRcvMailRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerOneKeyRcvMailRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerOneKeyRcvMailRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerOneKeyRcvMailRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerOneKeyRcvMailRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerOneKeyRcvMailRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerOneKeyRcvMailRewardS2C)
            return object;
        var message = new $root.GamerOneKeyRcvMailRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerOneKeyRcvMailRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerOneKeyRcvMailRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerOneKeyRcvMailRewardS2C;
})();
$root.GamerChangeMailStateC2S = (function() {
    function GamerChangeMailStateC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeMailStateC2S.prototype.id = 0;
    GamerChangeMailStateC2S.prototype.mailId = "";
    GamerChangeMailStateC2S.prototype.state = 0;
    GamerChangeMailStateC2S.create = function create(properties) {
        return new GamerChangeMailStateC2S(properties);
    };
    GamerChangeMailStateC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.mailId);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
        return writer;
    };
    GamerChangeMailStateC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeMailStateC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeMailStateC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.mailId = reader.string();
                break;
            case 3:
                message.state = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeMailStateC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeMailStateC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            if (!$util.isString(message.mailId))
                return "mailId: string expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        return null;
    };
    GamerChangeMailStateC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeMailStateC2S)
            return object;
        var message = new $root.GamerChangeMailStateC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.mailId != null)
            message.mailId = String(object.mailId);
        switch (object.state) {
        case "MailUnRead":
        case 0:
            message.state = 0;
            break;
        case "MailRead":
        case 1:
            message.state = 1;
            break;
        case "MailReceived":
        case 2:
            message.state = 2;
            break;
        }
        return message;
    };
    GamerChangeMailStateC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.mailId = "";
            object.state = options.enums === String ? "MailUnRead" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            object.mailId = message.mailId;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.MailState[message.state] : message.state;
        return object;
    };
    GamerChangeMailStateC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeMailStateC2S;
})();
$root.GamerChangeMailStateS2C = (function() {
    function GamerChangeMailStateS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeMailStateS2C.prototype.error = 0;
    GamerChangeMailStateS2C.create = function create(properties) {
        return new GamerChangeMailStateS2C(properties);
    };
    GamerChangeMailStateS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerChangeMailStateS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeMailStateS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeMailStateS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeMailStateS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeMailStateS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerChangeMailStateS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeMailStateS2C)
            return object;
        var message = new $root.GamerChangeMailStateS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerChangeMailStateS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerChangeMailStateS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeMailStateS2C;
})();
$root.GamerNewHeroC2S = (function() {
    function GamerNewHeroC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNewHeroC2S.prototype.id = 0;
    GamerNewHeroC2S.prototype.heroId = 0;
    GamerNewHeroC2S.create = function create(properties) {
        return new GamerNewHeroC2S(properties);
    };
    GamerNewHeroC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        return writer;
    };
    GamerNewHeroC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNewHeroC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNewHeroC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNewHeroC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNewHeroC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        return null;
    };
    GamerNewHeroC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNewHeroC2S)
            return object;
        var message = new $root.GamerNewHeroC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        return message;
    };
    GamerNewHeroC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        return object;
    };
    GamerNewHeroC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNewHeroC2S;
})();
$root.GamerNewHeroS2C = (function() {
    function GamerNewHeroS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNewHeroS2C.prototype.error = 0;
    GamerNewHeroS2C.prototype.hero = null;
    GamerNewHeroS2C.create = function create(properties) {
        return new GamerNewHeroS2C(properties);
    };
    GamerNewHeroS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.hero != null && message.hasOwnProperty("hero"))
            $root.GamerHero.encode(message.hero, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNewHeroS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNewHeroS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNewHeroS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.hero = $root.GamerHero.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNewHeroS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNewHeroS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.hero != null && message.hasOwnProperty("hero")) {
            var error = $root.GamerHero.verify(message.hero);
            if (error)
                return "hero." + error;
        }
        return null;
    };
    GamerNewHeroS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNewHeroS2C)
            return object;
        var message = new $root.GamerNewHeroS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.hero != null) {
            if (typeof object.hero !== "object")
                throw TypeError(".GamerNewHeroS2C.hero: object expected");
            message.hero = $root.GamerHero.fromObject(object.hero);
        }
        return message;
    };
    GamerNewHeroS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.hero = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.hero != null && message.hasOwnProperty("hero"))
            object.hero = $root.GamerHero.toObject(message.hero, options);
        return object;
    };
    GamerNewHeroS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNewHeroS2C;
})();
$root.GamerUpgradeHeroC2S = (function() {
    function GamerUpgradeHeroC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUpgradeHeroC2S.prototype.id = 0;
    GamerUpgradeHeroC2S.prototype.heroId = 0;
    GamerUpgradeHeroC2S.prototype.upgradeNum = 0;
    GamerUpgradeHeroC2S.create = function create(properties) {
        return new GamerUpgradeHeroC2S(properties);
    };
    GamerUpgradeHeroC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        if (message.upgradeNum != null && message.hasOwnProperty("upgradeNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.upgradeNum);
        return writer;
    };
    GamerUpgradeHeroC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUpgradeHeroC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUpgradeHeroC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            case 3:
                message.upgradeNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUpgradeHeroC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUpgradeHeroC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.upgradeNum != null && message.hasOwnProperty("upgradeNum"))
            if (!$util.isInteger(message.upgradeNum))
                return "upgradeNum: integer expected";
        return null;
    };
    GamerUpgradeHeroC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUpgradeHeroC2S)
            return object;
        var message = new $root.GamerUpgradeHeroC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.upgradeNum != null)
            message.upgradeNum = object.upgradeNum | 0;
        return message;
    };
    GamerUpgradeHeroC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroId = 0;
            object.upgradeNum = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.upgradeNum != null && message.hasOwnProperty("upgradeNum"))
            object.upgradeNum = message.upgradeNum;
        return object;
    };
    GamerUpgradeHeroC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUpgradeHeroC2S;
})();
$root.GamerUpgradeHeroS2C = (function() {
    function GamerUpgradeHeroS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUpgradeHeroS2C.prototype.error = 0;
    GamerUpgradeHeroS2C.prototype.hero = null;
    GamerUpgradeHeroS2C.prototype.upgradeNum = 0;
    GamerUpgradeHeroS2C.create = function create(properties) {
        return new GamerUpgradeHeroS2C(properties);
    };
    GamerUpgradeHeroS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.hero != null && message.hasOwnProperty("hero"))
            $root.GamerHero.encode(message.hero, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.upgradeNum != null && message.hasOwnProperty("upgradeNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.upgradeNum);
        return writer;
    };
    GamerUpgradeHeroS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUpgradeHeroS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUpgradeHeroS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.hero = $root.GamerHero.decode(reader, reader.uint32());
                break;
            case 3:
                message.upgradeNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUpgradeHeroS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUpgradeHeroS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.hero != null && message.hasOwnProperty("hero")) {
            var error = $root.GamerHero.verify(message.hero);
            if (error)
                return "hero." + error;
        }
        if (message.upgradeNum != null && message.hasOwnProperty("upgradeNum"))
            if (!$util.isInteger(message.upgradeNum))
                return "upgradeNum: integer expected";
        return null;
    };
    GamerUpgradeHeroS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUpgradeHeroS2C)
            return object;
        var message = new $root.GamerUpgradeHeroS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.hero != null) {
            if (typeof object.hero !== "object")
                throw TypeError(".GamerUpgradeHeroS2C.hero: object expected");
            message.hero = $root.GamerHero.fromObject(object.hero);
        }
        if (object.upgradeNum != null)
            message.upgradeNum = object.upgradeNum | 0;
        return message;
    };
    GamerUpgradeHeroS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.hero = null;
            object.upgradeNum = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.hero != null && message.hasOwnProperty("hero"))
            object.hero = $root.GamerHero.toObject(message.hero, options);
        if (message.upgradeNum != null && message.hasOwnProperty("upgradeNum"))
            object.upgradeNum = message.upgradeNum;
        return object;
    };
    GamerUpgradeHeroS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUpgradeHeroS2C;
})();
$root.GamerUseHeroMedicineC2S = (function() {
    function GamerUseHeroMedicineC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUseHeroMedicineC2S.prototype.id = 0;
    GamerUseHeroMedicineC2S.prototype.heroId = 0;
    GamerUseHeroMedicineC2S.prototype.itemId = 0;
    GamerUseHeroMedicineC2S.prototype.useNum = 0;
    GamerUseHeroMedicineC2S.create = function create(properties) {
        return new GamerUseHeroMedicineC2S(properties);
    };
    GamerUseHeroMedicineC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.itemId);
        if (message.useNum != null && message.hasOwnProperty("useNum"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.useNum);
        return writer;
    };
    GamerUseHeroMedicineC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUseHeroMedicineC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUseHeroMedicineC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            case 3:
                message.itemId = reader.int32();
                break;
            case 4:
                message.useNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUseHeroMedicineC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUseHeroMedicineC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            if (!$util.isInteger(message.itemId))
                return "itemId: integer expected";
        if (message.useNum != null && message.hasOwnProperty("useNum"))
            if (!$util.isInteger(message.useNum))
                return "useNum: integer expected";
        return null;
    };
    GamerUseHeroMedicineC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUseHeroMedicineC2S)
            return object;
        var message = new $root.GamerUseHeroMedicineC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.itemId != null)
            message.itemId = object.itemId | 0;
        if (object.useNum != null)
            message.useNum = object.useNum | 0;
        return message;
    };
    GamerUseHeroMedicineC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroId = 0;
            object.itemId = 0;
            object.useNum = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        if (message.useNum != null && message.hasOwnProperty("useNum"))
            object.useNum = message.useNum;
        return object;
    };
    GamerUseHeroMedicineC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUseHeroMedicineC2S;
})();
$root.GamerUseHeroMedicineS2C = (function() {
    function GamerUseHeroMedicineS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUseHeroMedicineS2C.prototype.error = 0;
    GamerUseHeroMedicineS2C.prototype.hero = null;
    GamerUseHeroMedicineS2C.create = function create(properties) {
        return new GamerUseHeroMedicineS2C(properties);
    };
    GamerUseHeroMedicineS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.hero != null && message.hasOwnProperty("hero"))
            $root.GamerHero.encode(message.hero, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerUseHeroMedicineS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUseHeroMedicineS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUseHeroMedicineS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.hero = $root.GamerHero.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUseHeroMedicineS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUseHeroMedicineS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.hero != null && message.hasOwnProperty("hero")) {
            var error = $root.GamerHero.verify(message.hero);
            if (error)
                return "hero." + error;
        }
        return null;
    };
    GamerUseHeroMedicineS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUseHeroMedicineS2C)
            return object;
        var message = new $root.GamerUseHeroMedicineS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.hero != null) {
            if (typeof object.hero !== "object")
                throw TypeError(".GamerUseHeroMedicineS2C.hero: object expected");
            message.hero = $root.GamerHero.fromObject(object.hero);
        }
        return message;
    };
    GamerUseHeroMedicineS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.hero = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.hero != null && message.hasOwnProperty("hero"))
            object.hero = $root.GamerHero.toObject(message.hero, options);
        return object;
    };
    GamerUseHeroMedicineS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUseHeroMedicineS2C;
})();
$root.GamerUpStarHeroC2S = (function() {
    function GamerUpStarHeroC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUpStarHeroC2S.prototype.id = 0;
    GamerUpStarHeroC2S.prototype.heroId = 0;
    GamerUpStarHeroC2S.create = function create(properties) {
        return new GamerUpStarHeroC2S(properties);
    };
    GamerUpStarHeroC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        return writer;
    };
    GamerUpStarHeroC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUpStarHeroC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUpStarHeroC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUpStarHeroC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUpStarHeroC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        return null;
    };
    GamerUpStarHeroC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUpStarHeroC2S)
            return object;
        var message = new $root.GamerUpStarHeroC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        return message;
    };
    GamerUpStarHeroC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        return object;
    };
    GamerUpStarHeroC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUpStarHeroC2S;
})();
$root.GamerUpStarHeroS2C = (function() {
    function GamerUpStarHeroS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUpStarHeroS2C.prototype.error = 0;
    GamerUpStarHeroS2C.prototype.hero = null;
    GamerUpStarHeroS2C.create = function create(properties) {
        return new GamerUpStarHeroS2C(properties);
    };
    GamerUpStarHeroS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.hero != null && message.hasOwnProperty("hero"))
            $root.GamerHero.encode(message.hero, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerUpStarHeroS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUpStarHeroS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUpStarHeroS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.hero = $root.GamerHero.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUpStarHeroS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUpStarHeroS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.hero != null && message.hasOwnProperty("hero")) {
            var error = $root.GamerHero.verify(message.hero);
            if (error)
                return "hero." + error;
        }
        return null;
    };
    GamerUpStarHeroS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUpStarHeroS2C)
            return object;
        var message = new $root.GamerUpStarHeroS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.hero != null) {
            if (typeof object.hero !== "object")
                throw TypeError(".GamerUpStarHeroS2C.hero: object expected");
            message.hero = $root.GamerHero.fromObject(object.hero);
        }
        return message;
    };
    GamerUpStarHeroS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.hero = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.hero != null && message.hasOwnProperty("hero"))
            object.hero = $root.GamerHero.toObject(message.hero, options);
        return object;
    };
    GamerUpStarHeroS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUpStarHeroS2C;
})();
$root.GamerUpHeroSkillC2S = (function() {
    function GamerUpHeroSkillC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUpHeroSkillC2S.prototype.id = 0;
    GamerUpHeroSkillC2S.prototype.heroId = 0;
    GamerUpHeroSkillC2S.prototype.skillId = 0;
    GamerUpHeroSkillC2S.create = function create(properties) {
        return new GamerUpHeroSkillC2S(properties);
    };
    GamerUpHeroSkillC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.skillId);
        return writer;
    };
    GamerUpHeroSkillC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUpHeroSkillC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUpHeroSkillC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            case 3:
                message.skillId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUpHeroSkillC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUpHeroSkillC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            if (!$util.isInteger(message.skillId))
                return "skillId: integer expected";
        return null;
    };
    GamerUpHeroSkillC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUpHeroSkillC2S)
            return object;
        var message = new $root.GamerUpHeroSkillC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.skillId != null)
            message.skillId = object.skillId | 0;
        return message;
    };
    GamerUpHeroSkillC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroId = 0;
            object.skillId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            object.skillId = message.skillId;
        return object;
    };
    GamerUpHeroSkillC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUpHeroSkillC2S;
})();
$root.GamerUpHeroSkillS2C = (function() {
    function GamerUpHeroSkillS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUpHeroSkillS2C.prototype.error = 0;
    GamerUpHeroSkillS2C.prototype.hero = null;
    GamerUpHeroSkillS2C.create = function create(properties) {
        return new GamerUpHeroSkillS2C(properties);
    };
    GamerUpHeroSkillS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.hero != null && message.hasOwnProperty("hero"))
            $root.GamerHero.encode(message.hero, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerUpHeroSkillS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUpHeroSkillS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUpHeroSkillS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.hero = $root.GamerHero.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUpHeroSkillS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUpHeroSkillS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.hero != null && message.hasOwnProperty("hero")) {
            var error = $root.GamerHero.verify(message.hero);
            if (error)
                return "hero." + error;
        }
        return null;
    };
    GamerUpHeroSkillS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUpHeroSkillS2C)
            return object;
        var message = new $root.GamerUpHeroSkillS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.hero != null) {
            if (typeof object.hero !== "object")
                throw TypeError(".GamerUpHeroSkillS2C.hero: object expected");
            message.hero = $root.GamerHero.fromObject(object.hero);
        }
        return message;
    };
    GamerUpHeroSkillS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.hero = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.hero != null && message.hasOwnProperty("hero"))
            object.hero = $root.GamerHero.toObject(message.hero, options);
        return object;
    };
    GamerUpHeroSkillS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUpHeroSkillS2C;
})();
$root.GamerGetHeroC2S = (function() {
    function GamerGetHeroC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetHeroC2S.prototype.id = 0;
    GamerGetHeroC2S.create = function create(properties) {
        return new GamerGetHeroC2S(properties);
    };
    GamerGetHeroC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerGetHeroC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetHeroC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetHeroC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetHeroC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetHeroC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerGetHeroC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetHeroC2S)
            return object;
        var message = new $root.GamerGetHeroC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerGetHeroC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerGetHeroC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetHeroC2S;
})();
$root.GamerGetHeroS2C = (function() {
    function GamerGetHeroS2C(properties) {
        this.heroList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetHeroS2C.prototype.error = 0;
    GamerGetHeroS2C.prototype.heroList = $util.emptyArray;
    GamerGetHeroS2C.prototype.teamSelectHeroId = 0;
    GamerGetHeroS2C.create = function create(properties) {
        return new GamerGetHeroS2C(properties);
    };
    GamerGetHeroS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroList != null && message.heroList.length)
            for (var i = 0; i < message.heroList.length; ++i)
                $root.GamerHero.encode(message.heroList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.teamSelectHeroId != null && message.hasOwnProperty("teamSelectHeroId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.teamSelectHeroId);
        return writer;
    };
    GamerGetHeroS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetHeroS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetHeroS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.heroList && message.heroList.length))
                    message.heroList = [];
                message.heroList.push($root.GamerHero.decode(reader, reader.uint32()));
                break;
            case 3:
                message.teamSelectHeroId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetHeroS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetHeroS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroList != null && message.hasOwnProperty("heroList")) {
            if (!Array.isArray(message.heroList))
                return "heroList: array expected";
            for (var i = 0; i < message.heroList.length; ++i) {
                var error = $root.GamerHero.verify(message.heroList[i]);
                if (error)
                    return "heroList." + error;
            }
        }
        if (message.teamSelectHeroId != null && message.hasOwnProperty("teamSelectHeroId"))
            if (!$util.isInteger(message.teamSelectHeroId))
                return "teamSelectHeroId: integer expected";
        return null;
    };
    GamerGetHeroS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetHeroS2C)
            return object;
        var message = new $root.GamerGetHeroS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroList) {
            if (!Array.isArray(object.heroList))
                throw TypeError(".GamerGetHeroS2C.heroList: array expected");
            message.heroList = [];
            for (var i = 0; i < object.heroList.length; ++i) {
                if (typeof object.heroList[i] !== "object")
                    throw TypeError(".GamerGetHeroS2C.heroList: object expected");
                message.heroList[i] = $root.GamerHero.fromObject(object.heroList[i]);
            }
        }
        if (object.teamSelectHeroId != null)
            message.teamSelectHeroId = object.teamSelectHeroId | 0;
        return message;
    };
    GamerGetHeroS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.heroList = [];
        if (options.defaults) {
            object.error = 0;
            object.teamSelectHeroId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroList && message.heroList.length) {
            object.heroList = [];
            for (var j = 0; j < message.heroList.length; ++j)
                object.heroList[j] = $root.GamerHero.toObject(message.heroList[j], options);
        }
        if (message.teamSelectHeroId != null && message.hasOwnProperty("teamSelectHeroId"))
            object.teamSelectHeroId = message.teamSelectHeroId;
        return object;
    };
    GamerGetHeroS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetHeroS2C;
})();
$root.GamerNotifyHerosChangeS2C = (function() {
    function GamerNotifyHerosChangeS2C(properties) {
        this.heroList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyHerosChangeS2C.prototype.error = 0;
    GamerNotifyHerosChangeS2C.prototype.heroList = $util.emptyArray;
    GamerNotifyHerosChangeS2C.create = function create(properties) {
        return new GamerNotifyHerosChangeS2C(properties);
    };
    GamerNotifyHerosChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroList != null && message.heroList.length)
            for (var i = 0; i < message.heroList.length; ++i)
                $root.GamerHero.encode(message.heroList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyHerosChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyHerosChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyHerosChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.heroList && message.heroList.length))
                    message.heroList = [];
                message.heroList.push($root.GamerHero.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyHerosChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyHerosChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroList != null && message.hasOwnProperty("heroList")) {
            if (!Array.isArray(message.heroList))
                return "heroList: array expected";
            for (var i = 0; i < message.heroList.length; ++i) {
                var error = $root.GamerHero.verify(message.heroList[i]);
                if (error)
                    return "heroList." + error;
            }
        }
        return null;
    };
    GamerNotifyHerosChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyHerosChangeS2C)
            return object;
        var message = new $root.GamerNotifyHerosChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroList) {
            if (!Array.isArray(object.heroList))
                throw TypeError(".GamerNotifyHerosChangeS2C.heroList: array expected");
            message.heroList = [];
            for (var i = 0; i < object.heroList.length; ++i) {
                if (typeof object.heroList[i] !== "object")
                    throw TypeError(".GamerNotifyHerosChangeS2C.heroList: object expected");
                message.heroList[i] = $root.GamerHero.fromObject(object.heroList[i]);
            }
        }
        return message;
    };
    GamerNotifyHerosChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.heroList = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroList && message.heroList.length) {
            object.heroList = [];
            for (var j = 0; j < message.heroList.length; ++j)
                object.heroList[j] = $root.GamerHero.toObject(message.heroList[j], options);
        }
        return object;
    };
    GamerNotifyHerosChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyHerosChangeS2C;
})();
$root.GamerNotifyHeroPropUpdateS2C = (function() {
    function GamerNotifyHeroPropUpdateS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyHeroPropUpdateS2C.prototype.error = 0;
    GamerNotifyHeroPropUpdateS2C.prototype.hero = null;
    GamerNotifyHeroPropUpdateS2C.create = function create(properties) {
        return new GamerNotifyHeroPropUpdateS2C(properties);
    };
    GamerNotifyHeroPropUpdateS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.hero != null && message.hasOwnProperty("hero"))
            $root.GamerHero.encode(message.hero, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyHeroPropUpdateS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyHeroPropUpdateS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyHeroPropUpdateS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.hero = $root.GamerHero.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyHeroPropUpdateS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyHeroPropUpdateS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.hero != null && message.hasOwnProperty("hero")) {
            var error = $root.GamerHero.verify(message.hero);
            if (error)
                return "hero." + error;
        }
        return null;
    };
    GamerNotifyHeroPropUpdateS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyHeroPropUpdateS2C)
            return object;
        var message = new $root.GamerNotifyHeroPropUpdateS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.hero != null) {
            if (typeof object.hero !== "object")
                throw TypeError(".GamerNotifyHeroPropUpdateS2C.hero: object expected");
            message.hero = $root.GamerHero.fromObject(object.hero);
        }
        return message;
    };
    GamerNotifyHeroPropUpdateS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.hero = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.hero != null && message.hasOwnProperty("hero"))
            object.hero = $root.GamerHero.toObject(message.hero, options);
        return object;
    };
    GamerNotifyHeroPropUpdateS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyHeroPropUpdateS2C;
})();
$root.GamerPVPLoadingC2S = (function() {
    function GamerPVPLoadingC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerPVPLoadingC2S.prototype.id = 0;
    GamerPVPLoadingC2S.prototype.session = "";
    GamerPVPLoadingC2S.prototype.per = 0;
    GamerPVPLoadingC2S.create = function create(properties) {
        return new GamerPVPLoadingC2S(properties);
    };
    GamerPVPLoadingC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.session);
        if (message.per != null && message.hasOwnProperty("per"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.per);
        return writer;
    };
    GamerPVPLoadingC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerPVPLoadingC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerPVPLoadingC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.session = reader.string();
                break;
            case 3:
                message.per = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerPVPLoadingC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerPVPLoadingC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        if (message.per != null && message.hasOwnProperty("per"))
            if (!$util.isInteger(message.per))
                return "per: integer expected";
        return null;
    };
    GamerPVPLoadingC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerPVPLoadingC2S)
            return object;
        var message = new $root.GamerPVPLoadingC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.session != null)
            message.session = String(object.session);
        if (object.per != null)
            message.per = object.per | 0;
        return message;
    };
    GamerPVPLoadingC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.session = "";
            object.per = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        if (message.per != null && message.hasOwnProperty("per"))
            object.per = message.per;
        return object;
    };
    GamerPVPLoadingC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerPVPLoadingC2S;
})();
$root.GamerPVPLoadingS2C = (function() {
    function GamerPVPLoadingS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerPVPLoadingS2C.prototype.error = 0;
    GamerPVPLoadingS2C.create = function create(properties) {
        return new GamerPVPLoadingS2C(properties);
    };
    GamerPVPLoadingS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerPVPLoadingS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerPVPLoadingS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerPVPLoadingS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerPVPLoadingS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerPVPLoadingS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerPVPLoadingS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerPVPLoadingS2C)
            return object;
        var message = new $root.GamerPVPLoadingS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerPVPLoadingS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerPVPLoadingS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerPVPLoadingS2C;
})();
$root.GamerNotifyPVPLoadingS2C = (function() {
    function GamerNotifyPVPLoadingS2C(properties) {
        this.loading = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyPVPLoadingS2C.prototype.error = 0;
    GamerNotifyPVPLoadingS2C.prototype.state = 0;
    GamerNotifyPVPLoadingS2C.prototype.loading = $util.emptyArray;
    GamerNotifyPVPLoadingS2C.create = function create(properties) {
        return new GamerNotifyPVPLoadingS2C(properties);
    };
    GamerNotifyPVPLoadingS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
        if (message.loading != null && message.loading.length)
            for (var i = 0; i < message.loading.length; ++i)
                $root.PVPLoading.encode(message.loading[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerNotifyPVPLoadingS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyPVPLoadingS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyPVPLoadingS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.state = reader.int32();
                break;
            case 3:
                if (!(message.loading && message.loading.length))
                    message.loading = [];
                message.loading.push($root.PVPLoading.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyPVPLoadingS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyPVPLoadingS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (!$util.isInteger(message.state))
                return "state: integer expected";
        if (message.loading != null && message.hasOwnProperty("loading")) {
            if (!Array.isArray(message.loading))
                return "loading: array expected";
            for (var i = 0; i < message.loading.length; ++i) {
                var error = $root.PVPLoading.verify(message.loading[i]);
                if (error)
                    return "loading." + error;
            }
        }
        return null;
    };
    GamerNotifyPVPLoadingS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyPVPLoadingS2C)
            return object;
        var message = new $root.GamerNotifyPVPLoadingS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.state != null)
            message.state = object.state | 0;
        if (object.loading) {
            if (!Array.isArray(object.loading))
                throw TypeError(".GamerNotifyPVPLoadingS2C.loading: array expected");
            message.loading = [];
            for (var i = 0; i < object.loading.length; ++i) {
                if (typeof object.loading[i] !== "object")
                    throw TypeError(".GamerNotifyPVPLoadingS2C.loading: object expected");
                message.loading[i] = $root.PVPLoading.fromObject(object.loading[i]);
            }
        }
        return message;
    };
    GamerNotifyPVPLoadingS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.loading = [];
        if (options.defaults) {
            object.error = 0;
            object.state = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.loading && message.loading.length) {
            object.loading = [];
            for (var j = 0; j < message.loading.length; ++j)
                object.loading[j] = $root.PVPLoading.toObject(message.loading[j], options);
        }
        return object;
    };
    GamerNotifyPVPLoadingS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyPVPLoadingS2C;
})();
$root.GamerPVPSyncC2S = (function() {
    function GamerPVPSyncC2S(properties) {
        this.needFrames = [];
        this.crc = [];
        this.inputs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerPVPSyncC2S.prototype.id = 0;
    GamerPVPSyncC2S.prototype.session = "";
    GamerPVPSyncC2S.prototype.input = null;
    GamerPVPSyncC2S.prototype.needFrames = $util.emptyArray;
    GamerPVPSyncC2S.prototype.crc = $util.emptyArray;
    GamerPVPSyncC2S.prototype.inputs = $util.emptyArray;
    GamerPVPSyncC2S.prototype.reconn = false;
    GamerPVPSyncC2S.prototype.exit = false;
    GamerPVPSyncC2S.prototype.index = 0;
    GamerPVPSyncC2S.prototype.gateAddr = "";
    GamerPVPSyncC2S.prototype.result = null;
    GamerPVPSyncC2S.prototype.recvTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerPVPSyncC2S.prototype.clientAddr = "";
    GamerPVPSyncC2S.create = function create(properties) {
        return new GamerPVPSyncC2S(properties);
    };
    GamerPVPSyncC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.session);
        if (message.input != null && message.hasOwnProperty("input"))
            $root.PVPInput.encode(message.input, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.needFrames != null && message.needFrames.length) {
            writer.uint32(/* id 4, wireType 2 =*/34).fork();
            for (var i = 0; i < message.needFrames.length; ++i)
                writer.int32(message.needFrames[i]);
            writer.ldelim();
        }
        if (message.crc != null && message.crc.length) {
            writer.uint32(/* id 5, wireType 2 =*/42).fork();
            for (var i = 0; i < message.crc.length; ++i)
                writer.uint64(message.crc[i]);
            writer.ldelim();
        }
        if (message.inputs != null && message.inputs.length)
            for (var i = 0; i < message.inputs.length; ++i)
                $root.PVPInput.encode(message.inputs[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.reconn);
        if (message.exit != null && message.hasOwnProperty("exit"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.exit);
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.index);
        if (message.gateAddr != null && message.hasOwnProperty("gateAddr"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.gateAddr);
        if (message.result != null && message.hasOwnProperty("result"))
            $root.PVPResult.encode(message.result, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.recvTime != null && message.hasOwnProperty("recvTime"))
            writer.uint32(/* id 12, wireType 0 =*/96).int64(message.recvTime);
        if (message.clientAddr != null && message.hasOwnProperty("clientAddr"))
            writer.uint32(/* id 13, wireType 2 =*/106).string(message.clientAddr);
        return writer;
    };
    GamerPVPSyncC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerPVPSyncC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerPVPSyncC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.session = reader.string();
                break;
            case 3:
                message.input = $root.PVPInput.decode(reader, reader.uint32());
                break;
            case 4:
                if (!(message.needFrames && message.needFrames.length))
                    message.needFrames = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.needFrames.push(reader.int32());
                } else
                    message.needFrames.push(reader.int32());
                break;
            case 5:
                if (!(message.crc && message.crc.length))
                    message.crc = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.crc.push(reader.uint64());
                } else
                    message.crc.push(reader.uint64());
                break;
            case 6:
                if (!(message.inputs && message.inputs.length))
                    message.inputs = [];
                message.inputs.push($root.PVPInput.decode(reader, reader.uint32()));
                break;
            case 7:
                message.reconn = reader.bool();
                break;
            case 8:
                message.exit = reader.bool();
                break;
            case 9:
                message.index = reader.int32();
                break;
            case 10:
                message.gateAddr = reader.string();
                break;
            case 11:
                message.result = $root.PVPResult.decode(reader, reader.uint32());
                break;
            case 12:
                message.recvTime = reader.int64();
                break;
            case 13:
                message.clientAddr = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerPVPSyncC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerPVPSyncC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        if (message.input != null && message.hasOwnProperty("input")) {
            var error = $root.PVPInput.verify(message.input);
            if (error)
                return "input." + error;
        }
        if (message.needFrames != null && message.hasOwnProperty("needFrames")) {
            if (!Array.isArray(message.needFrames))
                return "needFrames: array expected";
            for (var i = 0; i < message.needFrames.length; ++i)
                if (!$util.isInteger(message.needFrames[i]))
                    return "needFrames: integer[] expected";
        }
        if (message.crc != null && message.hasOwnProperty("crc")) {
            if (!Array.isArray(message.crc))
                return "crc: array expected";
            for (var i = 0; i < message.crc.length; ++i)
                if (!$util.isInteger(message.crc[i]) && !(message.crc[i] && $util.isInteger(message.crc[i].low) && $util.isInteger(message.crc[i].high)))
                    return "crc: integer|Long[] expected";
        }
        if (message.inputs != null && message.hasOwnProperty("inputs")) {
            if (!Array.isArray(message.inputs))
                return "inputs: array expected";
            for (var i = 0; i < message.inputs.length; ++i) {
                var error = $root.PVPInput.verify(message.inputs[i]);
                if (error)
                    return "inputs." + error;
            }
        }
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            if (typeof message.reconn !== "boolean")
                return "reconn: boolean expected";
        if (message.exit != null && message.hasOwnProperty("exit"))
            if (typeof message.exit !== "boolean")
                return "exit: boolean expected";
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        if (message.gateAddr != null && message.hasOwnProperty("gateAddr"))
            if (!$util.isString(message.gateAddr))
                return "gateAddr: string expected";
        if (message.result != null && message.hasOwnProperty("result")) {
            var error = $root.PVPResult.verify(message.result);
            if (error)
                return "result." + error;
        }
        if (message.recvTime != null && message.hasOwnProperty("recvTime"))
            if (!$util.isInteger(message.recvTime) && !(message.recvTime && $util.isInteger(message.recvTime.low) && $util.isInteger(message.recvTime.high)))
                return "recvTime: integer|Long expected";
        if (message.clientAddr != null && message.hasOwnProperty("clientAddr"))
            if (!$util.isString(message.clientAddr))
                return "clientAddr: string expected";
        return null;
    };
    GamerPVPSyncC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerPVPSyncC2S)
            return object;
        var message = new $root.GamerPVPSyncC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.session != null)
            message.session = String(object.session);
        if (object.input != null) {
            if (typeof object.input !== "object")
                throw TypeError(".GamerPVPSyncC2S.input: object expected");
            message.input = $root.PVPInput.fromObject(object.input);
        }
        if (object.needFrames) {
            if (!Array.isArray(object.needFrames))
                throw TypeError(".GamerPVPSyncC2S.needFrames: array expected");
            message.needFrames = [];
            for (var i = 0; i < object.needFrames.length; ++i)
                message.needFrames[i] = object.needFrames[i] | 0;
        }
        if (object.crc) {
            if (!Array.isArray(object.crc))
                throw TypeError(".GamerPVPSyncC2S.crc: array expected");
            message.crc = [];
            for (var i = 0; i < object.crc.length; ++i)
                if ($util.Long)
                    (message.crc[i] = $util.Long.fromValue(object.crc[i])).unsigned = true;
                else if (typeof object.crc[i] === "string")
                    message.crc[i] = parseInt(object.crc[i], 10);
                else if (typeof object.crc[i] === "number")
                    message.crc[i] = object.crc[i];
                else if (typeof object.crc[i] === "object")
                    message.crc[i] = new $util.LongBits(object.crc[i].low >>> 0, object.crc[i].high >>> 0).toNumber(true);
        }
        if (object.inputs) {
            if (!Array.isArray(object.inputs))
                throw TypeError(".GamerPVPSyncC2S.inputs: array expected");
            message.inputs = [];
            for (var i = 0; i < object.inputs.length; ++i) {
                if (typeof object.inputs[i] !== "object")
                    throw TypeError(".GamerPVPSyncC2S.inputs: object expected");
                message.inputs[i] = $root.PVPInput.fromObject(object.inputs[i]);
            }
        }
        if (object.reconn != null)
            message.reconn = Boolean(object.reconn);
        if (object.exit != null)
            message.exit = Boolean(object.exit);
        if (object.index != null)
            message.index = object.index | 0;
        if (object.gateAddr != null)
            message.gateAddr = String(object.gateAddr);
        if (object.result != null) {
            if (typeof object.result !== "object")
                throw TypeError(".GamerPVPSyncC2S.result: object expected");
            message.result = $root.PVPResult.fromObject(object.result);
        }
        if (object.recvTime != null)
            if ($util.Long)
                (message.recvTime = $util.Long.fromValue(object.recvTime)).unsigned = false;
            else if (typeof object.recvTime === "string")
                message.recvTime = parseInt(object.recvTime, 10);
            else if (typeof object.recvTime === "number")
                message.recvTime = object.recvTime;
            else if (typeof object.recvTime === "object")
                message.recvTime = new $util.LongBits(object.recvTime.low >>> 0, object.recvTime.high >>> 0).toNumber();
        if (object.clientAddr != null)
            message.clientAddr = String(object.clientAddr);
        return message;
    };
    GamerPVPSyncC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.needFrames = [];
            object.crc = [];
            object.inputs = [];
        }
        if (options.defaults) {
            object.id = 0;
            object.session = "";
            object.input = null;
            object.reconn = false;
            object.exit = false;
            object.index = 0;
            object.gateAddr = "";
            object.result = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.recvTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.recvTime = options.longs === String ? "0" : 0;
            object.clientAddr = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        if (message.input != null && message.hasOwnProperty("input"))
            object.input = $root.PVPInput.toObject(message.input, options);
        if (message.needFrames && message.needFrames.length) {
            object.needFrames = [];
            for (var j = 0; j < message.needFrames.length; ++j)
                object.needFrames[j] = message.needFrames[j];
        }
        if (message.crc && message.crc.length) {
            object.crc = [];
            for (var j = 0; j < message.crc.length; ++j)
                if (typeof message.crc[j] === "number")
                    object.crc[j] = options.longs === String ? String(message.crc[j]) : message.crc[j];
                else
                    object.crc[j] = options.longs === String ? $util.Long.prototype.toString.call(message.crc[j]) : options.longs === Number ? new $util.LongBits(message.crc[j].low >>> 0, message.crc[j].high >>> 0).toNumber(true) : message.crc[j];
        }
        if (message.inputs && message.inputs.length) {
            object.inputs = [];
            for (var j = 0; j < message.inputs.length; ++j)
                object.inputs[j] = $root.PVPInput.toObject(message.inputs[j], options);
        }
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            object.reconn = message.reconn;
        if (message.exit != null && message.hasOwnProperty("exit"))
            object.exit = message.exit;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.gateAddr != null && message.hasOwnProperty("gateAddr"))
            object.gateAddr = message.gateAddr;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = $root.PVPResult.toObject(message.result, options);
        if (message.recvTime != null && message.hasOwnProperty("recvTime"))
            if (typeof message.recvTime === "number")
                object.recvTime = options.longs === String ? String(message.recvTime) : message.recvTime;
            else
                object.recvTime = options.longs === String ? $util.Long.prototype.toString.call(message.recvTime) : options.longs === Number ? new $util.LongBits(message.recvTime.low >>> 0, message.recvTime.high >>> 0).toNumber() : message.recvTime;
        if (message.clientAddr != null && message.hasOwnProperty("clientAddr"))
            object.clientAddr = message.clientAddr;
        return object;
    };
    GamerPVPSyncC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerPVPSyncC2S;
})();
$root.GamerPVPSyncS2C = (function() {
    function GamerPVPSyncS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerPVPSyncS2C.prototype.error = 0;
    GamerPVPSyncS2C.create = function create(properties) {
        return new GamerPVPSyncS2C(properties);
    };
    GamerPVPSyncS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerPVPSyncS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerPVPSyncS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerPVPSyncS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerPVPSyncS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerPVPSyncS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerPVPSyncS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerPVPSyncS2C)
            return object;
        var message = new $root.GamerPVPSyncS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerPVPSyncS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerPVPSyncS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerPVPSyncS2C;
})();
$root.GamerNotifyGamerMiniS2C = (function() {
    function GamerNotifyGamerMiniS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyGamerMiniS2C.prototype.error = 0;
    GamerNotifyGamerMiniS2C.prototype.mini = null;
    GamerNotifyGamerMiniS2C.create = function create(properties) {
        return new GamerNotifyGamerMiniS2C(properties);
    };
    GamerNotifyGamerMiniS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.mini != null && message.hasOwnProperty("mini"))
            $root.GamerMini.encode(message.mini, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyGamerMiniS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyGamerMiniS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyGamerMiniS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.mini = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyGamerMiniS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyGamerMiniS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.mini != null && message.hasOwnProperty("mini")) {
            var error = $root.GamerMini.verify(message.mini);
            if (error)
                return "mini." + error;
        }
        return null;
    };
    GamerNotifyGamerMiniS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyGamerMiniS2C)
            return object;
        var message = new $root.GamerNotifyGamerMiniS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.mini != null) {
            if (typeof object.mini !== "object")
                throw TypeError(".GamerNotifyGamerMiniS2C.mini: object expected");
            message.mini = $root.GamerMini.fromObject(object.mini);
        }
        return message;
    };
    GamerNotifyGamerMiniS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.mini = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.mini != null && message.hasOwnProperty("mini"))
            object.mini = $root.GamerMini.toObject(message.mini, options);
        return object;
    };
    GamerNotifyGamerMiniS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyGamerMiniS2C;
})();
$root.GamerNotifyPVPSyncS2C = (function() {
    function GamerNotifyPVPSyncS2C(properties) {
        this.frames = [];
        this.frameData = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyPVPSyncS2C.prototype.error = 0;
    GamerNotifyPVPSyncS2C.prototype.maxFrameCount = 0;
    GamerNotifyPVPSyncS2C.prototype.frames = $util.emptyArray;
    GamerNotifyPVPSyncS2C.prototype.framesData = $util.newBuffer([]);
    GamerNotifyPVPSyncS2C.prototype.frameData = $util.emptyArray;
    GamerNotifyPVPSyncS2C.prototype.index = 0;
    GamerNotifyPVPSyncS2C.prototype.delta = 0;
    GamerNotifyPVPSyncS2C.prototype.session = "";
    GamerNotifyPVPSyncS2C.prototype.serverFrame = 0;
    GamerNotifyPVPSyncS2C.create = function create(properties) {
        return new GamerNotifyPVPSyncS2C(properties);
    };
    GamerNotifyPVPSyncS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.maxFrameCount != null && message.hasOwnProperty("maxFrameCount"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.maxFrameCount);
        if (message.frames != null && message.frames.length)
            for (var i = 0; i < message.frames.length; ++i)
                $root.PVPFrame.encode(message.frames[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.framesData != null && message.hasOwnProperty("framesData"))
            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.framesData);
        if (message.frameData != null && message.frameData.length)
            for (var i = 0; i < message.frameData.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.frameData[i]);
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.index);
        if (message.delta != null && message.hasOwnProperty("delta"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.delta);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.session);
        if (message.serverFrame != null && message.hasOwnProperty("serverFrame"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.serverFrame);
        return writer;
    };
    GamerNotifyPVPSyncS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyPVPSyncS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyPVPSyncS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.maxFrameCount = reader.int32();
                break;
            case 3:
                if (!(message.frames && message.frames.length))
                    message.frames = [];
                message.frames.push($root.PVPFrame.decode(reader, reader.uint32()));
                break;
            case 4:
                message.framesData = reader.bytes();
                break;
            case 5:
                if (!(message.frameData && message.frameData.length))
                    message.frameData = [];
                message.frameData.push(reader.bytes());
                break;
            case 6:
                message.index = reader.int32();
                break;
            case 7:
                message.delta = reader.int32();
                break;
            case 8:
                message.session = reader.string();
                break;
            case 9:
                message.serverFrame = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyPVPSyncS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyPVPSyncS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.maxFrameCount != null && message.hasOwnProperty("maxFrameCount"))
            if (!$util.isInteger(message.maxFrameCount))
                return "maxFrameCount: integer expected";
        if (message.frames != null && message.hasOwnProperty("frames")) {
            if (!Array.isArray(message.frames))
                return "frames: array expected";
            for (var i = 0; i < message.frames.length; ++i) {
                var error = $root.PVPFrame.verify(message.frames[i]);
                if (error)
                    return "frames." + error;
            }
        }
        if (message.framesData != null && message.hasOwnProperty("framesData"))
            if (!(message.framesData && typeof message.framesData.length === "number" || $util.isString(message.framesData)))
                return "framesData: buffer expected";
        if (message.frameData != null && message.hasOwnProperty("frameData")) {
            if (!Array.isArray(message.frameData))
                return "frameData: array expected";
            for (var i = 0; i < message.frameData.length; ++i)
                if (!(message.frameData[i] && typeof message.frameData[i].length === "number" || $util.isString(message.frameData[i])))
                    return "frameData: buffer[] expected";
        }
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        if (message.delta != null && message.hasOwnProperty("delta"))
            if (!$util.isInteger(message.delta))
                return "delta: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        if (message.serverFrame != null && message.hasOwnProperty("serverFrame"))
            if (!$util.isInteger(message.serverFrame))
                return "serverFrame: integer expected";
        return null;
    };
    GamerNotifyPVPSyncS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyPVPSyncS2C)
            return object;
        var message = new $root.GamerNotifyPVPSyncS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.maxFrameCount != null)
            message.maxFrameCount = object.maxFrameCount | 0;
        if (object.frames) {
            if (!Array.isArray(object.frames))
                throw TypeError(".GamerNotifyPVPSyncS2C.frames: array expected");
            message.frames = [];
            for (var i = 0; i < object.frames.length; ++i) {
                if (typeof object.frames[i] !== "object")
                    throw TypeError(".GamerNotifyPVPSyncS2C.frames: object expected");
                message.frames[i] = $root.PVPFrame.fromObject(object.frames[i]);
            }
        }
        if (object.framesData != null)
            if (typeof object.framesData === "string")
                $util.base64.decode(object.framesData, message.framesData = $util.newBuffer($util.base64.length(object.framesData)), 0);
            else if (object.framesData.length)
                message.framesData = object.framesData;
        if (object.frameData) {
            if (!Array.isArray(object.frameData))
                throw TypeError(".GamerNotifyPVPSyncS2C.frameData: array expected");
            message.frameData = [];
            for (var i = 0; i < object.frameData.length; ++i)
                if (typeof object.frameData[i] === "string")
                    $util.base64.decode(object.frameData[i], message.frameData[i] = $util.newBuffer($util.base64.length(object.frameData[i])), 0);
                else if (object.frameData[i].length)
                    message.frameData[i] = object.frameData[i];
        }
        if (object.index != null)
            message.index = object.index | 0;
        if (object.delta != null)
            message.delta = object.delta | 0;
        if (object.session != null)
            message.session = String(object.session);
        if (object.serverFrame != null)
            message.serverFrame = object.serverFrame | 0;
        return message;
    };
    GamerNotifyPVPSyncS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.frames = [];
            object.frameData = [];
        }
        if (options.defaults) {
            object.error = 0;
            object.maxFrameCount = 0;
            if (options.bytes === String)
                object.framesData = "";
            else {
                object.framesData = [];
                if (options.bytes !== Array)
                    object.framesData = $util.newBuffer(object.framesData);
            }
            object.index = 0;
            object.delta = 0;
            object.session = "";
            object.serverFrame = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.maxFrameCount != null && message.hasOwnProperty("maxFrameCount"))
            object.maxFrameCount = message.maxFrameCount;
        if (message.frames && message.frames.length) {
            object.frames = [];
            for (var j = 0; j < message.frames.length; ++j)
                object.frames[j] = $root.PVPFrame.toObject(message.frames[j], options);
        }
        if (message.framesData != null && message.hasOwnProperty("framesData"))
            object.framesData = options.bytes === String ? $util.base64.encode(message.framesData, 0, message.framesData.length) : options.bytes === Array ? Array.prototype.slice.call(message.framesData) : message.framesData;
        if (message.frameData && message.frameData.length) {
            object.frameData = [];
            for (var j = 0; j < message.frameData.length; ++j)
                object.frameData[j] = options.bytes === String ? $util.base64.encode(message.frameData[j], 0, message.frameData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.frameData[j]) : message.frameData[j];
        }
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.delta != null && message.hasOwnProperty("delta"))
            object.delta = message.delta;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        if (message.serverFrame != null && message.hasOwnProperty("serverFrame"))
            object.serverFrame = message.serverFrame;
        return object;
    };
    GamerNotifyPVPSyncS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyPVPSyncS2C;
})();
$root.GamerNotifyNewPVPResultS2C = (function() {
    function GamerNotifyNewPVPResultS2C(properties) {
        this.firstRewardList = [];
        this.baseRewardList = [];
        this.ItemRewardList = [];
        this.heroList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewPVPResultS2C.prototype.error = 0;
    GamerNotifyNewPVPResultS2C.prototype.battleStar = 0;
    GamerNotifyNewPVPResultS2C.prototype.costTime = 0;
    GamerNotifyNewPVPResultS2C.prototype.checkPointId = 0;
    GamerNotifyNewPVPResultS2C.prototype.result = 0;
    GamerNotifyNewPVPResultS2C.prototype.firstRewardList = $util.emptyArray;
    GamerNotifyNewPVPResultS2C.prototype.baseRewardList = $util.emptyArray;
    GamerNotifyNewPVPResultS2C.prototype.ItemRewardList = $util.emptyArray;
    GamerNotifyNewPVPResultS2C.prototype.heroList = $util.emptyArray;
    GamerNotifyNewPVPResultS2C.prototype.battleType = 0;
    GamerNotifyNewPVPResultS2C.prototype.ComboTime = 0;
    GamerNotifyNewPVPResultS2C.prototype.BaseScore = 0;
    GamerNotifyNewPVPResultS2C.prototype.StreakScore = 0;
    GamerNotifyNewPVPResultS2C.prototype.StrongEnemyScore = 0;
    GamerNotifyNewPVPResultS2C.create = function create(properties) {
        return new GamerNotifyNewPVPResultS2C(properties);
    };
    GamerNotifyNewPVPResultS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.battleStar != null && message.hasOwnProperty("battleStar"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.battleStar);
        if (message.costTime != null && message.hasOwnProperty("costTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.costTime);
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.checkPointId);
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.result);
        if (message.firstRewardList != null && message.firstRewardList.length)
            for (var i = 0; i < message.firstRewardList.length; ++i)
                $root.GameItem.encode(message.firstRewardList[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.baseRewardList != null && message.baseRewardList.length)
            for (var i = 0; i < message.baseRewardList.length; ++i)
                $root.GameItem.encode(message.baseRewardList[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.ItemRewardList != null && message.ItemRewardList.length)
            for (var i = 0; i < message.ItemRewardList.length; ++i)
                $root.GameItem.encode(message.ItemRewardList[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.heroList != null && message.heroList.length)
            for (var i = 0; i < message.heroList.length; ++i)
                $root.GamerHero.encode(message.heroList[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.battleType != null && message.hasOwnProperty("battleType"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.battleType);
        if (message.ComboTime != null && message.hasOwnProperty("ComboTime"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.ComboTime);
        if (message.BaseScore != null && message.hasOwnProperty("BaseScore"))
            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.BaseScore);
        if (message.StreakScore != null && message.hasOwnProperty("StreakScore"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.StreakScore);
        if (message.StrongEnemyScore != null && message.hasOwnProperty("StrongEnemyScore"))
            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.StrongEnemyScore);
        return writer;
    };
    GamerNotifyNewPVPResultS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewPVPResultS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewPVPResultS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.battleStar = reader.int32();
                break;
            case 3:
                message.costTime = reader.int32();
                break;
            case 4:
                message.checkPointId = reader.int32();
                break;
            case 5:
                message.result = reader.int32();
                break;
            case 6:
                if (!(message.firstRewardList && message.firstRewardList.length))
                    message.firstRewardList = [];
                message.firstRewardList.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            case 7:
                if (!(message.baseRewardList && message.baseRewardList.length))
                    message.baseRewardList = [];
                message.baseRewardList.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            case 8:
                if (!(message.ItemRewardList && message.ItemRewardList.length))
                    message.ItemRewardList = [];
                message.ItemRewardList.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            case 9:
                if (!(message.heroList && message.heroList.length))
                    message.heroList = [];
                message.heroList.push($root.GamerHero.decode(reader, reader.uint32()));
                break;
            case 10:
                message.battleType = reader.int32();
                break;
            case 11:
                message.ComboTime = reader.int32();
                break;
            case 12:
                message.BaseScore = reader.int32();
                break;
            case 13:
                message.StreakScore = reader.int32();
                break;
            case 14:
                message.StrongEnemyScore = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewPVPResultS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewPVPResultS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.battleStar != null && message.hasOwnProperty("battleStar"))
            if (!$util.isInteger(message.battleStar))
                return "battleStar: integer expected";
        if (message.costTime != null && message.hasOwnProperty("costTime"))
            if (!$util.isInteger(message.costTime))
                return "costTime: integer expected";
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            if (!$util.isInteger(message.checkPointId))
                return "checkPointId: integer expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        if (message.firstRewardList != null && message.hasOwnProperty("firstRewardList")) {
            if (!Array.isArray(message.firstRewardList))
                return "firstRewardList: array expected";
            for (var i = 0; i < message.firstRewardList.length; ++i) {
                var error = $root.GameItem.verify(message.firstRewardList[i]);
                if (error)
                    return "firstRewardList." + error;
            }
        }
        if (message.baseRewardList != null && message.hasOwnProperty("baseRewardList")) {
            if (!Array.isArray(message.baseRewardList))
                return "baseRewardList: array expected";
            for (var i = 0; i < message.baseRewardList.length; ++i) {
                var error = $root.GameItem.verify(message.baseRewardList[i]);
                if (error)
                    return "baseRewardList." + error;
            }
        }
        if (message.ItemRewardList != null && message.hasOwnProperty("ItemRewardList")) {
            if (!Array.isArray(message.ItemRewardList))
                return "ItemRewardList: array expected";
            for (var i = 0; i < message.ItemRewardList.length; ++i) {
                var error = $root.GameItem.verify(message.ItemRewardList[i]);
                if (error)
                    return "ItemRewardList." + error;
            }
        }
        if (message.heroList != null && message.hasOwnProperty("heroList")) {
            if (!Array.isArray(message.heroList))
                return "heroList: array expected";
            for (var i = 0; i < message.heroList.length; ++i) {
                var error = $root.GamerHero.verify(message.heroList[i]);
                if (error)
                    return "heroList." + error;
            }
        }
        if (message.battleType != null && message.hasOwnProperty("battleType"))
            switch (message.battleType) {
            default:
                return "battleType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
                break;
            }
        if (message.ComboTime != null && message.hasOwnProperty("ComboTime"))
            if (!$util.isInteger(message.ComboTime))
                return "ComboTime: integer expected";
        if (message.BaseScore != null && message.hasOwnProperty("BaseScore"))
            if (!$util.isInteger(message.BaseScore))
                return "BaseScore: integer expected";
        if (message.StreakScore != null && message.hasOwnProperty("StreakScore"))
            if (!$util.isInteger(message.StreakScore))
                return "StreakScore: integer expected";
        if (message.StrongEnemyScore != null && message.hasOwnProperty("StrongEnemyScore"))
            if (!$util.isInteger(message.StrongEnemyScore))
                return "StrongEnemyScore: integer expected";
        return null;
    };
    GamerNotifyNewPVPResultS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewPVPResultS2C)
            return object;
        var message = new $root.GamerNotifyNewPVPResultS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.battleStar != null)
            message.battleStar = object.battleStar | 0;
        if (object.costTime != null)
            message.costTime = object.costTime | 0;
        if (object.checkPointId != null)
            message.checkPointId = object.checkPointId | 0;
        switch (object.result) {
        case "Invalid":
        case 0:
            message.result = 0;
            break;
        case "TotalWin":
        case 1:
            message.result = 1;
            break;
        case "NarrowlyWin":
        case 2:
            message.result = 2;
            break;
        case "Draw":
        case 3:
            message.result = 3;
            break;
        case "NarrowlyLoss":
        case 4:
            message.result = 4;
            break;
        case "TotalLoss":
        case 5:
            message.result = 5;
            break;
        case "Exit":
        case 6:
            message.result = 6;
            break;
        }
        if (object.firstRewardList) {
            if (!Array.isArray(object.firstRewardList))
                throw TypeError(".GamerNotifyNewPVPResultS2C.firstRewardList: array expected");
            message.firstRewardList = [];
            for (var i = 0; i < object.firstRewardList.length; ++i) {
                if (typeof object.firstRewardList[i] !== "object")
                    throw TypeError(".GamerNotifyNewPVPResultS2C.firstRewardList: object expected");
                message.firstRewardList[i] = $root.GameItem.fromObject(object.firstRewardList[i]);
            }
        }
        if (object.baseRewardList) {
            if (!Array.isArray(object.baseRewardList))
                throw TypeError(".GamerNotifyNewPVPResultS2C.baseRewardList: array expected");
            message.baseRewardList = [];
            for (var i = 0; i < object.baseRewardList.length; ++i) {
                if (typeof object.baseRewardList[i] !== "object")
                    throw TypeError(".GamerNotifyNewPVPResultS2C.baseRewardList: object expected");
                message.baseRewardList[i] = $root.GameItem.fromObject(object.baseRewardList[i]);
            }
        }
        if (object.ItemRewardList) {
            if (!Array.isArray(object.ItemRewardList))
                throw TypeError(".GamerNotifyNewPVPResultS2C.ItemRewardList: array expected");
            message.ItemRewardList = [];
            for (var i = 0; i < object.ItemRewardList.length; ++i) {
                if (typeof object.ItemRewardList[i] !== "object")
                    throw TypeError(".GamerNotifyNewPVPResultS2C.ItemRewardList: object expected");
                message.ItemRewardList[i] = $root.GameItem.fromObject(object.ItemRewardList[i]);
            }
        }
        if (object.heroList) {
            if (!Array.isArray(object.heroList))
                throw TypeError(".GamerNotifyNewPVPResultS2C.heroList: array expected");
            message.heroList = [];
            for (var i = 0; i < object.heroList.length; ++i) {
                if (typeof object.heroList[i] !== "object")
                    throw TypeError(".GamerNotifyNewPVPResultS2C.heroList: object expected");
                message.heroList[i] = $root.GamerHero.fromObject(object.heroList[i]);
            }
        }
        switch (object.battleType) {
        case "MINVALID":
        case 0:
            message.battleType = 0;
            break;
        case "PVE_M1":
        case 1:
            message.battleType = 1;
            break;
        case "PVE_M2":
        case 2:
            message.battleType = 2;
            break;
        case "PVE_M3":
        case 3:
            message.battleType = 3;
            break;
        case "PVE_M4":
        case 4:
            message.battleType = 4;
            break;
        case "PVP_M1V1":
        case 100:
            message.battleType = 100;
            break;
        case "PVP_M2V2":
        case 101:
            message.battleType = 101;
            break;
        case "PVP_M3V3":
        case 102:
            message.battleType = 102;
            break;
        case "PVP_M4V4":
        case 103:
            message.battleType = 103;
            break;
        case "PVP_M5V5":
        case 104:
            message.battleType = 104;
            break;
        }
        if (object.ComboTime != null)
            message.ComboTime = object.ComboTime | 0;
        if (object.BaseScore != null)
            message.BaseScore = object.BaseScore | 0;
        if (object.StreakScore != null)
            message.StreakScore = object.StreakScore | 0;
        if (object.StrongEnemyScore != null)
            message.StrongEnemyScore = object.StrongEnemyScore | 0;
        return message;
    };
    GamerNotifyNewPVPResultS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.firstRewardList = [];
            object.baseRewardList = [];
            object.ItemRewardList = [];
            object.heroList = [];
        }
        if (options.defaults) {
            object.error = 0;
            object.battleStar = 0;
            object.costTime = 0;
            object.checkPointId = 0;
            object.result = options.enums === String ? "Invalid" : 0;
            object.battleType = options.enums === String ? "MINVALID" : 0;
            object.ComboTime = 0;
            object.BaseScore = 0;
            object.StreakScore = 0;
            object.StrongEnemyScore = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.battleStar != null && message.hasOwnProperty("battleStar"))
            object.battleStar = message.battleStar;
        if (message.costTime != null && message.hasOwnProperty("costTime"))
            object.costTime = message.costTime;
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            object.checkPointId = message.checkPointId;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.BattleResultType[message.result] : message.result;
        if (message.firstRewardList && message.firstRewardList.length) {
            object.firstRewardList = [];
            for (var j = 0; j < message.firstRewardList.length; ++j)
                object.firstRewardList[j] = $root.GameItem.toObject(message.firstRewardList[j], options);
        }
        if (message.baseRewardList && message.baseRewardList.length) {
            object.baseRewardList = [];
            for (var j = 0; j < message.baseRewardList.length; ++j)
                object.baseRewardList[j] = $root.GameItem.toObject(message.baseRewardList[j], options);
        }
        if (message.ItemRewardList && message.ItemRewardList.length) {
            object.ItemRewardList = [];
            for (var j = 0; j < message.ItemRewardList.length; ++j)
                object.ItemRewardList[j] = $root.GameItem.toObject(message.ItemRewardList[j], options);
        }
        if (message.heroList && message.heroList.length) {
            object.heroList = [];
            for (var j = 0; j < message.heroList.length; ++j)
                object.heroList[j] = $root.GamerHero.toObject(message.heroList[j], options);
        }
        if (message.battleType != null && message.hasOwnProperty("battleType"))
            object.battleType = options.enums === String ? $root.PVPType[message.battleType] : message.battleType;
        if (message.ComboTime != null && message.hasOwnProperty("ComboTime"))
            object.ComboTime = message.ComboTime;
        if (message.BaseScore != null && message.hasOwnProperty("BaseScore"))
            object.BaseScore = message.BaseScore;
        if (message.StreakScore != null && message.hasOwnProperty("StreakScore"))
            object.StreakScore = message.StreakScore;
        if (message.StrongEnemyScore != null && message.hasOwnProperty("StrongEnemyScore"))
            object.StrongEnemyScore = message.StrongEnemyScore;
        return object;
    };
    GamerNotifyNewPVPResultS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewPVPResultS2C;
})();
$root.GamerReliveC2S = (function() {
    function GamerReliveC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerReliveC2S.prototype.id = 0;
    GamerReliveC2S.prototype.times = 0;
    GamerReliveC2S.prototype.checkPointId = 0;
    GamerReliveC2S.create = function create(properties) {
        return new GamerReliveC2S(properties);
    };
    GamerReliveC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.times != null && message.hasOwnProperty("times"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.times);
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.checkPointId);
        return writer;
    };
    GamerReliveC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerReliveC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerReliveC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.times = reader.int32();
                break;
            case 3:
                message.checkPointId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerReliveC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerReliveC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.times != null && message.hasOwnProperty("times"))
            if (!$util.isInteger(message.times))
                return "times: integer expected";
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            if (!$util.isInteger(message.checkPointId))
                return "checkPointId: integer expected";
        return null;
    };
    GamerReliveC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerReliveC2S)
            return object;
        var message = new $root.GamerReliveC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.times != null)
            message.times = object.times | 0;
        if (object.checkPointId != null)
            message.checkPointId = object.checkPointId | 0;
        return message;
    };
    GamerReliveC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.times = 0;
            object.checkPointId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.times != null && message.hasOwnProperty("times"))
            object.times = message.times;
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            object.checkPointId = message.checkPointId;
        return object;
    };
    GamerReliveC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerReliveC2S;
})();
$root.GamerReliveS2C = (function() {
    function GamerReliveS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerReliveS2C.prototype.error = 0;
    GamerReliveS2C.create = function create(properties) {
        return new GamerReliveS2C(properties);
    };
    GamerReliveS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerReliveS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerReliveS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerReliveS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerReliveS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerReliveS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerReliveS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerReliveS2C)
            return object;
        var message = new $root.GamerReliveS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerReliveS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerReliveS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerReliveS2C;
})();
$root.GamerNotifyIconChangeS2C = (function() {
    function GamerNotifyIconChangeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyIconChangeS2C.prototype.error = 0;
    GamerNotifyIconChangeS2C.prototype.icon = 0;
    GamerNotifyIconChangeS2C.create = function create(properties) {
        return new GamerNotifyIconChangeS2C(properties);
    };
    GamerNotifyIconChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.icon != null && message.hasOwnProperty("icon"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.icon);
        return writer;
    };
    GamerNotifyIconChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyIconChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyIconChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.icon = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyIconChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyIconChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isInteger(message.icon))
                return "icon: integer expected";
        return null;
    };
    GamerNotifyIconChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyIconChangeS2C)
            return object;
        var message = new $root.GamerNotifyIconChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.icon != null)
            message.icon = object.icon | 0;
        return message;
    };
    GamerNotifyIconChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.icon = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        return object;
    };
    GamerNotifyIconChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyIconChangeS2C;
})();
$root.GamerNotifyDiamonChangeS2C = (function() {
    function GamerNotifyDiamonChangeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyDiamonChangeS2C.prototype.error = 0;
    GamerNotifyDiamonChangeS2C.prototype.diamon = 0;
    GamerNotifyDiamonChangeS2C.create = function create(properties) {
        return new GamerNotifyDiamonChangeS2C(properties);
    };
    GamerNotifyDiamonChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.diamon != null && message.hasOwnProperty("diamon"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.diamon);
        return writer;
    };
    GamerNotifyDiamonChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyDiamonChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyDiamonChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.diamon = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyDiamonChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyDiamonChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.diamon != null && message.hasOwnProperty("diamon"))
            if (!$util.isInteger(message.diamon))
                return "diamon: integer expected";
        return null;
    };
    GamerNotifyDiamonChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyDiamonChangeS2C)
            return object;
        var message = new $root.GamerNotifyDiamonChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.diamon != null)
            message.diamon = object.diamon | 0;
        return message;
    };
    GamerNotifyDiamonChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.diamon = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.diamon != null && message.hasOwnProperty("diamon"))
            object.diamon = message.diamon;
        return object;
    };
    GamerNotifyDiamonChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyDiamonChangeS2C;
})();
$root.GamerNotifyEnergyChangeS2C = (function() {
    function GamerNotifyEnergyChangeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyEnergyChangeS2C.prototype.error = 0;
    GamerNotifyEnergyChangeS2C.prototype.energy = 0;
    GamerNotifyEnergyChangeS2C.create = function create(properties) {
        return new GamerNotifyEnergyChangeS2C(properties);
    };
    GamerNotifyEnergyChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.energy != null && message.hasOwnProperty("energy"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.energy);
        return writer;
    };
    GamerNotifyEnergyChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyEnergyChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyEnergyChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.energy = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyEnergyChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyEnergyChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.energy != null && message.hasOwnProperty("energy"))
            if (!$util.isInteger(message.energy))
                return "energy: integer expected";
        return null;
    };
    GamerNotifyEnergyChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyEnergyChangeS2C)
            return object;
        var message = new $root.GamerNotifyEnergyChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.energy != null)
            message.energy = object.energy | 0;
        return message;
    };
    GamerNotifyEnergyChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.energy = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.energy != null && message.hasOwnProperty("energy"))
            object.energy = message.energy;
        return object;
    };
    GamerNotifyEnergyChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyEnergyChangeS2C;
})();
$root.GamerNotifyExpChangeS2C = (function() {
    function GamerNotifyExpChangeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyExpChangeS2C.prototype.error = 0;
    GamerNotifyExpChangeS2C.prototype.exp = 0;
    GamerNotifyExpChangeS2C.create = function create(properties) {
        return new GamerNotifyExpChangeS2C(properties);
    };
    GamerNotifyExpChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.exp != null && message.hasOwnProperty("exp"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.exp);
        return writer;
    };
    GamerNotifyExpChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyExpChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyExpChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.exp = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyExpChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyExpChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.exp != null && message.hasOwnProperty("exp"))
            if (!$util.isInteger(message.exp))
                return "exp: integer expected";
        return null;
    };
    GamerNotifyExpChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyExpChangeS2C)
            return object;
        var message = new $root.GamerNotifyExpChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.exp != null)
            message.exp = object.exp | 0;
        return message;
    };
    GamerNotifyExpChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.exp = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.exp != null && message.hasOwnProperty("exp"))
            object.exp = message.exp;
        return object;
    };
    GamerNotifyExpChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyExpChangeS2C;
})();
$root.GamerGetRealTimeRankC2S = (function() {
    function GamerGetRealTimeRankC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetRealTimeRankC2S.prototype.id = 0;
    GamerGetRealTimeRankC2S.create = function create(properties) {
        return new GamerGetRealTimeRankC2S(properties);
    };
    GamerGetRealTimeRankC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerGetRealTimeRankC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetRealTimeRankC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetRealTimeRankC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetRealTimeRankC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetRealTimeRankC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerGetRealTimeRankC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetRealTimeRankC2S)
            return object;
        var message = new $root.GamerGetRealTimeRankC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerGetRealTimeRankC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerGetRealTimeRankC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetRealTimeRankC2S;
})();
$root.GamerGetRealTimeRankS2C = (function() {
    function GamerGetRealTimeRankS2C(properties) {
        this.ranks = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetRealTimeRankS2C.prototype.error = 0;
    GamerGetRealTimeRankS2C.prototype.ranks = $util.emptyArray;
    GamerGetRealTimeRankS2C.create = function create(properties) {
        return new GamerGetRealTimeRankS2C(properties);
    };
    GamerGetRealTimeRankS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.ranks != null && message.ranks.length)
            for (var i = 0; i < message.ranks.length; ++i)
                $root.RankLength.encode(message.ranks[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerGetRealTimeRankS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetRealTimeRankS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetRealTimeRankS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.ranks && message.ranks.length))
                    message.ranks = [];
                message.ranks.push($root.RankLength.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetRealTimeRankS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetRealTimeRankS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.ranks != null && message.hasOwnProperty("ranks")) {
            if (!Array.isArray(message.ranks))
                return "ranks: array expected";
            for (var i = 0; i < message.ranks.length; ++i) {
                var error = $root.RankLength.verify(message.ranks[i]);
                if (error)
                    return "ranks." + error;
            }
        }
        return null;
    };
    GamerGetRealTimeRankS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetRealTimeRankS2C)
            return object;
        var message = new $root.GamerGetRealTimeRankS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.ranks) {
            if (!Array.isArray(object.ranks))
                throw TypeError(".GamerGetRealTimeRankS2C.ranks: array expected");
            message.ranks = [];
            for (var i = 0; i < object.ranks.length; ++i) {
                if (typeof object.ranks[i] !== "object")
                    throw TypeError(".GamerGetRealTimeRankS2C.ranks: object expected");
                message.ranks[i] = $root.RankLength.fromObject(object.ranks[i]);
            }
        }
        return message;
    };
    GamerGetRealTimeRankS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.ranks = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.ranks && message.ranks.length) {
            object.ranks = [];
            for (var j = 0; j < message.ranks.length; ++j)
                object.ranks[j] = $root.RankLength.toObject(message.ranks[j], options);
        }
        return object;
    };
    GamerGetRealTimeRankS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetRealTimeRankS2C;
})();
$root.GamerCheckPVPBattleC2S = (function() {
    function GamerCheckPVPBattleC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerCheckPVPBattleC2S.prototype.id = 0;
    GamerCheckPVPBattleC2S.prototype.session = "";
    GamerCheckPVPBattleC2S.create = function create(properties) {
        return new GamerCheckPVPBattleC2S(properties);
    };
    GamerCheckPVPBattleC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.session);
        return writer;
    };
    GamerCheckPVPBattleC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerCheckPVPBattleC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerCheckPVPBattleC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.session = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerCheckPVPBattleC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerCheckPVPBattleC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        return null;
    };
    GamerCheckPVPBattleC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerCheckPVPBattleC2S)
            return object;
        var message = new $root.GamerCheckPVPBattleC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.session != null)
            message.session = String(object.session);
        return message;
    };
    GamerCheckPVPBattleC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.session = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        return object;
    };
    GamerCheckPVPBattleC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerCheckPVPBattleC2S;
})();
$root.GamerCheckPVPBattleS2C = (function() {
    function GamerCheckPVPBattleS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerCheckPVPBattleS2C.prototype.error = 0;
    GamerCheckPVPBattleS2C.prototype.matchInfo = null;
    GamerCheckPVPBattleS2C.create = function create(properties) {
        return new GamerCheckPVPBattleS2C(properties);
    };
    GamerCheckPVPBattleS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            $root.MatchInfo.encode(message.matchInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerCheckPVPBattleS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerCheckPVPBattleS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerCheckPVPBattleS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.matchInfo = $root.MatchInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerCheckPVPBattleS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerCheckPVPBattleS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo")) {
            var error = $root.MatchInfo.verify(message.matchInfo);
            if (error)
                return "matchInfo." + error;
        }
        return null;
    };
    GamerCheckPVPBattleS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerCheckPVPBattleS2C)
            return object;
        var message = new $root.GamerCheckPVPBattleS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.matchInfo != null) {
            if (typeof object.matchInfo !== "object")
                throw TypeError(".GamerCheckPVPBattleS2C.matchInfo: object expected");
            message.matchInfo = $root.MatchInfo.fromObject(object.matchInfo);
        }
        return message;
    };
    GamerCheckPVPBattleS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.matchInfo = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            object.matchInfo = $root.MatchInfo.toObject(message.matchInfo, options);
        return object;
    };
    GamerCheckPVPBattleS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerCheckPVPBattleS2C;
})();
$root.GamerUploadWXInfoC2S = (function() {
    function GamerUploadWXInfoC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUploadWXInfoC2S.prototype.id = 0;
    GamerUploadWXInfoC2S.prototype.wxInfo = null;
    GamerUploadWXInfoC2S.create = function create(properties) {
        return new GamerUploadWXInfoC2S(properties);
    };
    GamerUploadWXInfoC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.wxInfo != null && message.hasOwnProperty("wxInfo"))
            $root.WXInfo.encode(message.wxInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerUploadWXInfoC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUploadWXInfoC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUploadWXInfoC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.wxInfo = $root.WXInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUploadWXInfoC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUploadWXInfoC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.wxInfo != null && message.hasOwnProperty("wxInfo")) {
            var error = $root.WXInfo.verify(message.wxInfo);
            if (error)
                return "wxInfo." + error;
        }
        return null;
    };
    GamerUploadWXInfoC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUploadWXInfoC2S)
            return object;
        var message = new $root.GamerUploadWXInfoC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.wxInfo != null) {
            if (typeof object.wxInfo !== "object")
                throw TypeError(".GamerUploadWXInfoC2S.wxInfo: object expected");
            message.wxInfo = $root.WXInfo.fromObject(object.wxInfo);
        }
        return message;
    };
    GamerUploadWXInfoC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.wxInfo = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.wxInfo != null && message.hasOwnProperty("wxInfo"))
            object.wxInfo = $root.WXInfo.toObject(message.wxInfo, options);
        return object;
    };
    GamerUploadWXInfoC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUploadWXInfoC2S;
})();
$root.GamerUploadWXInfoS2C = (function() {
    function GamerUploadWXInfoS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUploadWXInfoS2C.prototype.error = 0;
    GamerUploadWXInfoS2C.create = function create(properties) {
        return new GamerUploadWXInfoS2C(properties);
    };
    GamerUploadWXInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerUploadWXInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUploadWXInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUploadWXInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUploadWXInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUploadWXInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerUploadWXInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUploadWXInfoS2C)
            return object;
        var message = new $root.GamerUploadWXInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerUploadWXInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerUploadWXInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUploadWXInfoS2C;
})();
$root.GamerGetNoviceGuideC2S = (function() {
    function GamerGetNoviceGuideC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetNoviceGuideC2S.prototype.id = 0;
    GamerGetNoviceGuideC2S.create = function create(properties) {
        return new GamerGetNoviceGuideC2S(properties);
    };
    GamerGetNoviceGuideC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerGetNoviceGuideC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetNoviceGuideC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetNoviceGuideC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetNoviceGuideC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetNoviceGuideC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerGetNoviceGuideC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetNoviceGuideC2S)
            return object;
        var message = new $root.GamerGetNoviceGuideC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerGetNoviceGuideC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerGetNoviceGuideC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetNoviceGuideC2S;
})();
$root.GamerGetNoviceGuideS2C = (function() {
    function GamerGetNoviceGuideS2C(properties) {
        this.noviceGuideList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetNoviceGuideS2C.prototype.error = 0;
    GamerGetNoviceGuideS2C.prototype.noviceGuideList = $util.emptyArray;
    GamerGetNoviceGuideS2C.create = function create(properties) {
        return new GamerGetNoviceGuideS2C(properties);
    };
    GamerGetNoviceGuideS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.noviceGuideList != null && message.noviceGuideList.length)
            for (var i = 0; i < message.noviceGuideList.length; ++i)
                $root.Guide.encode(message.noviceGuideList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerGetNoviceGuideS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetNoviceGuideS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetNoviceGuideS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.noviceGuideList && message.noviceGuideList.length))
                    message.noviceGuideList = [];
                message.noviceGuideList.push($root.Guide.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetNoviceGuideS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetNoviceGuideS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.noviceGuideList != null && message.hasOwnProperty("noviceGuideList")) {
            if (!Array.isArray(message.noviceGuideList))
                return "noviceGuideList: array expected";
            for (var i = 0; i < message.noviceGuideList.length; ++i) {
                var error = $root.Guide.verify(message.noviceGuideList[i]);
                if (error)
                    return "noviceGuideList." + error;
            }
        }
        return null;
    };
    GamerGetNoviceGuideS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetNoviceGuideS2C)
            return object;
        var message = new $root.GamerGetNoviceGuideS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.noviceGuideList) {
            if (!Array.isArray(object.noviceGuideList))
                throw TypeError(".GamerGetNoviceGuideS2C.noviceGuideList: array expected");
            message.noviceGuideList = [];
            for (var i = 0; i < object.noviceGuideList.length; ++i) {
                if (typeof object.noviceGuideList[i] !== "object")
                    throw TypeError(".GamerGetNoviceGuideS2C.noviceGuideList: object expected");
                message.noviceGuideList[i] = $root.Guide.fromObject(object.noviceGuideList[i]);
            }
        }
        return message;
    };
    GamerGetNoviceGuideS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.noviceGuideList = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.noviceGuideList && message.noviceGuideList.length) {
            object.noviceGuideList = [];
            for (var j = 0; j < message.noviceGuideList.length; ++j)
                object.noviceGuideList[j] = $root.Guide.toObject(message.noviceGuideList[j], options);
        }
        return object;
    };
    GamerGetNoviceGuideS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetNoviceGuideS2C;
})();
$root.GamerNoviceGuideChangeC2S = (function() {
    function GamerNoviceGuideChangeC2S(properties) {
        this.noviceGuideList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNoviceGuideChangeC2S.prototype.id = 0;
    GamerNoviceGuideChangeC2S.prototype.noviceGuideList = $util.emptyArray;
    GamerNoviceGuideChangeC2S.create = function create(properties) {
        return new GamerNoviceGuideChangeC2S(properties);
    };
    GamerNoviceGuideChangeC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.noviceGuideList != null && message.noviceGuideList.length)
            for (var i = 0; i < message.noviceGuideList.length; ++i)
                $root.Guide.encode(message.noviceGuideList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNoviceGuideChangeC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNoviceGuideChangeC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNoviceGuideChangeC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                if (!(message.noviceGuideList && message.noviceGuideList.length))
                    message.noviceGuideList = [];
                message.noviceGuideList.push($root.Guide.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNoviceGuideChangeC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNoviceGuideChangeC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.noviceGuideList != null && message.hasOwnProperty("noviceGuideList")) {
            if (!Array.isArray(message.noviceGuideList))
                return "noviceGuideList: array expected";
            for (var i = 0; i < message.noviceGuideList.length; ++i) {
                var error = $root.Guide.verify(message.noviceGuideList[i]);
                if (error)
                    return "noviceGuideList." + error;
            }
        }
        return null;
    };
    GamerNoviceGuideChangeC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNoviceGuideChangeC2S)
            return object;
        var message = new $root.GamerNoviceGuideChangeC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.noviceGuideList) {
            if (!Array.isArray(object.noviceGuideList))
                throw TypeError(".GamerNoviceGuideChangeC2S.noviceGuideList: array expected");
            message.noviceGuideList = [];
            for (var i = 0; i < object.noviceGuideList.length; ++i) {
                if (typeof object.noviceGuideList[i] !== "object")
                    throw TypeError(".GamerNoviceGuideChangeC2S.noviceGuideList: object expected");
                message.noviceGuideList[i] = $root.Guide.fromObject(object.noviceGuideList[i]);
            }
        }
        return message;
    };
    GamerNoviceGuideChangeC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.noviceGuideList = [];
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.noviceGuideList && message.noviceGuideList.length) {
            object.noviceGuideList = [];
            for (var j = 0; j < message.noviceGuideList.length; ++j)
                object.noviceGuideList[j] = $root.Guide.toObject(message.noviceGuideList[j], options);
        }
        return object;
    };
    GamerNoviceGuideChangeC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNoviceGuideChangeC2S;
})();
$root.GamerNoviceGuideChangeS2C = (function() {
    function GamerNoviceGuideChangeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNoviceGuideChangeS2C.prototype.error = 0;
    GamerNoviceGuideChangeS2C.create = function create(properties) {
        return new GamerNoviceGuideChangeS2C(properties);
    };
    GamerNoviceGuideChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerNoviceGuideChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNoviceGuideChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNoviceGuideChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNoviceGuideChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNoviceGuideChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerNoviceGuideChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNoviceGuideChangeS2C)
            return object;
        var message = new $root.GamerNoviceGuideChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerNoviceGuideChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerNoviceGuideChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNoviceGuideChangeS2C;
})();
$root.GamerMatchC2S = (function() {
    function GamerMatchC2S(properties) {
        this.heroList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerMatchC2S.prototype.id = 0;
    GamerMatchC2S.prototype.type = 0;
    GamerMatchC2S.prototype.heroId = 0;
    GamerMatchC2S.prototype.teamId = 0;
    GamerMatchC2S.prototype.checkPointId = 0;
    GamerMatchC2S.prototype.danInfo = null;
    GamerMatchC2S.prototype.heroGroupId = 0;
    GamerMatchC2S.prototype.heroList = $util.emptyArray;
    GamerMatchC2S.prototype.secretLand = null;
    GamerMatchC2S.create = function create(properties) {
        return new GamerMatchC2S(properties);
    };
    GamerMatchC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.heroId);
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.teamId);
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.checkPointId);
        if (message.danInfo != null && message.hasOwnProperty("danInfo"))
            $root.DanInfo.encode(message.danInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.heroGroupId);
        if (message.heroList != null && message.heroList.length)
            for (var i = 0; i < message.heroList.length; ++i)
                $root.GamerHero.encode(message.heroList[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            $root.GamerSecretLand.encode(message.secretLand, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        return writer;
    };
    GamerMatchC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerMatchC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerMatchC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.heroId = reader.int32();
                break;
            case 4:
                message.teamId = reader.uint32();
                break;
            case 5:
                message.checkPointId = reader.int32();
                break;
            case 6:
                message.danInfo = $root.DanInfo.decode(reader, reader.uint32());
                break;
            case 7:
                message.heroGroupId = reader.int32();
                break;
            case 8:
                if (!(message.heroList && message.heroList.length))
                    message.heroList = [];
                message.heroList.push($root.GamerHero.decode(reader, reader.uint32()));
                break;
            case 9:
                message.secretLand = $root.GamerSecretLand.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerMatchC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerMatchC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
                break;
            }
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            if (!$util.isInteger(message.teamId))
                return "teamId: integer expected";
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            if (!$util.isInteger(message.checkPointId))
                return "checkPointId: integer expected";
        if (message.danInfo != null && message.hasOwnProperty("danInfo")) {
            var error = $root.DanInfo.verify(message.danInfo);
            if (error)
                return "danInfo." + error;
        }
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            if (!$util.isInteger(message.heroGroupId))
                return "heroGroupId: integer expected";
        if (message.heroList != null && message.hasOwnProperty("heroList")) {
            if (!Array.isArray(message.heroList))
                return "heroList: array expected";
            for (var i = 0; i < message.heroList.length; ++i) {
                var error = $root.GamerHero.verify(message.heroList[i]);
                if (error)
                    return "heroList." + error;
            }
        }
        if (message.secretLand != null && message.hasOwnProperty("secretLand")) {
            var error = $root.GamerSecretLand.verify(message.secretLand);
            if (error)
                return "secretLand." + error;
        }
        return null;
    };
    GamerMatchC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerMatchC2S)
            return object;
        var message = new $root.GamerMatchC2S();
        if (object.id != null)
            message.id = object.id | 0;
        switch (object.type) {
        case "MINVALID":
        case 0:
            message.type = 0;
            break;
        case "PVE_M1":
        case 1:
            message.type = 1;
            break;
        case "PVE_M2":
        case 2:
            message.type = 2;
            break;
        case "PVE_M3":
        case 3:
            message.type = 3;
            break;
        case "PVE_M4":
        case 4:
            message.type = 4;
            break;
        case "PVP_M1V1":
        case 100:
            message.type = 100;
            break;
        case "PVP_M2V2":
        case 101:
            message.type = 101;
            break;
        case "PVP_M3V3":
        case 102:
            message.type = 102;
            break;
        case "PVP_M4V4":
        case 103:
            message.type = 103;
            break;
        case "PVP_M5V5":
        case 104:
            message.type = 104;
            break;
        }
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.teamId != null)
            message.teamId = object.teamId >>> 0;
        if (object.checkPointId != null)
            message.checkPointId = object.checkPointId | 0;
        if (object.danInfo != null) {
            if (typeof object.danInfo !== "object")
                throw TypeError(".GamerMatchC2S.danInfo: object expected");
            message.danInfo = $root.DanInfo.fromObject(object.danInfo);
        }
        if (object.heroGroupId != null)
            message.heroGroupId = object.heroGroupId | 0;
        if (object.heroList) {
            if (!Array.isArray(object.heroList))
                throw TypeError(".GamerMatchC2S.heroList: array expected");
            message.heroList = [];
            for (var i = 0; i < object.heroList.length; ++i) {
                if (typeof object.heroList[i] !== "object")
                    throw TypeError(".GamerMatchC2S.heroList: object expected");
                message.heroList[i] = $root.GamerHero.fromObject(object.heroList[i]);
            }
        }
        if (object.secretLand != null) {
            if (typeof object.secretLand !== "object")
                throw TypeError(".GamerMatchC2S.secretLand: object expected");
            message.secretLand = $root.GamerSecretLand.fromObject(object.secretLand);
        }
        return message;
    };
    GamerMatchC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.heroList = [];
        if (options.defaults) {
            object.id = 0;
            object.type = options.enums === String ? "MINVALID" : 0;
            object.heroId = 0;
            object.teamId = 0;
            object.checkPointId = 0;
            object.danInfo = null;
            object.heroGroupId = 0;
            object.secretLand = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.PVPType[message.type] : message.type;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            object.teamId = message.teamId;
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            object.checkPointId = message.checkPointId;
        if (message.danInfo != null && message.hasOwnProperty("danInfo"))
            object.danInfo = $root.DanInfo.toObject(message.danInfo, options);
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            object.heroGroupId = message.heroGroupId;
        if (message.heroList && message.heroList.length) {
            object.heroList = [];
            for (var j = 0; j < message.heroList.length; ++j)
                object.heroList[j] = $root.GamerHero.toObject(message.heroList[j], options);
        }
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            object.secretLand = $root.GamerSecretLand.toObject(message.secretLand, options);
        return object;
    };
    GamerMatchC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerMatchC2S;
})();
$root.GamerMatchS2C = (function() {
    function GamerMatchS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerMatchS2C.prototype.error = 0;
    GamerMatchS2C.create = function create(properties) {
        return new GamerMatchS2C(properties);
    };
    GamerMatchS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerMatchS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerMatchS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerMatchS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerMatchS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerMatchS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerMatchS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerMatchS2C)
            return object;
        var message = new $root.GamerMatchS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerMatchS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerMatchS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerMatchS2C;
})();
$root.GamerCancelMatchC2S = (function() {
    function GamerCancelMatchC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerCancelMatchC2S.prototype.id = 0;
    GamerCancelMatchC2S.create = function create(properties) {
        return new GamerCancelMatchC2S(properties);
    };
    GamerCancelMatchC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerCancelMatchC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerCancelMatchC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerCancelMatchC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerCancelMatchC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerCancelMatchC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerCancelMatchC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerCancelMatchC2S)
            return object;
        var message = new $root.GamerCancelMatchC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerCancelMatchC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerCancelMatchC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerCancelMatchC2S;
})();
$root.GamerCancelMatchS2C = (function() {
    function GamerCancelMatchS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerCancelMatchS2C.prototype.error = 0;
    GamerCancelMatchS2C.create = function create(properties) {
        return new GamerCancelMatchS2C(properties);
    };
    GamerCancelMatchS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerCancelMatchS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerCancelMatchS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerCancelMatchS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerCancelMatchS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerCancelMatchS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerCancelMatchS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerCancelMatchS2C)
            return object;
        var message = new $root.GamerCancelMatchS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerCancelMatchS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerCancelMatchS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerCancelMatchS2C;
})();
$root.GamerNotifyMatchInfoS2C = (function() {
    function GamerNotifyMatchInfoS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyMatchInfoS2C.prototype.error = 0;
    GamerNotifyMatchInfoS2C.prototype.matchInfo = null;
    GamerNotifyMatchInfoS2C.prototype.reconn = false;
    GamerNotifyMatchInfoS2C.create = function create(properties) {
        return new GamerNotifyMatchInfoS2C(properties);
    };
    GamerNotifyMatchInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            $root.MatchInfo.encode(message.matchInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.reconn);
        return writer;
    };
    GamerNotifyMatchInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyMatchInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyMatchInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.matchInfo = $root.MatchInfo.decode(reader, reader.uint32());
                break;
            case 3:
                message.reconn = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyMatchInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyMatchInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo")) {
            var error = $root.MatchInfo.verify(message.matchInfo);
            if (error)
                return "matchInfo." + error;
        }
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            if (typeof message.reconn !== "boolean")
                return "reconn: boolean expected";
        return null;
    };
    GamerNotifyMatchInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyMatchInfoS2C)
            return object;
        var message = new $root.GamerNotifyMatchInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.matchInfo != null) {
            if (typeof object.matchInfo !== "object")
                throw TypeError(".GamerNotifyMatchInfoS2C.matchInfo: object expected");
            message.matchInfo = $root.MatchInfo.fromObject(object.matchInfo);
        }
        if (object.reconn != null)
            message.reconn = Boolean(object.reconn);
        return message;
    };
    GamerNotifyMatchInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.matchInfo = null;
            object.reconn = false;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            object.matchInfo = $root.MatchInfo.toObject(message.matchInfo, options);
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            object.reconn = message.reconn;
        return object;
    };
    GamerNotifyMatchInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyMatchInfoS2C;
})();
$root.GamerGetRewardC2S = (function() {
    function GamerGetRewardC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetRewardC2S.prototype.id = 0;
    GamerGetRewardC2S.prototype.type = 0;
    GamerGetRewardC2S.create = function create(properties) {
        return new GamerGetRewardC2S(properties);
    };
    GamerGetRewardC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        return writer;
    };
    GamerGetRewardC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetRewardC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetRewardC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetRewardC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetRewardC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        return null;
    };
    GamerGetRewardC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetRewardC2S)
            return object;
        var message = new $root.GamerGetRewardC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.type != null)
            message.type = object.type | 0;
        return message;
    };
    GamerGetRewardC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.type = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        return object;
    };
    GamerGetRewardC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetRewardC2S;
})();
$root.GamerGetRewardS2C = (function() {
    function GamerGetRewardS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetRewardS2C.prototype.error = 0;
    GamerGetRewardS2C.create = function create(properties) {
        return new GamerGetRewardS2C(properties);
    };
    GamerGetRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerGetRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerGetRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetRewardS2C)
            return object;
        var message = new $root.GamerGetRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerGetRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerGetRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetRewardS2C;
})();
$root.GamerUseIconC2S = (function() {
    function GamerUseIconC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUseIconC2S.prototype.id = 0;
    GamerUseIconC2S.prototype.type = 0;
    GamerUseIconC2S.prototype.count = 0;
    GamerUseIconC2S.prototype.session = "";
    GamerUseIconC2S.create = function create(properties) {
        return new GamerUseIconC2S(properties);
    };
    GamerUseIconC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.count != null && message.hasOwnProperty("count"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.count);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.session);
        return writer;
    };
    GamerUseIconC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUseIconC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUseIconC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.count = reader.int32();
                break;
            case 4:
                message.session = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUseIconC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUseIconC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        if (message.count != null && message.hasOwnProperty("count"))
            if (!$util.isInteger(message.count))
                return "count: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        return null;
    };
    GamerUseIconC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUseIconC2S)
            return object;
        var message = new $root.GamerUseIconC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.type != null)
            message.type = object.type | 0;
        if (object.count != null)
            message.count = object.count | 0;
        if (object.session != null)
            message.session = String(object.session);
        return message;
    };
    GamerUseIconC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.type = 0;
            object.count = 0;
            object.session = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.count != null && message.hasOwnProperty("count"))
            object.count = message.count;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        return object;
    };
    GamerUseIconC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUseIconC2S;
})();
$root.GamerUseIconS2C = (function() {
    function GamerUseIconS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUseIconS2C.prototype.error = 0;
    GamerUseIconS2C.create = function create(properties) {
        return new GamerUseIconS2C(properties);
    };
    GamerUseIconS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerUseIconS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUseIconS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUseIconS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUseIconS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUseIconS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerUseIconS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUseIconS2C)
            return object;
        var message = new $root.GamerUseIconS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerUseIconS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerUseIconS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUseIconS2C;
})();
$root.GamerNotifyGashaponInfoS2C = (function() {
    function GamerNotifyGashaponInfoS2C(properties) {
        this.infos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyGashaponInfoS2C.prototype.error = 0;
    GamerNotifyGashaponInfoS2C.prototype.infos = $util.emptyArray;
    GamerNotifyGashaponInfoS2C.create = function create(properties) {
        return new GamerNotifyGashaponInfoS2C(properties);
    };
    GamerNotifyGashaponInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.infos != null && message.infos.length)
            for (var i = 0; i < message.infos.length; ++i)
                $root.Gashapon.encode(message.infos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyGashaponInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyGashaponInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyGashaponInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.infos && message.infos.length))
                    message.infos = [];
                message.infos.push($root.Gashapon.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyGashaponInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyGashaponInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.infos != null && message.hasOwnProperty("infos")) {
            if (!Array.isArray(message.infos))
                return "infos: array expected";
            for (var i = 0; i < message.infos.length; ++i) {
                var error = $root.Gashapon.verify(message.infos[i]);
                if (error)
                    return "infos." + error;
            }
        }
        return null;
    };
    GamerNotifyGashaponInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyGashaponInfoS2C)
            return object;
        var message = new $root.GamerNotifyGashaponInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.infos) {
            if (!Array.isArray(object.infos))
                throw TypeError(".GamerNotifyGashaponInfoS2C.infos: array expected");
            message.infos = [];
            for (var i = 0; i < object.infos.length; ++i) {
                if (typeof object.infos[i] !== "object")
                    throw TypeError(".GamerNotifyGashaponInfoS2C.infos: object expected");
                message.infos[i] = $root.Gashapon.fromObject(object.infos[i]);
            }
        }
        return message;
    };
    GamerNotifyGashaponInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.infos = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.infos && message.infos.length) {
            object.infos = [];
            for (var j = 0; j < message.infos.length; ++j)
                object.infos[j] = $root.Gashapon.toObject(message.infos[j], options);
        }
        return object;
    };
    GamerNotifyGashaponInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyGashaponInfoS2C;
})();
$root.GamerExtractGashaponC2S = (function() {
    function GamerExtractGashaponC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerExtractGashaponC2S.prototype.id = 0;
    GamerExtractGashaponC2S.prototype.gashaponId = 0;
    GamerExtractGashaponC2S.create = function create(properties) {
        return new GamerExtractGashaponC2S(properties);
    };
    GamerExtractGashaponC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gashaponId);
        return writer;
    };
    GamerExtractGashaponC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerExtractGashaponC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerExtractGashaponC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.gashaponId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerExtractGashaponC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerExtractGashaponC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            if (!$util.isInteger(message.gashaponId))
                return "gashaponId: integer expected";
        return null;
    };
    GamerExtractGashaponC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerExtractGashaponC2S)
            return object;
        var message = new $root.GamerExtractGashaponC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.gashaponId != null)
            message.gashaponId = object.gashaponId | 0;
        return message;
    };
    GamerExtractGashaponC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.gashaponId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            object.gashaponId = message.gashaponId;
        return object;
    };
    GamerExtractGashaponC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerExtractGashaponC2S;
})();
$root.GamerExtractGashaponS2C = (function() {
    function GamerExtractGashaponS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerExtractGashaponS2C.prototype.error = 0;
    GamerExtractGashaponS2C.prototype.gashaponId = 0;
    GamerExtractGashaponS2C.prototype.items = $util.emptyArray;
    GamerExtractGashaponS2C.prototype.lastTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerExtractGashaponS2C.prototype.todayExtractNum = 0;
    GamerExtractGashaponS2C.create = function create(properties) {
        return new GamerExtractGashaponS2C(properties);
    };
    GamerExtractGashaponS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gashaponId);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.lastTime != null && message.hasOwnProperty("lastTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.lastTime);
        if (message.todayExtractNum != null && message.hasOwnProperty("todayExtractNum"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.todayExtractNum);
        return writer;
    };
    GamerExtractGashaponS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerExtractGashaponS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerExtractGashaponS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.gashaponId = reader.int32();
                break;
            case 3:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            case 4:
                message.lastTime = reader.int64();
                break;
            case 5:
                message.todayExtractNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerExtractGashaponS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerExtractGashaponS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            if (!$util.isInteger(message.gashaponId))
                return "gashaponId: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        if (message.lastTime != null && message.hasOwnProperty("lastTime"))
            if (!$util.isInteger(message.lastTime) && !(message.lastTime && $util.isInteger(message.lastTime.low) && $util.isInteger(message.lastTime.high)))
                return "lastTime: integer|Long expected";
        if (message.todayExtractNum != null && message.hasOwnProperty("todayExtractNum"))
            if (!$util.isInteger(message.todayExtractNum))
                return "todayExtractNum: integer expected";
        return null;
    };
    GamerExtractGashaponS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerExtractGashaponS2C)
            return object;
        var message = new $root.GamerExtractGashaponS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.gashaponId != null)
            message.gashaponId = object.gashaponId | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerExtractGashaponS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerExtractGashaponS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        if (object.lastTime != null)
            if ($util.Long)
                (message.lastTime = $util.Long.fromValue(object.lastTime)).unsigned = false;
            else if (typeof object.lastTime === "string")
                message.lastTime = parseInt(object.lastTime, 10);
            else if (typeof object.lastTime === "number")
                message.lastTime = object.lastTime;
            else if (typeof object.lastTime === "object")
                message.lastTime = new $util.LongBits(object.lastTime.low >>> 0, object.lastTime.high >>> 0).toNumber();
        if (object.todayExtractNum != null)
            message.todayExtractNum = object.todayExtractNum | 0;
        return message;
    };
    GamerExtractGashaponS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults) {
            object.error = 0;
            object.gashaponId = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastTime = options.longs === String ? "0" : 0;
            object.todayExtractNum = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            object.gashaponId = message.gashaponId;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        if (message.lastTime != null && message.hasOwnProperty("lastTime"))
            if (typeof message.lastTime === "number")
                object.lastTime = options.longs === String ? String(message.lastTime) : message.lastTime;
            else
                object.lastTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastTime) : options.longs === Number ? new $util.LongBits(message.lastTime.low >>> 0, message.lastTime.high >>> 0).toNumber() : message.lastTime;
        if (message.todayExtractNum != null && message.hasOwnProperty("todayExtractNum"))
            object.todayExtractNum = message.todayExtractNum;
        return object;
    };
    GamerExtractGashaponS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerExtractGashaponS2C;
})();
$root.GamerGetGashaponPreviewC2S = (function() {
    function GamerGetGashaponPreviewC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetGashaponPreviewC2S.prototype.id = 0;
    GamerGetGashaponPreviewC2S.prototype.gashaponType = 0;
    GamerGetGashaponPreviewC2S.create = function create(properties) {
        return new GamerGetGashaponPreviewC2S(properties);
    };
    GamerGetGashaponPreviewC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.gashaponType != null && message.hasOwnProperty("gashaponType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gashaponType);
        return writer;
    };
    GamerGetGashaponPreviewC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetGashaponPreviewC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetGashaponPreviewC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.gashaponType = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetGashaponPreviewC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetGashaponPreviewC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.gashaponType != null && message.hasOwnProperty("gashaponType"))
            if (!$util.isInteger(message.gashaponType))
                return "gashaponType: integer expected";
        return null;
    };
    GamerGetGashaponPreviewC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetGashaponPreviewC2S)
            return object;
        var message = new $root.GamerGetGashaponPreviewC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.gashaponType != null)
            message.gashaponType = object.gashaponType | 0;
        return message;
    };
    GamerGetGashaponPreviewC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.gashaponType = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.gashaponType != null && message.hasOwnProperty("gashaponType"))
            object.gashaponType = message.gashaponType;
        return object;
    };
    GamerGetGashaponPreviewC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetGashaponPreviewC2S;
})();
$root.GamerGetGashaponPreviewS2C = (function() {
    function GamerGetGashaponPreviewS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetGashaponPreviewS2C.prototype.error = 0;
    GamerGetGashaponPreviewS2C.prototype.gashaponType = 0;
    GamerGetGashaponPreviewS2C.prototype.items = $util.emptyArray;
    GamerGetGashaponPreviewS2C.create = function create(properties) {
        return new GamerGetGashaponPreviewS2C(properties);
    };
    GamerGetGashaponPreviewS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.gashaponType != null && message.hasOwnProperty("gashaponType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gashaponType);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerGetGashaponPreviewS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetGashaponPreviewS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetGashaponPreviewS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.gashaponType = reader.int32();
                break;
            case 3:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetGashaponPreviewS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetGashaponPreviewS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.gashaponType != null && message.hasOwnProperty("gashaponType"))
            if (!$util.isInteger(message.gashaponType))
                return "gashaponType: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    GamerGetGashaponPreviewS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetGashaponPreviewS2C)
            return object;
        var message = new $root.GamerGetGashaponPreviewS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.gashaponType != null)
            message.gashaponType = object.gashaponType | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerGetGashaponPreviewS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerGetGashaponPreviewS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    GamerGetGashaponPreviewS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults) {
            object.error = 0;
            object.gashaponType = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.gashaponType != null && message.hasOwnProperty("gashaponType"))
            object.gashaponType = message.gashaponType;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    GamerGetGashaponPreviewS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetGashaponPreviewS2C;
})();
$root.GamerNotifyActivitiesS2C = (function() {
    function GamerNotifyActivitiesS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyActivitiesS2C.prototype.error = 0;
    GamerNotifyActivitiesS2C.prototype.countActivity = null;
    GamerNotifyActivitiesS2C.create = function create(properties) {
        return new GamerNotifyActivitiesS2C(properties);
    };
    GamerNotifyActivitiesS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.countActivity != null && message.hasOwnProperty("countActivity"))
            $root.CountActivity.encode(message.countActivity, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyActivitiesS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyActivitiesS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyActivitiesS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.countActivity = $root.CountActivity.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyActivitiesS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyActivitiesS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.countActivity != null && message.hasOwnProperty("countActivity")) {
            var error = $root.CountActivity.verify(message.countActivity);
            if (error)
                return "countActivity." + error;
        }
        return null;
    };
    GamerNotifyActivitiesS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyActivitiesS2C)
            return object;
        var message = new $root.GamerNotifyActivitiesS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.countActivity != null) {
            if (typeof object.countActivity !== "object")
                throw TypeError(".GamerNotifyActivitiesS2C.countActivity: object expected");
            message.countActivity = $root.CountActivity.fromObject(object.countActivity);
        }
        return message;
    };
    GamerNotifyActivitiesS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.countActivity = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.countActivity != null && message.hasOwnProperty("countActivity"))
            object.countActivity = $root.CountActivity.toObject(message.countActivity, options);
        return object;
    };
    GamerNotifyActivitiesS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyActivitiesS2C;
})();
$root.GetActivityRewardC2S = (function() {
    function GetActivityRewardC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetActivityRewardC2S.prototype.id = 0;
    GetActivityRewardC2S.prototype.activityId = 0;
    GetActivityRewardC2S.create = function create(properties) {
        return new GetActivityRewardC2S(properties);
    };
    GetActivityRewardC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.activityId);
        return writer;
    };
    GetActivityRewardC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetActivityRewardC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetActivityRewardC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.activityId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetActivityRewardC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetActivityRewardC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            if (!$util.isInteger(message.activityId))
                return "activityId: integer expected";
        return null;
    };
    GetActivityRewardC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetActivityRewardC2S)
            return object;
        var message = new $root.GetActivityRewardC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.activityId != null)
            message.activityId = object.activityId | 0;
        return message;
    };
    GetActivityRewardC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.activityId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            object.activityId = message.activityId;
        return object;
    };
    GetActivityRewardC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetActivityRewardC2S;
})();
$root.GetActivityRewardS2C = (function() {
    function GetActivityRewardS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetActivityRewardS2C.prototype.error = 0;
    GetActivityRewardS2C.prototype.activityId = 0;
    GetActivityRewardS2C.create = function create(properties) {
        return new GetActivityRewardS2C(properties);
    };
    GetActivityRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.activityId);
        return writer;
    };
    GetActivityRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetActivityRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetActivityRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.activityId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetActivityRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetActivityRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            if (!$util.isInteger(message.activityId))
                return "activityId: integer expected";
        return null;
    };
    GetActivityRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetActivityRewardS2C)
            return object;
        var message = new $root.GetActivityRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.activityId != null)
            message.activityId = object.activityId | 0;
        return message;
    };
    GetActivityRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.activityId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            object.activityId = message.activityId;
        return object;
    };
    GetActivityRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetActivityRewardS2C;
})();
$root.CreateGuildC2S = (function() {
    function CreateGuildC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CreateGuildC2S.prototype.id = 0;
    CreateGuildC2S.prototype.guildName = "";
    CreateGuildC2S.create = function create(properties) {
        return new CreateGuildC2S(properties);
    };
    CreateGuildC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.guildName != null && message.hasOwnProperty("guildName"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.guildName);
        return writer;
    };
    CreateGuildC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CreateGuildC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CreateGuildC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.guildName = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CreateGuildC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CreateGuildC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.guildName != null && message.hasOwnProperty("guildName"))
            if (!$util.isString(message.guildName))
                return "guildName: string expected";
        return null;
    };
    CreateGuildC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.CreateGuildC2S)
            return object;
        var message = new $root.CreateGuildC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.guildName != null)
            message.guildName = String(object.guildName);
        return message;
    };
    CreateGuildC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.guildName = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.guildName != null && message.hasOwnProperty("guildName"))
            object.guildName = message.guildName;
        return object;
    };
    CreateGuildC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CreateGuildC2S;
})();
$root.CreateGuildS2C = (function() {
    function CreateGuildS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CreateGuildS2C.prototype.error = 0;
    CreateGuildS2C.prototype.guildInfo = null;
    CreateGuildS2C.create = function create(properties) {
        return new CreateGuildS2C(properties);
    };
    CreateGuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.guildInfo != null && message.hasOwnProperty("guildInfo"))
            $root.Guild.encode(message.guildInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    CreateGuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CreateGuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CreateGuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.guildInfo = $root.Guild.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CreateGuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CreateGuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.guildInfo != null && message.hasOwnProperty("guildInfo")) {
            var error = $root.Guild.verify(message.guildInfo);
            if (error)
                return "guildInfo." + error;
        }
        return null;
    };
    CreateGuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.CreateGuildS2C)
            return object;
        var message = new $root.CreateGuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.guildInfo != null) {
            if (typeof object.guildInfo !== "object")
                throw TypeError(".CreateGuildS2C.guildInfo: object expected");
            message.guildInfo = $root.Guild.fromObject(object.guildInfo);
        }
        return message;
    };
    CreateGuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.guildInfo = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.guildInfo != null && message.hasOwnProperty("guildInfo"))
            object.guildInfo = $root.Guild.toObject(message.guildInfo, options);
        return object;
    };
    CreateGuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CreateGuildS2C;
})();
$root.GuildGamerLoginC2S = (function() {
    function GuildGamerLoginC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GuildGamerLoginC2S.prototype.id = 0;
    GuildGamerLoginC2S.prototype.guildId = 0;
    GuildGamerLoginC2S.create = function create(properties) {
        return new GuildGamerLoginC2S(properties);
    };
    GuildGamerLoginC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        return writer;
    };
    GuildGamerLoginC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GuildGamerLoginC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GuildGamerLoginC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GuildGamerLoginC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GuildGamerLoginC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        return null;
    };
    GuildGamerLoginC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GuildGamerLoginC2S)
            return object;
        var message = new $root.GuildGamerLoginC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        return message;
    };
    GuildGamerLoginC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.guildId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        return object;
    };
    GuildGamerLoginC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GuildGamerLoginC2S;
})();
$root.GuildGamerLoginS2C = (function() {
    function GuildGamerLoginS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GuildGamerLoginS2C.prototype.error = 0;
    GuildGamerLoginS2C.create = function create(properties) {
        return new GuildGamerLoginS2C(properties);
    };
    GuildGamerLoginS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GuildGamerLoginS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GuildGamerLoginS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GuildGamerLoginS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GuildGamerLoginS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GuildGamerLoginS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GuildGamerLoginS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GuildGamerLoginS2C)
            return object;
        var message = new $root.GuildGamerLoginS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GuildGamerLoginS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GuildGamerLoginS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GuildGamerLoginS2C;
})();
$root.GuildGamerLoginoutC2S = (function() {
    function GuildGamerLoginoutC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GuildGamerLoginoutC2S.prototype.id = 0;
    GuildGamerLoginoutC2S.prototype.guildId = 0;
    GuildGamerLoginoutC2S.create = function create(properties) {
        return new GuildGamerLoginoutC2S(properties);
    };
    GuildGamerLoginoutC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        return writer;
    };
    GuildGamerLoginoutC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GuildGamerLoginoutC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GuildGamerLoginoutC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GuildGamerLoginoutC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GuildGamerLoginoutC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        return null;
    };
    GuildGamerLoginoutC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GuildGamerLoginoutC2S)
            return object;
        var message = new $root.GuildGamerLoginoutC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        return message;
    };
    GuildGamerLoginoutC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.guildId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        return object;
    };
    GuildGamerLoginoutC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GuildGamerLoginoutC2S;
})();
$root.GuildGamerLoginoutS2C = (function() {
    function GuildGamerLoginoutS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GuildGamerLoginoutS2C.prototype.error = 0;
    GuildGamerLoginoutS2C.create = function create(properties) {
        return new GuildGamerLoginoutS2C(properties);
    };
    GuildGamerLoginoutS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GuildGamerLoginoutS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GuildGamerLoginoutS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GuildGamerLoginoutS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GuildGamerLoginoutS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GuildGamerLoginoutS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GuildGamerLoginoutS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GuildGamerLoginoutS2C)
            return object;
        var message = new $root.GuildGamerLoginoutS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GuildGamerLoginoutS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GuildGamerLoginoutS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GuildGamerLoginoutS2C;
})();
$root.DissolutionGuildC2S = (function() {
    function DissolutionGuildC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DissolutionGuildC2S.prototype.id = 0;
    DissolutionGuildC2S.prototype.guildId = 0;
    DissolutionGuildC2S.create = function create(properties) {
        return new DissolutionGuildC2S(properties);
    };
    DissolutionGuildC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        return writer;
    };
    DissolutionGuildC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DissolutionGuildC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DissolutionGuildC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DissolutionGuildC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DissolutionGuildC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        return null;
    };
    DissolutionGuildC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.DissolutionGuildC2S)
            return object;
        var message = new $root.DissolutionGuildC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        return message;
    };
    DissolutionGuildC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.guildId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        return object;
    };
    DissolutionGuildC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DissolutionGuildC2S;
})();
$root.DissolutionGuildS2C = (function() {
    function DissolutionGuildS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DissolutionGuildS2C.prototype.error = 0;
    DissolutionGuildS2C.create = function create(properties) {
        return new DissolutionGuildS2C(properties);
    };
    DissolutionGuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    DissolutionGuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DissolutionGuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DissolutionGuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DissolutionGuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DissolutionGuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    DissolutionGuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.DissolutionGuildS2C)
            return object;
        var message = new $root.DissolutionGuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    DissolutionGuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    DissolutionGuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DissolutionGuildS2C;
})();
$root.GetGuildC2S = (function() {
    function GetGuildC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetGuildC2S.prototype.id = 0;
    GetGuildC2S.prototype.guildId = 0;
    GetGuildC2S.create = function create(properties) {
        return new GetGuildC2S(properties);
    };
    GetGuildC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        return writer;
    };
    GetGuildC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetGuildC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetGuildC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetGuildC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetGuildC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        return null;
    };
    GetGuildC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetGuildC2S)
            return object;
        var message = new $root.GetGuildC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        return message;
    };
    GetGuildC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.guildId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        return object;
    };
    GetGuildC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetGuildC2S;
})();
$root.GetGuildS2C = (function() {
    function GetGuildS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetGuildS2C.prototype.error = 0;
    GetGuildS2C.prototype.guild = null;
    GetGuildS2C.create = function create(properties) {
        return new GetGuildS2C(properties);
    };
    GetGuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.guild != null && message.hasOwnProperty("guild"))
            $root.Guild.encode(message.guild, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GetGuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetGuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetGuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.guild = $root.Guild.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetGuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetGuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.guild != null && message.hasOwnProperty("guild")) {
            var error = $root.Guild.verify(message.guild);
            if (error)
                return "guild." + error;
        }
        return null;
    };
    GetGuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetGuildS2C)
            return object;
        var message = new $root.GetGuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.guild != null) {
            if (typeof object.guild !== "object")
                throw TypeError(".GetGuildS2C.guild: object expected");
            message.guild = $root.Guild.fromObject(object.guild);
        }
        return message;
    };
    GetGuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.guild = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.guild != null && message.hasOwnProperty("guild"))
            object.guild = $root.Guild.toObject(message.guild, options);
        return object;
    };
    GetGuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetGuildS2C;
})();
$root.GetGuildListC2S = (function() {
    function GetGuildListC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetGuildListC2S.prototype.id = 0;
    GetGuildListC2S.prototype.serverId = 0;
    GetGuildListC2S.prototype.page = 0;
    GetGuildListC2S.create = function create(properties) {
        return new GetGuildListC2S(properties);
    };
    GetGuildListC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.serverId != null && message.hasOwnProperty("serverId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.serverId);
        if (message.page != null && message.hasOwnProperty("page"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.page);
        return writer;
    };
    GetGuildListC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetGuildListC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetGuildListC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.serverId = reader.int32();
                break;
            case 3:
                message.page = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetGuildListC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetGuildListC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.serverId != null && message.hasOwnProperty("serverId"))
            if (!$util.isInteger(message.serverId))
                return "serverId: integer expected";
        if (message.page != null && message.hasOwnProperty("page"))
            if (!$util.isInteger(message.page))
                return "page: integer expected";
        return null;
    };
    GetGuildListC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetGuildListC2S)
            return object;
        var message = new $root.GetGuildListC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.serverId != null)
            message.serverId = object.serverId | 0;
        if (object.page != null)
            message.page = object.page | 0;
        return message;
    };
    GetGuildListC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.serverId = 0;
            object.page = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.serverId != null && message.hasOwnProperty("serverId"))
            object.serverId = message.serverId;
        if (message.page != null && message.hasOwnProperty("page"))
            object.page = message.page;
        return object;
    };
    GetGuildListC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetGuildListC2S;
})();
$root.GetGuildListS2C = (function() {
    function GetGuildListS2C(properties) {
        this.guilds = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetGuildListS2C.prototype.error = 0;
    GetGuildListS2C.prototype.guilds = $util.emptyArray;
    GetGuildListS2C.create = function create(properties) {
        return new GetGuildListS2C(properties);
    };
    GetGuildListS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.guilds != null && message.guilds.length)
            for (var i = 0; i < message.guilds.length; ++i)
                $root.Guild.encode(message.guilds[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GetGuildListS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetGuildListS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetGuildListS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.guilds && message.guilds.length))
                    message.guilds = [];
                message.guilds.push($root.Guild.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetGuildListS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetGuildListS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.guilds != null && message.hasOwnProperty("guilds")) {
            if (!Array.isArray(message.guilds))
                return "guilds: array expected";
            for (var i = 0; i < message.guilds.length; ++i) {
                var error = $root.Guild.verify(message.guilds[i]);
                if (error)
                    return "guilds." + error;
            }
        }
        return null;
    };
    GetGuildListS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetGuildListS2C)
            return object;
        var message = new $root.GetGuildListS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.guilds) {
            if (!Array.isArray(object.guilds))
                throw TypeError(".GetGuildListS2C.guilds: array expected");
            message.guilds = [];
            for (var i = 0; i < object.guilds.length; ++i) {
                if (typeof object.guilds[i] !== "object")
                    throw TypeError(".GetGuildListS2C.guilds: object expected");
                message.guilds[i] = $root.Guild.fromObject(object.guilds[i]);
            }
        }
        return message;
    };
    GetGuildListS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.guilds = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.guilds && message.guilds.length) {
            object.guilds = [];
            for (var j = 0; j < message.guilds.length; ++j)
                object.guilds[j] = $root.Guild.toObject(message.guilds[j], options);
        }
        return object;
    };
    GetGuildListS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetGuildListS2C;
})();
$root.GamerNotifyApplyJoinGuildS2C = (function() {
    function GamerNotifyApplyJoinGuildS2C(properties) {
        this.applyers = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyApplyJoinGuildS2C.prototype.error = 0;
    GamerNotifyApplyJoinGuildS2C.prototype.guildId = 0;
    GamerNotifyApplyJoinGuildS2C.prototype.applyers = $util.emptyArray;
    GamerNotifyApplyJoinGuildS2C.create = function create(properties) {
        return new GamerNotifyApplyJoinGuildS2C(properties);
    };
    GamerNotifyApplyJoinGuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        if (message.applyers != null && message.applyers.length)
            for (var i = 0; i < message.applyers.length; ++i)
                $root.GamerMini.encode(message.applyers[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerNotifyApplyJoinGuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyApplyJoinGuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyApplyJoinGuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            case 3:
                if (!(message.applyers && message.applyers.length))
                    message.applyers = [];
                message.applyers.push($root.GamerMini.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyApplyJoinGuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyApplyJoinGuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        if (message.applyers != null && message.hasOwnProperty("applyers")) {
            if (!Array.isArray(message.applyers))
                return "applyers: array expected";
            for (var i = 0; i < message.applyers.length; ++i) {
                var error = $root.GamerMini.verify(message.applyers[i]);
                if (error)
                    return "applyers." + error;
            }
        }
        return null;
    };
    GamerNotifyApplyJoinGuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyApplyJoinGuildS2C)
            return object;
        var message = new $root.GamerNotifyApplyJoinGuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        if (object.applyers) {
            if (!Array.isArray(object.applyers))
                throw TypeError(".GamerNotifyApplyJoinGuildS2C.applyers: array expected");
            message.applyers = [];
            for (var i = 0; i < object.applyers.length; ++i) {
                if (typeof object.applyers[i] !== "object")
                    throw TypeError(".GamerNotifyApplyJoinGuildS2C.applyers: object expected");
                message.applyers[i] = $root.GamerMini.fromObject(object.applyers[i]);
            }
        }
        return message;
    };
    GamerNotifyApplyJoinGuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.applyers = [];
        if (options.defaults) {
            object.error = 0;
            object.guildId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        if (message.applyers && message.applyers.length) {
            object.applyers = [];
            for (var j = 0; j < message.applyers.length; ++j)
                object.applyers[j] = $root.GamerMini.toObject(message.applyers[j], options);
        }
        return object;
    };
    GamerNotifyApplyJoinGuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyApplyJoinGuildS2C;
})();
$root.ApplyJoinGuildC2S = (function() {
    function ApplyJoinGuildC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ApplyJoinGuildC2S.prototype.id = 0;
    ApplyJoinGuildC2S.prototype.guildId = 0;
    ApplyJoinGuildC2S.create = function create(properties) {
        return new ApplyJoinGuildC2S(properties);
    };
    ApplyJoinGuildC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        return writer;
    };
    ApplyJoinGuildC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ApplyJoinGuildC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ApplyJoinGuildC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ApplyJoinGuildC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ApplyJoinGuildC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        return null;
    };
    ApplyJoinGuildC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.ApplyJoinGuildC2S)
            return object;
        var message = new $root.ApplyJoinGuildC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        return message;
    };
    ApplyJoinGuildC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.guildId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        return object;
    };
    ApplyJoinGuildC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ApplyJoinGuildC2S;
})();
$root.ApplyJoinGuildS2C = (function() {
    function ApplyJoinGuildS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ApplyJoinGuildS2C.prototype.error = 0;
    ApplyJoinGuildS2C.create = function create(properties) {
        return new ApplyJoinGuildS2C(properties);
    };
    ApplyJoinGuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    ApplyJoinGuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ApplyJoinGuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ApplyJoinGuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ApplyJoinGuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ApplyJoinGuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    ApplyJoinGuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.ApplyJoinGuildS2C)
            return object;
        var message = new $root.ApplyJoinGuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    ApplyJoinGuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    ApplyJoinGuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ApplyJoinGuildS2C;
})();
$root.ApprovalJoinGuildC2S = (function() {
    function ApprovalJoinGuildC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ApprovalJoinGuildC2S.prototype.id = 0;
    ApprovalJoinGuildC2S.prototype.guildId = 0;
    ApprovalJoinGuildC2S.prototype.applyerGid = 0;
    ApprovalJoinGuildC2S.prototype.result = false;
    ApprovalJoinGuildC2S.create = function create(properties) {
        return new ApprovalJoinGuildC2S(properties);
    };
    ApprovalJoinGuildC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        if (message.applyerGid != null && message.hasOwnProperty("applyerGid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.applyerGid);
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.result);
        return writer;
    };
    ApprovalJoinGuildC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ApprovalJoinGuildC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ApprovalJoinGuildC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            case 3:
                message.applyerGid = reader.int32();
                break;
            case 4:
                message.result = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ApprovalJoinGuildC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ApprovalJoinGuildC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        if (message.applyerGid != null && message.hasOwnProperty("applyerGid"))
            if (!$util.isInteger(message.applyerGid))
                return "applyerGid: integer expected";
        if (message.result != null && message.hasOwnProperty("result"))
            if (typeof message.result !== "boolean")
                return "result: boolean expected";
        return null;
    };
    ApprovalJoinGuildC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.ApprovalJoinGuildC2S)
            return object;
        var message = new $root.ApprovalJoinGuildC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        if (object.applyerGid != null)
            message.applyerGid = object.applyerGid | 0;
        if (object.result != null)
            message.result = Boolean(object.result);
        return message;
    };
    ApprovalJoinGuildC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.guildId = 0;
            object.applyerGid = 0;
            object.result = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        if (message.applyerGid != null && message.hasOwnProperty("applyerGid"))
            object.applyerGid = message.applyerGid;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };
    ApprovalJoinGuildC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ApprovalJoinGuildC2S;
})();
$root.ApprovalJoinGuildS2C = (function() {
    function ApprovalJoinGuildS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ApprovalJoinGuildS2C.prototype.error = 0;
    ApprovalJoinGuildS2C.create = function create(properties) {
        return new ApprovalJoinGuildS2C(properties);
    };
    ApprovalJoinGuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    ApprovalJoinGuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ApprovalJoinGuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ApprovalJoinGuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ApprovalJoinGuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ApprovalJoinGuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    ApprovalJoinGuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.ApprovalJoinGuildS2C)
            return object;
        var message = new $root.ApprovalJoinGuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    ApprovalJoinGuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    ApprovalJoinGuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ApprovalJoinGuildS2C;
})();
$root.GamerNotifyInviteJoinGuildS2C = (function() {
    function GamerNotifyInviteJoinGuildS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyInviteJoinGuildS2C.prototype.error = 0;
    GamerNotifyInviteJoinGuildS2C.prototype.guildId = 0;
    GamerNotifyInviteJoinGuildS2C.prototype.inviterGid = 0;
    GamerNotifyInviteJoinGuildS2C.create = function create(properties) {
        return new GamerNotifyInviteJoinGuildS2C(properties);
    };
    GamerNotifyInviteJoinGuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        if (message.inviterGid != null && message.hasOwnProperty("inviterGid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.inviterGid);
        return writer;
    };
    GamerNotifyInviteJoinGuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyInviteJoinGuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyInviteJoinGuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            case 3:
                message.inviterGid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyInviteJoinGuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyInviteJoinGuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        if (message.inviterGid != null && message.hasOwnProperty("inviterGid"))
            if (!$util.isInteger(message.inviterGid))
                return "inviterGid: integer expected";
        return null;
    };
    GamerNotifyInviteJoinGuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyInviteJoinGuildS2C)
            return object;
        var message = new $root.GamerNotifyInviteJoinGuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        if (object.inviterGid != null)
            message.inviterGid = object.inviterGid | 0;
        return message;
    };
    GamerNotifyInviteJoinGuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.guildId = 0;
            object.inviterGid = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        if (message.inviterGid != null && message.hasOwnProperty("inviterGid"))
            object.inviterGid = message.inviterGid;
        return object;
    };
    GamerNotifyInviteJoinGuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyInviteJoinGuildS2C;
})();
$root.InviteJoinGuildC2S = (function() {
    function InviteJoinGuildC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    InviteJoinGuildC2S.prototype.id = 0;
    InviteJoinGuildC2S.prototype.inviteeGid = 0;
    InviteJoinGuildC2S.prototype.guildId = 0;
    InviteJoinGuildC2S.create = function create(properties) {
        return new InviteJoinGuildC2S(properties);
    };
    InviteJoinGuildC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.inviteeGid != null && message.hasOwnProperty("inviteeGid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.inviteeGid);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.guildId);
        return writer;
    };
    InviteJoinGuildC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    InviteJoinGuildC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.InviteJoinGuildC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.inviteeGid = reader.int32();
                break;
            case 3:
                message.guildId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    InviteJoinGuildC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    InviteJoinGuildC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.inviteeGid != null && message.hasOwnProperty("inviteeGid"))
            if (!$util.isInteger(message.inviteeGid))
                return "inviteeGid: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        return null;
    };
    InviteJoinGuildC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.InviteJoinGuildC2S)
            return object;
        var message = new $root.InviteJoinGuildC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.inviteeGid != null)
            message.inviteeGid = object.inviteeGid | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        return message;
    };
    InviteJoinGuildC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.inviteeGid = 0;
            object.guildId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.inviteeGid != null && message.hasOwnProperty("inviteeGid"))
            object.inviteeGid = message.inviteeGid;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        return object;
    };
    InviteJoinGuildC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return InviteJoinGuildC2S;
})();
$root.InviteJoinGuildS2C = (function() {
    function InviteJoinGuildS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    InviteJoinGuildS2C.prototype.error = 0;
    InviteJoinGuildS2C.create = function create(properties) {
        return new InviteJoinGuildS2C(properties);
    };
    InviteJoinGuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    InviteJoinGuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    InviteJoinGuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.InviteJoinGuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    InviteJoinGuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    InviteJoinGuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    InviteJoinGuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.InviteJoinGuildS2C)
            return object;
        var message = new $root.InviteJoinGuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    InviteJoinGuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    InviteJoinGuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return InviteJoinGuildS2C;
})();
$root.AgreeJoinGuildC2S = (function() {
    function AgreeJoinGuildC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    AgreeJoinGuildC2S.prototype.id = 0;
    AgreeJoinGuildC2S.prototype.guildId = 0;
    AgreeJoinGuildC2S.prototype.result = false;
    AgreeJoinGuildC2S.create = function create(properties) {
        return new AgreeJoinGuildC2S(properties);
    };
    AgreeJoinGuildC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.result);
        return writer;
    };
    AgreeJoinGuildC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    AgreeJoinGuildC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AgreeJoinGuildC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            case 4:
                message.result = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    AgreeJoinGuildC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    AgreeJoinGuildC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        if (message.result != null && message.hasOwnProperty("result"))
            if (typeof message.result !== "boolean")
                return "result: boolean expected";
        return null;
    };
    AgreeJoinGuildC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.AgreeJoinGuildC2S)
            return object;
        var message = new $root.AgreeJoinGuildC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        if (object.result != null)
            message.result = Boolean(object.result);
        return message;
    };
    AgreeJoinGuildC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.guildId = 0;
            object.result = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };
    AgreeJoinGuildC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return AgreeJoinGuildC2S;
})();
$root.AgreeJoinGuildS2C = (function() {
    function AgreeJoinGuildS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    AgreeJoinGuildS2C.prototype.error = 0;
    AgreeJoinGuildS2C.create = function create(properties) {
        return new AgreeJoinGuildS2C(properties);
    };
    AgreeJoinGuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    AgreeJoinGuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    AgreeJoinGuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AgreeJoinGuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    AgreeJoinGuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    AgreeJoinGuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    AgreeJoinGuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.AgreeJoinGuildS2C)
            return object;
        var message = new $root.AgreeJoinGuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    AgreeJoinGuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    AgreeJoinGuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return AgreeJoinGuildS2C;
})();
$root.QuitGuildC2S = (function() {
    function QuitGuildC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    QuitGuildC2S.prototype.id = 0;
    QuitGuildC2S.prototype.guildId = 0;
    QuitGuildC2S.create = function create(properties) {
        return new QuitGuildC2S(properties);
    };
    QuitGuildC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        return writer;
    };
    QuitGuildC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    QuitGuildC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.QuitGuildC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    QuitGuildC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    QuitGuildC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        return null;
    };
    QuitGuildC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.QuitGuildC2S)
            return object;
        var message = new $root.QuitGuildC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        return message;
    };
    QuitGuildC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.guildId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        return object;
    };
    QuitGuildC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return QuitGuildC2S;
})();
$root.QuitGuildS2C = (function() {
    function QuitGuildS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    QuitGuildS2C.prototype.error = 0;
    QuitGuildS2C.create = function create(properties) {
        return new QuitGuildS2C(properties);
    };
    QuitGuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    QuitGuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    QuitGuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.QuitGuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    QuitGuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    QuitGuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    QuitGuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.QuitGuildS2C)
            return object;
        var message = new $root.QuitGuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    QuitGuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    QuitGuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return QuitGuildS2C;
})();
$root.KickOutGuildC2S = (function() {
    function KickOutGuildC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    KickOutGuildC2S.prototype.id = 0;
    KickOutGuildC2S.prototype.guildId = 0;
    KickOutGuildC2S.prototype.kickedGid = 0;
    KickOutGuildC2S.create = function create(properties) {
        return new KickOutGuildC2S(properties);
    };
    KickOutGuildC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        if (message.kickedGid != null && message.hasOwnProperty("kickedGid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.kickedGid);
        return writer;
    };
    KickOutGuildC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    KickOutGuildC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.KickOutGuildC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            case 3:
                message.kickedGid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    KickOutGuildC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    KickOutGuildC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        if (message.kickedGid != null && message.hasOwnProperty("kickedGid"))
            if (!$util.isInteger(message.kickedGid))
                return "kickedGid: integer expected";
        return null;
    };
    KickOutGuildC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.KickOutGuildC2S)
            return object;
        var message = new $root.KickOutGuildC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        if (object.kickedGid != null)
            message.kickedGid = object.kickedGid | 0;
        return message;
    };
    KickOutGuildC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.guildId = 0;
            object.kickedGid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        if (message.kickedGid != null && message.hasOwnProperty("kickedGid"))
            object.kickedGid = message.kickedGid;
        return object;
    };
    KickOutGuildC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return KickOutGuildC2S;
})();
$root.KickOutGuildS2C = (function() {
    function KickOutGuildS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    KickOutGuildS2C.prototype.error = 0;
    KickOutGuildS2C.create = function create(properties) {
        return new KickOutGuildS2C(properties);
    };
    KickOutGuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    KickOutGuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    KickOutGuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.KickOutGuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    KickOutGuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    KickOutGuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    KickOutGuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.KickOutGuildS2C)
            return object;
        var message = new $root.KickOutGuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    KickOutGuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    KickOutGuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return KickOutGuildS2C;
})();
$root.GamerNotifyGuildMemUpdateS2C = (function() {
    function GamerNotifyGuildMemUpdateS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyGuildMemUpdateS2C.prototype.error = 0;
    GamerNotifyGuildMemUpdateS2C.prototype.mem = null;
    GamerNotifyGuildMemUpdateS2C.create = function create(properties) {
        return new GamerNotifyGuildMemUpdateS2C(properties);
    };
    GamerNotifyGuildMemUpdateS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.mem != null && message.hasOwnProperty("mem"))
            $root.GuildMember.encode(message.mem, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyGuildMemUpdateS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyGuildMemUpdateS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyGuildMemUpdateS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.mem = $root.GuildMember.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyGuildMemUpdateS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyGuildMemUpdateS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.mem != null && message.hasOwnProperty("mem")) {
            var error = $root.GuildMember.verify(message.mem);
            if (error)
                return "mem." + error;
        }
        return null;
    };
    GamerNotifyGuildMemUpdateS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyGuildMemUpdateS2C)
            return object;
        var message = new $root.GamerNotifyGuildMemUpdateS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.mem != null) {
            if (typeof object.mem !== "object")
                throw TypeError(".GamerNotifyGuildMemUpdateS2C.mem: object expected");
            message.mem = $root.GuildMember.fromObject(object.mem);
        }
        return message;
    };
    GamerNotifyGuildMemUpdateS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.mem = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.mem != null && message.hasOwnProperty("mem"))
            object.mem = $root.GuildMember.toObject(message.mem, options);
        return object;
    };
    GamerNotifyGuildMemUpdateS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyGuildMemUpdateS2C;
})();
$root.GuildChatC2S = (function() {
    function GuildChatC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GuildChatC2S.prototype.id = 0;
    GuildChatC2S.prototype.guildId = 0;
    GuildChatC2S.prototype.msg = "";
    GuildChatC2S.create = function create(properties) {
        return new GuildChatC2S(properties);
    };
    GuildChatC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.guildId);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GuildChatC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GuildChatC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GuildChatC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.guildId = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GuildChatC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GuildChatC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GuildChatC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GuildChatC2S)
            return object;
        var message = new $root.GuildChatC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GuildChatC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.guildId = 0;
            object.msg = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GuildChatC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GuildChatC2S;
})();
$root.GuildChatS2C = (function() {
    function GuildChatS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GuildChatS2C.prototype.error = 0;
    GuildChatS2C.create = function create(properties) {
        return new GuildChatS2C(properties);
    };
    GuildChatS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GuildChatS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GuildChatS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GuildChatS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GuildChatS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GuildChatS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GuildChatS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GuildChatS2C)
            return object;
        var message = new $root.GuildChatS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GuildChatS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GuildChatS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GuildChatS2C;
})();
$root.GamerNotifyGuildChatS2C = (function() {
    function GamerNotifyGuildChatS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyGuildChatS2C.prototype.error = 0;
    GamerNotifyGuildChatS2C.prototype.oid = 0;
    GamerNotifyGuildChatS2C.prototype.msg = "";
    GamerNotifyGuildChatS2C.create = function create(properties) {
        return new GamerNotifyGuildChatS2C(properties);
    };
    GamerNotifyGuildChatS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.oid != null && message.hasOwnProperty("oid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.oid);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerNotifyGuildChatS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyGuildChatS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyGuildChatS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.oid = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyGuildChatS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyGuildChatS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.oid != null && message.hasOwnProperty("oid"))
            if (!$util.isInteger(message.oid))
                return "oid: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerNotifyGuildChatS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyGuildChatS2C)
            return object;
        var message = new $root.GamerNotifyGuildChatS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.oid != null)
            message.oid = object.oid | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerNotifyGuildChatS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.oid = 0;
            object.msg = "";
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.oid != null && message.hasOwnProperty("oid"))
            object.oid = message.oid;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerNotifyGuildChatS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyGuildChatS2C;
})();
$root.GMC2S = (function() {
    function GMC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GMC2S.prototype.id = 0;
    GMC2S.prototype.gm = "";
    GMC2S.create = function create(properties) {
        return new GMC2S(properties);
    };
    GMC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.gm != null && message.hasOwnProperty("gm"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.gm);
        return writer;
    };
    GMC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GMC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GMC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.gm = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GMC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GMC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.gm != null && message.hasOwnProperty("gm"))
            if (!$util.isString(message.gm))
                return "gm: string expected";
        return null;
    };
    GMC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GMC2S)
            return object;
        var message = new $root.GMC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.gm != null)
            message.gm = String(object.gm);
        return message;
    };
    GMC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.gm = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.gm != null && message.hasOwnProperty("gm"))
            object.gm = message.gm;
        return object;
    };
    GMC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GMC2S;
})();
$root.GMS2C = (function() {
    function GMS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GMS2C.prototype.error = 0;
    GMS2C.create = function create(properties) {
        return new GMS2C(properties);
    };
    GMS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GMS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GMS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GMS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GMS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GMS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GMS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GMS2C)
            return object;
        var message = new $root.GMS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GMS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GMS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GMS2C;
})();
$root.CheckPointListC2S = (function() {
    function CheckPointListC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CheckPointListC2S.prototype.id = 0;
    CheckPointListC2S.create = function create(properties) {
        return new CheckPointListC2S(properties);
    };
    CheckPointListC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    CheckPointListC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CheckPointListC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CheckPointListC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CheckPointListC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CheckPointListC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    CheckPointListC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.CheckPointListC2S)
            return object;
        var message = new $root.CheckPointListC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    CheckPointListC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    CheckPointListC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CheckPointListC2S;
})();
$root.CheckPointListS2C = (function() {
    function CheckPointListS2C(properties) {
        this.chapterList = [];
        this.checkPointList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CheckPointListS2C.prototype.error = 0;
    CheckPointListS2C.prototype.data = null;
    CheckPointListS2C.prototype.chapterList = $util.emptyArray;
    CheckPointListS2C.prototype.checkPointList = $util.emptyArray;
    CheckPointListS2C.create = function create(properties) {
        return new CheckPointListS2C(properties);
    };
    CheckPointListS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.data != null && message.hasOwnProperty("data"))
            $root.CheckPointData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.chapterList != null && message.chapterList.length)
            for (var i = 0; i < message.chapterList.length; ++i)
                $root.Chapter.encode(message.chapterList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.checkPointList != null && message.checkPointList.length)
            for (var i = 0; i < message.checkPointList.length; ++i)
                $root.CheckPoint.encode(message.checkPointList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    CheckPointListS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CheckPointListS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CheckPointListS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.data = $root.CheckPointData.decode(reader, reader.uint32());
                break;
            case 3:
                if (!(message.chapterList && message.chapterList.length))
                    message.chapterList = [];
                message.chapterList.push($root.Chapter.decode(reader, reader.uint32()));
                break;
            case 4:
                if (!(message.checkPointList && message.checkPointList.length))
                    message.checkPointList = [];
                message.checkPointList.push($root.CheckPoint.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CheckPointListS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CheckPointListS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.data != null && message.hasOwnProperty("data")) {
            var error = $root.CheckPointData.verify(message.data);
            if (error)
                return "data." + error;
        }
        if (message.chapterList != null && message.hasOwnProperty("chapterList")) {
            if (!Array.isArray(message.chapterList))
                return "chapterList: array expected";
            for (var i = 0; i < message.chapterList.length; ++i) {
                var error = $root.Chapter.verify(message.chapterList[i]);
                if (error)
                    return "chapterList." + error;
            }
        }
        if (message.checkPointList != null && message.hasOwnProperty("checkPointList")) {
            if (!Array.isArray(message.checkPointList))
                return "checkPointList: array expected";
            for (var i = 0; i < message.checkPointList.length; ++i) {
                var error = $root.CheckPoint.verify(message.checkPointList[i]);
                if (error)
                    return "checkPointList." + error;
            }
        }
        return null;
    };
    CheckPointListS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.CheckPointListS2C)
            return object;
        var message = new $root.CheckPointListS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.data != null) {
            if (typeof object.data !== "object")
                throw TypeError(".CheckPointListS2C.data: object expected");
            message.data = $root.CheckPointData.fromObject(object.data);
        }
        if (object.chapterList) {
            if (!Array.isArray(object.chapterList))
                throw TypeError(".CheckPointListS2C.chapterList: array expected");
            message.chapterList = [];
            for (var i = 0; i < object.chapterList.length; ++i) {
                if (typeof object.chapterList[i] !== "object")
                    throw TypeError(".CheckPointListS2C.chapterList: object expected");
                message.chapterList[i] = $root.Chapter.fromObject(object.chapterList[i]);
            }
        }
        if (object.checkPointList) {
            if (!Array.isArray(object.checkPointList))
                throw TypeError(".CheckPointListS2C.checkPointList: array expected");
            message.checkPointList = [];
            for (var i = 0; i < object.checkPointList.length; ++i) {
                if (typeof object.checkPointList[i] !== "object")
                    throw TypeError(".CheckPointListS2C.checkPointList: object expected");
                message.checkPointList[i] = $root.CheckPoint.fromObject(object.checkPointList[i]);
            }
        }
        return message;
    };
    CheckPointListS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.chapterList = [];
            object.checkPointList = [];
        }
        if (options.defaults) {
            object.error = 0;
            object.data = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = $root.CheckPointData.toObject(message.data, options);
        if (message.chapterList && message.chapterList.length) {
            object.chapterList = [];
            for (var j = 0; j < message.chapterList.length; ++j)
                object.chapterList[j] = $root.Chapter.toObject(message.chapterList[j], options);
        }
        if (message.checkPointList && message.checkPointList.length) {
            object.checkPointList = [];
            for (var j = 0; j < message.checkPointList.length; ++j)
                object.checkPointList[j] = $root.CheckPoint.toObject(message.checkPointList[j], options);
        }
        return object;
    };
    CheckPointListS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CheckPointListS2C;
})();
$root.GamerNotifyCheckPointListS2C = (function() {
    function GamerNotifyCheckPointListS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyCheckPointListS2C.prototype.error = 0;
    GamerNotifyCheckPointListS2C.prototype.checkPoint = null;
    GamerNotifyCheckPointListS2C.prototype.chapter = null;
    GamerNotifyCheckPointListS2C.prototype.data = null;
    GamerNotifyCheckPointListS2C.create = function create(properties) {
        return new GamerNotifyCheckPointListS2C(properties);
    };
    GamerNotifyCheckPointListS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.checkPoint != null && message.hasOwnProperty("checkPoint"))
            $root.CheckPoint.encode(message.checkPoint, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.chapter != null && message.hasOwnProperty("chapter"))
            $root.Chapter.encode(message.chapter, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.data != null && message.hasOwnProperty("data"))
            $root.CheckPointData.encode(message.data, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    GamerNotifyCheckPointListS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyCheckPointListS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyCheckPointListS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.checkPoint = $root.CheckPoint.decode(reader, reader.uint32());
                break;
            case 3:
                message.chapter = $root.Chapter.decode(reader, reader.uint32());
                break;
            case 4:
                message.data = $root.CheckPointData.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyCheckPointListS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyCheckPointListS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.checkPoint != null && message.hasOwnProperty("checkPoint")) {
            var error = $root.CheckPoint.verify(message.checkPoint);
            if (error)
                return "checkPoint." + error;
        }
        if (message.chapter != null && message.hasOwnProperty("chapter")) {
            var error = $root.Chapter.verify(message.chapter);
            if (error)
                return "chapter." + error;
        }
        if (message.data != null && message.hasOwnProperty("data")) {
            var error = $root.CheckPointData.verify(message.data);
            if (error)
                return "data." + error;
        }
        return null;
    };
    GamerNotifyCheckPointListS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyCheckPointListS2C)
            return object;
        var message = new $root.GamerNotifyCheckPointListS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.checkPoint != null) {
            if (typeof object.checkPoint !== "object")
                throw TypeError(".GamerNotifyCheckPointListS2C.checkPoint: object expected");
            message.checkPoint = $root.CheckPoint.fromObject(object.checkPoint);
        }
        if (object.chapter != null) {
            if (typeof object.chapter !== "object")
                throw TypeError(".GamerNotifyCheckPointListS2C.chapter: object expected");
            message.chapter = $root.Chapter.fromObject(object.chapter);
        }
        if (object.data != null) {
            if (typeof object.data !== "object")
                throw TypeError(".GamerNotifyCheckPointListS2C.data: object expected");
            message.data = $root.CheckPointData.fromObject(object.data);
        }
        return message;
    };
    GamerNotifyCheckPointListS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.checkPoint = null;
            object.chapter = null;
            object.data = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.checkPoint != null && message.hasOwnProperty("checkPoint"))
            object.checkPoint = $root.CheckPoint.toObject(message.checkPoint, options);
        if (message.chapter != null && message.hasOwnProperty("chapter"))
            object.chapter = $root.Chapter.toObject(message.chapter, options);
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = $root.CheckPointData.toObject(message.data, options);
        return object;
    };
    GamerNotifyCheckPointListS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyCheckPointListS2C;
})();
$root.GamerNotifyNewCheckPointListS2C = (function() {
    function GamerNotifyNewCheckPointListS2C(properties) {
        this.checkPointList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewCheckPointListS2C.prototype.error = 0;
    GamerNotifyNewCheckPointListS2C.prototype.checkPointList = $util.emptyArray;
    GamerNotifyNewCheckPointListS2C.create = function create(properties) {
        return new GamerNotifyNewCheckPointListS2C(properties);
    };
    GamerNotifyNewCheckPointListS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.checkPointList != null && message.checkPointList.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.checkPointList.length; ++i)
                writer.int32(message.checkPointList[i]);
            writer.ldelim();
        }
        return writer;
    };
    GamerNotifyNewCheckPointListS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewCheckPointListS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewCheckPointListS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.checkPointList && message.checkPointList.length))
                    message.checkPointList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.checkPointList.push(reader.int32());
                } else
                    message.checkPointList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewCheckPointListS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewCheckPointListS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.checkPointList != null && message.hasOwnProperty("checkPointList")) {
            if (!Array.isArray(message.checkPointList))
                return "checkPointList: array expected";
            for (var i = 0; i < message.checkPointList.length; ++i)
                if (!$util.isInteger(message.checkPointList[i]))
                    return "checkPointList: integer[] expected";
        }
        return null;
    };
    GamerNotifyNewCheckPointListS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewCheckPointListS2C)
            return object;
        var message = new $root.GamerNotifyNewCheckPointListS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.checkPointList) {
            if (!Array.isArray(object.checkPointList))
                throw TypeError(".GamerNotifyNewCheckPointListS2C.checkPointList: array expected");
            message.checkPointList = [];
            for (var i = 0; i < object.checkPointList.length; ++i)
                message.checkPointList[i] = object.checkPointList[i] | 0;
        }
        return message;
    };
    GamerNotifyNewCheckPointListS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.checkPointList = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.checkPointList && message.checkPointList.length) {
            object.checkPointList = [];
            for (var j = 0; j < message.checkPointList.length; ++j)
                object.checkPointList[j] = message.checkPointList[j];
        }
        return object;
    };
    GamerNotifyNewCheckPointListS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewCheckPointListS2C;
})();
$root.GamerNotifyRewardS2C = (function() {
    function GamerNotifyRewardS2C(properties) {
        this.rewardList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyRewardS2C.prototype.error = 0;
    GamerNotifyRewardS2C.prototype.rewardList = $util.emptyArray;
    GamerNotifyRewardS2C.create = function create(properties) {
        return new GamerNotifyRewardS2C(properties);
    };
    GamerNotifyRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.rewardList != null && message.rewardList.length)
            for (var i = 0; i < message.rewardList.length; ++i)
                $root.GameItem.encode(message.rewardList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.rewardList && message.rewardList.length))
                    message.rewardList = [];
                message.rewardList.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.rewardList != null && message.hasOwnProperty("rewardList")) {
            if (!Array.isArray(message.rewardList))
                return "rewardList: array expected";
            for (var i = 0; i < message.rewardList.length; ++i) {
                var error = $root.GameItem.verify(message.rewardList[i]);
                if (error)
                    return "rewardList." + error;
            }
        }
        return null;
    };
    GamerNotifyRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyRewardS2C)
            return object;
        var message = new $root.GamerNotifyRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.rewardList) {
            if (!Array.isArray(object.rewardList))
                throw TypeError(".GamerNotifyRewardS2C.rewardList: array expected");
            message.rewardList = [];
            for (var i = 0; i < object.rewardList.length; ++i) {
                if (typeof object.rewardList[i] !== "object")
                    throw TypeError(".GamerNotifyRewardS2C.rewardList: object expected");
                message.rewardList[i] = $root.GameItem.fromObject(object.rewardList[i]);
            }
        }
        return message;
    };
    GamerNotifyRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.rewardList = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.rewardList && message.rewardList.length) {
            object.rewardList = [];
            for (var j = 0; j < message.rewardList.length; ++j)
                object.rewardList[j] = $root.GameItem.toObject(message.rewardList[j], options);
        }
        return object;
    };
    GamerNotifyRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyRewardS2C;
})();
$root.GetPlotStarRewardC2S = (function() {
    function GetPlotStarRewardC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetPlotStarRewardC2S.prototype.id = 0;
    GetPlotStarRewardC2S.prototype.chapterGradeId = 0;
    GetPlotStarRewardC2S.prototype.chapterLevel = 0;
    GetPlotStarRewardC2S.create = function create(properties) {
        return new GetPlotStarRewardC2S(properties);
    };
    GetPlotStarRewardC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.chapterGradeId != null && message.hasOwnProperty("chapterGradeId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.chapterGradeId);
        if (message.chapterLevel != null && message.hasOwnProperty("chapterLevel"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.chapterLevel);
        return writer;
    };
    GetPlotStarRewardC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetPlotStarRewardC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetPlotStarRewardC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.chapterGradeId = reader.int32();
                break;
            case 3:
                message.chapterLevel = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetPlotStarRewardC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetPlotStarRewardC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.chapterGradeId != null && message.hasOwnProperty("chapterGradeId"))
            if (!$util.isInteger(message.chapterGradeId))
                return "chapterGradeId: integer expected";
        if (message.chapterLevel != null && message.hasOwnProperty("chapterLevel"))
            if (!$util.isInteger(message.chapterLevel))
                return "chapterLevel: integer expected";
        return null;
    };
    GetPlotStarRewardC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetPlotStarRewardC2S)
            return object;
        var message = new $root.GetPlotStarRewardC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.chapterGradeId != null)
            message.chapterGradeId = object.chapterGradeId | 0;
        if (object.chapterLevel != null)
            message.chapterLevel = object.chapterLevel | 0;
        return message;
    };
    GetPlotStarRewardC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.chapterGradeId = 0;
            object.chapterLevel = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.chapterGradeId != null && message.hasOwnProperty("chapterGradeId"))
            object.chapterGradeId = message.chapterGradeId;
        if (message.chapterLevel != null && message.hasOwnProperty("chapterLevel"))
            object.chapterLevel = message.chapterLevel;
        return object;
    };
    GetPlotStarRewardC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetPlotStarRewardC2S;
})();
$root.GetPlotStarRewardS2C = (function() {
    function GetPlotStarRewardS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetPlotStarRewardS2C.prototype.error = 0;
    GetPlotStarRewardS2C.prototype.chapterGradeId = 0;
    GetPlotStarRewardS2C.prototype.chapterLevel = 0;
    GetPlotStarRewardS2C.create = function create(properties) {
        return new GetPlotStarRewardS2C(properties);
    };
    GetPlotStarRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.chapterGradeId != null && message.hasOwnProperty("chapterGradeId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.chapterGradeId);
        if (message.chapterLevel != null && message.hasOwnProperty("chapterLevel"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.chapterLevel);
        return writer;
    };
    GetPlotStarRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetPlotStarRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetPlotStarRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.chapterGradeId = reader.int32();
                break;
            case 3:
                message.chapterLevel = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetPlotStarRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetPlotStarRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.chapterGradeId != null && message.hasOwnProperty("chapterGradeId"))
            if (!$util.isInteger(message.chapterGradeId))
                return "chapterGradeId: integer expected";
        if (message.chapterLevel != null && message.hasOwnProperty("chapterLevel"))
            if (!$util.isInteger(message.chapterLevel))
                return "chapterLevel: integer expected";
        return null;
    };
    GetPlotStarRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetPlotStarRewardS2C)
            return object;
        var message = new $root.GetPlotStarRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.chapterGradeId != null)
            message.chapterGradeId = object.chapterGradeId | 0;
        if (object.chapterLevel != null)
            message.chapterLevel = object.chapterLevel | 0;
        return message;
    };
    GetPlotStarRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.chapterGradeId = 0;
            object.chapterLevel = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.chapterGradeId != null && message.hasOwnProperty("chapterGradeId"))
            object.chapterGradeId = message.chapterGradeId;
        if (message.chapterLevel != null && message.hasOwnProperty("chapterLevel"))
            object.chapterLevel = message.chapterLevel;
        return object;
    };
    GetPlotStarRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetPlotStarRewardS2C;
})();
$root.BuyTimesCheckPointC2S = (function() {
    function BuyTimesCheckPointC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuyTimesCheckPointC2S.prototype.id = 0;
    BuyTimesCheckPointC2S.prototype.type = 0;
    BuyTimesCheckPointC2S.prototype.buyNum = 0;
    BuyTimesCheckPointC2S.create = function create(properties) {
        return new BuyTimesCheckPointC2S(properties);
    };
    BuyTimesCheckPointC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.buyNum != null && message.hasOwnProperty("buyNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.buyNum);
        return writer;
    };
    BuyTimesCheckPointC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuyTimesCheckPointC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuyTimesCheckPointC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.buyNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuyTimesCheckPointC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuyTimesCheckPointC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.buyNum != null && message.hasOwnProperty("buyNum"))
            if (!$util.isInteger(message.buyNum))
                return "buyNum: integer expected";
        return null;
    };
    BuyTimesCheckPointC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.BuyTimesCheckPointC2S)
            return object;
        var message = new $root.BuyTimesCheckPointC2S();
        if (object.id != null)
            message.id = object.id | 0;
        switch (object.type) {
        case "CheckPointType_None":
        case 0:
            message.type = 0;
            break;
        case "Story":
        case 1:
            message.type = 1;
            break;
        case "Elite":
        case 2:
            message.type = 2;
            break;
        case "Devil":
        case 3:
            message.type = 3;
            break;
        case "SecretBook":
        case 4:
            message.type = 4;
            break;
        case "SecretLand":
        case 5:
            message.type = 5;
            break;
        }
        if (object.buyNum != null)
            message.buyNum = object.buyNum | 0;
        return message;
    };
    BuyTimesCheckPointC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.type = options.enums === String ? "CheckPointType_None" : 0;
            object.buyNum = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.CheckPointType[message.type] : message.type;
        if (message.buyNum != null && message.hasOwnProperty("buyNum"))
            object.buyNum = message.buyNum;
        return object;
    };
    BuyTimesCheckPointC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuyTimesCheckPointC2S;
})();
$root.BuyTimesCheckPointS2C = (function() {
    function BuyTimesCheckPointS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuyTimesCheckPointS2C.prototype.error = 0;
    BuyTimesCheckPointS2C.prototype.checkPointData = null;
    BuyTimesCheckPointS2C.create = function create(properties) {
        return new BuyTimesCheckPointS2C(properties);
    };
    BuyTimesCheckPointS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.checkPointData != null && message.hasOwnProperty("checkPointData"))
            $root.CheckPointData.encode(message.checkPointData, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    BuyTimesCheckPointS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuyTimesCheckPointS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuyTimesCheckPointS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.checkPointData = $root.CheckPointData.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuyTimesCheckPointS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuyTimesCheckPointS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.checkPointData != null && message.hasOwnProperty("checkPointData")) {
            var error = $root.CheckPointData.verify(message.checkPointData);
            if (error)
                return "checkPointData." + error;
        }
        return null;
    };
    BuyTimesCheckPointS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.BuyTimesCheckPointS2C)
            return object;
        var message = new $root.BuyTimesCheckPointS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.checkPointData != null) {
            if (typeof object.checkPointData !== "object")
                throw TypeError(".BuyTimesCheckPointS2C.checkPointData: object expected");
            message.checkPointData = $root.CheckPointData.fromObject(object.checkPointData);
        }
        return message;
    };
    BuyTimesCheckPointS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.checkPointData = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.checkPointData != null && message.hasOwnProperty("checkPointData"))
            object.checkPointData = $root.CheckPointData.toObject(message.checkPointData, options);
        return object;
    };
    BuyTimesCheckPointS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuyTimesCheckPointS2C;
})();
$root.SweepCheckPointC2S = (function() {
    function SweepCheckPointC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SweepCheckPointC2S.prototype.id = 0;
    SweepCheckPointC2S.prototype.checkPointId = 0;
    SweepCheckPointC2S.prototype.times = 0;
    SweepCheckPointC2S.create = function create(properties) {
        return new SweepCheckPointC2S(properties);
    };
    SweepCheckPointC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.checkPointId);
        if (message.times != null && message.hasOwnProperty("times"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.times);
        return writer;
    };
    SweepCheckPointC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SweepCheckPointC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SweepCheckPointC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.checkPointId = reader.int32();
                break;
            case 3:
                message.times = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SweepCheckPointC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SweepCheckPointC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            if (!$util.isInteger(message.checkPointId))
                return "checkPointId: integer expected";
        if (message.times != null && message.hasOwnProperty("times"))
            if (!$util.isInteger(message.times))
                return "times: integer expected";
        return null;
    };
    SweepCheckPointC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.SweepCheckPointC2S)
            return object;
        var message = new $root.SweepCheckPointC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.checkPointId != null)
            message.checkPointId = object.checkPointId | 0;
        if (object.times != null)
            message.times = object.times | 0;
        return message;
    };
    SweepCheckPointC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.checkPointId = 0;
            object.times = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            object.checkPointId = message.checkPointId;
        if (message.times != null && message.hasOwnProperty("times"))
            object.times = message.times;
        return object;
    };
    SweepCheckPointC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SweepCheckPointC2S;
})();
$root.SweepCheckPointS2C = (function() {
    function SweepCheckPointS2C(properties) {
        this.itemReward = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SweepCheckPointS2C.prototype.error = 0;
    SweepCheckPointS2C.prototype.checkPointId = 0;
    SweepCheckPointS2C.prototype.times = 0;
    SweepCheckPointS2C.prototype.baseReward = null;
    SweepCheckPointS2C.prototype.itemReward = $util.emptyArray;
    SweepCheckPointS2C.create = function create(properties) {
        return new SweepCheckPointS2C(properties);
    };
    SweepCheckPointS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.checkPointId);
        if (message.times != null && message.hasOwnProperty("times"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.times);
        if (message.baseReward != null && message.hasOwnProperty("baseReward"))
            $root.ItemList.encode(message.baseReward, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.itemReward != null && message.itemReward.length)
            for (var i = 0; i < message.itemReward.length; ++i)
                $root.ItemList.encode(message.itemReward[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    SweepCheckPointS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SweepCheckPointS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SweepCheckPointS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.checkPointId = reader.int32();
                break;
            case 3:
                message.times = reader.int32();
                break;
            case 4:
                message.baseReward = $root.ItemList.decode(reader, reader.uint32());
                break;
            case 5:
                if (!(message.itemReward && message.itemReward.length))
                    message.itemReward = [];
                message.itemReward.push($root.ItemList.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SweepCheckPointS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SweepCheckPointS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            if (!$util.isInteger(message.checkPointId))
                return "checkPointId: integer expected";
        if (message.times != null && message.hasOwnProperty("times"))
            if (!$util.isInteger(message.times))
                return "times: integer expected";
        if (message.baseReward != null && message.hasOwnProperty("baseReward")) {
            var error = $root.ItemList.verify(message.baseReward);
            if (error)
                return "baseReward." + error;
        }
        if (message.itemReward != null && message.hasOwnProperty("itemReward")) {
            if (!Array.isArray(message.itemReward))
                return "itemReward: array expected";
            for (var i = 0; i < message.itemReward.length; ++i) {
                var error = $root.ItemList.verify(message.itemReward[i]);
                if (error)
                    return "itemReward." + error;
            }
        }
        return null;
    };
    SweepCheckPointS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.SweepCheckPointS2C)
            return object;
        var message = new $root.SweepCheckPointS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.checkPointId != null)
            message.checkPointId = object.checkPointId | 0;
        if (object.times != null)
            message.times = object.times | 0;
        if (object.baseReward != null) {
            if (typeof object.baseReward !== "object")
                throw TypeError(".SweepCheckPointS2C.baseReward: object expected");
            message.baseReward = $root.ItemList.fromObject(object.baseReward);
        }
        if (object.itemReward) {
            if (!Array.isArray(object.itemReward))
                throw TypeError(".SweepCheckPointS2C.itemReward: array expected");
            message.itemReward = [];
            for (var i = 0; i < object.itemReward.length; ++i) {
                if (typeof object.itemReward[i] !== "object")
                    throw TypeError(".SweepCheckPointS2C.itemReward: object expected");
                message.itemReward[i] = $root.ItemList.fromObject(object.itemReward[i]);
            }
        }
        return message;
    };
    SweepCheckPointS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.itemReward = [];
        if (options.defaults) {
            object.error = 0;
            object.checkPointId = 0;
            object.times = 0;
            object.baseReward = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            object.checkPointId = message.checkPointId;
        if (message.times != null && message.hasOwnProperty("times"))
            object.times = message.times;
        if (message.baseReward != null && message.hasOwnProperty("baseReward"))
            object.baseReward = $root.ItemList.toObject(message.baseReward, options);
        if (message.itemReward && message.itemReward.length) {
            object.itemReward = [];
            for (var j = 0; j < message.itemReward.length; ++j)
                object.itemReward[j] = $root.ItemList.toObject(message.itemReward[j], options);
        }
        return object;
    };
    SweepCheckPointS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SweepCheckPointS2C;
})();
$root.GamerSettlePVEC2S = (function() {
    function GamerSettlePVEC2S(properties) {
        this.HeroList = [];
        this.reserve = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSettlePVEC2S.prototype.id = 0;
    GamerSettlePVEC2S.prototype.checkPointId = 0;
    GamerSettlePVEC2S.prototype.battleTime = 0;
    GamerSettlePVEC2S.prototype.HeroList = $util.emptyArray;
    GamerSettlePVEC2S.prototype.reserve = $util.emptyArray;
    GamerSettlePVEC2S.create = function create(properties) {
        return new GamerSettlePVEC2S(properties);
    };
    GamerSettlePVEC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.checkPointId);
        if (message.battleTime != null && message.hasOwnProperty("battleTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.battleTime);
        if (message.HeroList != null && message.HeroList.length)
            for (var i = 0; i < message.HeroList.length; ++i)
                $root.HeroStatus.encode(message.HeroList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.reserve != null && message.reserve.length)
            for (var i = 0; i < message.reserve.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.reserve[i]);
        return writer;
    };
    GamerSettlePVEC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSettlePVEC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSettlePVEC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.checkPointId = reader.int32();
                break;
            case 3:
                message.battleTime = reader.int32();
                break;
            case 4:
                if (!(message.HeroList && message.HeroList.length))
                    message.HeroList = [];
                message.HeroList.push($root.HeroStatus.decode(reader, reader.uint32()));
                break;
            case 5:
                if (!(message.reserve && message.reserve.length))
                    message.reserve = [];
                message.reserve.push(reader.string());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSettlePVEC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSettlePVEC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            if (!$util.isInteger(message.checkPointId))
                return "checkPointId: integer expected";
        if (message.battleTime != null && message.hasOwnProperty("battleTime"))
            if (!$util.isInteger(message.battleTime))
                return "battleTime: integer expected";
        if (message.HeroList != null && message.hasOwnProperty("HeroList")) {
            if (!Array.isArray(message.HeroList))
                return "HeroList: array expected";
            for (var i = 0; i < message.HeroList.length; ++i) {
                var error = $root.HeroStatus.verify(message.HeroList[i]);
                if (error)
                    return "HeroList." + error;
            }
        }
        if (message.reserve != null && message.hasOwnProperty("reserve")) {
            if (!Array.isArray(message.reserve))
                return "reserve: array expected";
            for (var i = 0; i < message.reserve.length; ++i)
                if (!$util.isString(message.reserve[i]))
                    return "reserve: string[] expected";
        }
        return null;
    };
    GamerSettlePVEC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSettlePVEC2S)
            return object;
        var message = new $root.GamerSettlePVEC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.checkPointId != null)
            message.checkPointId = object.checkPointId | 0;
        if (object.battleTime != null)
            message.battleTime = object.battleTime | 0;
        if (object.HeroList) {
            if (!Array.isArray(object.HeroList))
                throw TypeError(".GamerSettlePVEC2S.HeroList: array expected");
            message.HeroList = [];
            for (var i = 0; i < object.HeroList.length; ++i) {
                if (typeof object.HeroList[i] !== "object")
                    throw TypeError(".GamerSettlePVEC2S.HeroList: object expected");
                message.HeroList[i] = $root.HeroStatus.fromObject(object.HeroList[i]);
            }
        }
        if (object.reserve) {
            if (!Array.isArray(object.reserve))
                throw TypeError(".GamerSettlePVEC2S.reserve: array expected");
            message.reserve = [];
            for (var i = 0; i < object.reserve.length; ++i)
                message.reserve[i] = String(object.reserve[i]);
        }
        return message;
    };
    GamerSettlePVEC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.HeroList = [];
            object.reserve = [];
        }
        if (options.defaults) {
            object.id = 0;
            object.checkPointId = 0;
            object.battleTime = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            object.checkPointId = message.checkPointId;
        if (message.battleTime != null && message.hasOwnProperty("battleTime"))
            object.battleTime = message.battleTime;
        if (message.HeroList && message.HeroList.length) {
            object.HeroList = [];
            for (var j = 0; j < message.HeroList.length; ++j)
                object.HeroList[j] = $root.HeroStatus.toObject(message.HeroList[j], options);
        }
        if (message.reserve && message.reserve.length) {
            object.reserve = [];
            for (var j = 0; j < message.reserve.length; ++j)
                object.reserve[j] = message.reserve[j];
        }
        return object;
    };
    GamerSettlePVEC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSettlePVEC2S;
})();
$root.GamerSettlePVES2C = (function() {
    function GamerSettlePVES2C(properties) {
        this.reserve = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSettlePVES2C.prototype.error = 0;
    GamerSettlePVES2C.prototype.checkPointId = 0;
    GamerSettlePVES2C.prototype.firstReward = null;
    GamerSettlePVES2C.prototype.baseReward = null;
    GamerSettlePVES2C.prototype.itemReward = null;
    GamerSettlePVES2C.prototype.battleType = 0;
    GamerSettlePVES2C.prototype.reserve = $util.emptyArray;
    GamerSettlePVES2C.create = function create(properties) {
        return new GamerSettlePVES2C(properties);
    };
    GamerSettlePVES2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.checkPointId);
        if (message.firstReward != null && message.hasOwnProperty("firstReward"))
            $root.ItemList.encode(message.firstReward, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.baseReward != null && message.hasOwnProperty("baseReward"))
            $root.ItemList.encode(message.baseReward, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.itemReward != null && message.hasOwnProperty("itemReward"))
            $root.ItemList.encode(message.itemReward, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.battleType != null && message.hasOwnProperty("battleType"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.battleType);
        if (message.reserve != null && message.reserve.length)
            for (var i = 0; i < message.reserve.length; ++i)
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.reserve[i]);
        return writer;
    };
    GamerSettlePVES2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSettlePVES2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSettlePVES2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.checkPointId = reader.int32();
                break;
            case 3:
                message.firstReward = $root.ItemList.decode(reader, reader.uint32());
                break;
            case 4:
                message.baseReward = $root.ItemList.decode(reader, reader.uint32());
                break;
            case 5:
                message.itemReward = $root.ItemList.decode(reader, reader.uint32());
                break;
            case 6:
                message.battleType = reader.int32();
                break;
            case 7:
                if (!(message.reserve && message.reserve.length))
                    message.reserve = [];
                message.reserve.push(reader.string());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSettlePVES2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSettlePVES2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            if (!$util.isInteger(message.checkPointId))
                return "checkPointId: integer expected";
        if (message.firstReward != null && message.hasOwnProperty("firstReward")) {
            var error = $root.ItemList.verify(message.firstReward);
            if (error)
                return "firstReward." + error;
        }
        if (message.baseReward != null && message.hasOwnProperty("baseReward")) {
            var error = $root.ItemList.verify(message.baseReward);
            if (error)
                return "baseReward." + error;
        }
        if (message.itemReward != null && message.hasOwnProperty("itemReward")) {
            var error = $root.ItemList.verify(message.itemReward);
            if (error)
                return "itemReward." + error;
        }
        if (message.battleType != null && message.hasOwnProperty("battleType"))
            if (!$util.isInteger(message.battleType))
                return "battleType: integer expected";
        if (message.reserve != null && message.hasOwnProperty("reserve")) {
            if (!Array.isArray(message.reserve))
                return "reserve: array expected";
            for (var i = 0; i < message.reserve.length; ++i)
                if (!$util.isString(message.reserve[i]))
                    return "reserve: string[] expected";
        }
        return null;
    };
    GamerSettlePVES2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSettlePVES2C)
            return object;
        var message = new $root.GamerSettlePVES2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.checkPointId != null)
            message.checkPointId = object.checkPointId | 0;
        if (object.firstReward != null) {
            if (typeof object.firstReward !== "object")
                throw TypeError(".GamerSettlePVES2C.firstReward: object expected");
            message.firstReward = $root.ItemList.fromObject(object.firstReward);
        }
        if (object.baseReward != null) {
            if (typeof object.baseReward !== "object")
                throw TypeError(".GamerSettlePVES2C.baseReward: object expected");
            message.baseReward = $root.ItemList.fromObject(object.baseReward);
        }
        if (object.itemReward != null) {
            if (typeof object.itemReward !== "object")
                throw TypeError(".GamerSettlePVES2C.itemReward: object expected");
            message.itemReward = $root.ItemList.fromObject(object.itemReward);
        }
        if (object.battleType != null)
            message.battleType = object.battleType | 0;
        if (object.reserve) {
            if (!Array.isArray(object.reserve))
                throw TypeError(".GamerSettlePVES2C.reserve: array expected");
            message.reserve = [];
            for (var i = 0; i < object.reserve.length; ++i)
                message.reserve[i] = String(object.reserve[i]);
        }
        return message;
    };
    GamerSettlePVES2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.reserve = [];
        if (options.defaults) {
            object.error = 0;
            object.checkPointId = 0;
            object.firstReward = null;
            object.baseReward = null;
            object.itemReward = null;
            object.battleType = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            object.checkPointId = message.checkPointId;
        if (message.firstReward != null && message.hasOwnProperty("firstReward"))
            object.firstReward = $root.ItemList.toObject(message.firstReward, options);
        if (message.baseReward != null && message.hasOwnProperty("baseReward"))
            object.baseReward = $root.ItemList.toObject(message.baseReward, options);
        if (message.itemReward != null && message.hasOwnProperty("itemReward"))
            object.itemReward = $root.ItemList.toObject(message.itemReward, options);
        if (message.battleType != null && message.hasOwnProperty("battleType"))
            object.battleType = message.battleType;
        if (message.reserve && message.reserve.length) {
            object.reserve = [];
            for (var j = 0; j < message.reserve.length; ++j)
                object.reserve[j] = message.reserve[j];
        }
        return object;
    };
    GamerSettlePVES2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSettlePVES2C;
})();
$root.DraugListC2S = (function() {
    function DraugListC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DraugListC2S.prototype.id = 0;
    DraugListC2S.create = function create(properties) {
        return new DraugListC2S(properties);
    };
    DraugListC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    DraugListC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DraugListC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DraugListC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DraugListC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DraugListC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    DraugListC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.DraugListC2S)
            return object;
        var message = new $root.DraugListC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    DraugListC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    DraugListC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DraugListC2S;
})();
$root.DraugListS2C = (function() {
    function DraugListS2C(properties) {
        this.draugList = [];
        this.tempAreaDraugList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DraugListS2C.prototype.error = 0;
    DraugListS2C.prototype.awakenLevel = 0;
    DraugListS2C.prototype.selectHeroId = 0;
    DraugListS2C.prototype.draugList = $util.emptyArray;
    DraugListS2C.prototype.tempAreaDraugList = $util.emptyArray;
    DraugListS2C.create = function create(properties) {
        return new DraugListS2C(properties);
    };
    DraugListS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.awakenLevel != null && message.hasOwnProperty("awakenLevel"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.awakenLevel);
        if (message.selectHeroId != null && message.hasOwnProperty("selectHeroId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.selectHeroId);
        if (message.draugList != null && message.draugList.length)
            for (var i = 0; i < message.draugList.length; ++i)
                $root.Draug.encode(message.draugList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.tempAreaDraugList != null && message.tempAreaDraugList.length)
            for (var i = 0; i < message.tempAreaDraugList.length; ++i)
                $root.Draug.encode(message.tempAreaDraugList[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    DraugListS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DraugListS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DraugListS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.awakenLevel = reader.int32();
                break;
            case 3:
                message.selectHeroId = reader.int32();
                break;
            case 4:
                if (!(message.draugList && message.draugList.length))
                    message.draugList = [];
                message.draugList.push($root.Draug.decode(reader, reader.uint32()));
                break;
            case 5:
                if (!(message.tempAreaDraugList && message.tempAreaDraugList.length))
                    message.tempAreaDraugList = [];
                message.tempAreaDraugList.push($root.Draug.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DraugListS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DraugListS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.awakenLevel != null && message.hasOwnProperty("awakenLevel"))
            if (!$util.isInteger(message.awakenLevel))
                return "awakenLevel: integer expected";
        if (message.selectHeroId != null && message.hasOwnProperty("selectHeroId"))
            if (!$util.isInteger(message.selectHeroId))
                return "selectHeroId: integer expected";
        if (message.draugList != null && message.hasOwnProperty("draugList")) {
            if (!Array.isArray(message.draugList))
                return "draugList: array expected";
            for (var i = 0; i < message.draugList.length; ++i) {
                var error = $root.Draug.verify(message.draugList[i]);
                if (error)
                    return "draugList." + error;
            }
        }
        if (message.tempAreaDraugList != null && message.hasOwnProperty("tempAreaDraugList")) {
            if (!Array.isArray(message.tempAreaDraugList))
                return "tempAreaDraugList: array expected";
            for (var i = 0; i < message.tempAreaDraugList.length; ++i) {
                var error = $root.Draug.verify(message.tempAreaDraugList[i]);
                if (error)
                    return "tempAreaDraugList." + error;
            }
        }
        return null;
    };
    DraugListS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.DraugListS2C)
            return object;
        var message = new $root.DraugListS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.awakenLevel != null)
            message.awakenLevel = object.awakenLevel | 0;
        if (object.selectHeroId != null)
            message.selectHeroId = object.selectHeroId | 0;
        if (object.draugList) {
            if (!Array.isArray(object.draugList))
                throw TypeError(".DraugListS2C.draugList: array expected");
            message.draugList = [];
            for (var i = 0; i < object.draugList.length; ++i) {
                if (typeof object.draugList[i] !== "object")
                    throw TypeError(".DraugListS2C.draugList: object expected");
                message.draugList[i] = $root.Draug.fromObject(object.draugList[i]);
            }
        }
        if (object.tempAreaDraugList) {
            if (!Array.isArray(object.tempAreaDraugList))
                throw TypeError(".DraugListS2C.tempAreaDraugList: array expected");
            message.tempAreaDraugList = [];
            for (var i = 0; i < object.tempAreaDraugList.length; ++i) {
                if (typeof object.tempAreaDraugList[i] !== "object")
                    throw TypeError(".DraugListS2C.tempAreaDraugList: object expected");
                message.tempAreaDraugList[i] = $root.Draug.fromObject(object.tempAreaDraugList[i]);
            }
        }
        return message;
    };
    DraugListS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.draugList = [];
            object.tempAreaDraugList = [];
        }
        if (options.defaults) {
            object.error = 0;
            object.awakenLevel = 0;
            object.selectHeroId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.awakenLevel != null && message.hasOwnProperty("awakenLevel"))
            object.awakenLevel = message.awakenLevel;
        if (message.selectHeroId != null && message.hasOwnProperty("selectHeroId"))
            object.selectHeroId = message.selectHeroId;
        if (message.draugList && message.draugList.length) {
            object.draugList = [];
            for (var j = 0; j < message.draugList.length; ++j)
                object.draugList[j] = $root.Draug.toObject(message.draugList[j], options);
        }
        if (message.tempAreaDraugList && message.tempAreaDraugList.length) {
            object.tempAreaDraugList = [];
            for (var j = 0; j < message.tempAreaDraugList.length; ++j)
                object.tempAreaDraugList[j] = $root.Draug.toObject(message.tempAreaDraugList[j], options);
        }
        return object;
    };
    DraugListS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DraugListS2C;
})();
$root.AwakenDraugC2S = (function() {
    function AwakenDraugC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    AwakenDraugC2S.prototype.id = 0;
    AwakenDraugC2S.prototype.type = 0;
    AwakenDraugC2S.create = function create(properties) {
        return new AwakenDraugC2S(properties);
    };
    AwakenDraugC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        return writer;
    };
    AwakenDraugC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    AwakenDraugC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwakenDraugC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    AwakenDraugC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    AwakenDraugC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        return null;
    };
    AwakenDraugC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.AwakenDraugC2S)
            return object;
        var message = new $root.AwakenDraugC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.type != null)
            message.type = object.type | 0;
        return message;
    };
    AwakenDraugC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.type = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        return object;
    };
    AwakenDraugC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return AwakenDraugC2S;
})();
$root.AwakenDraugS2C = (function() {
    function AwakenDraugS2C(properties) {
        this.draugList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    AwakenDraugS2C.prototype.error = 0;
    AwakenDraugS2C.prototype.awakenLevel = 0;
    AwakenDraugS2C.prototype.draugList = $util.emptyArray;
    AwakenDraugS2C.create = function create(properties) {
        return new AwakenDraugS2C(properties);
    };
    AwakenDraugS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.awakenLevel != null && message.hasOwnProperty("awakenLevel"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.awakenLevel);
        if (message.draugList != null && message.draugList.length)
            for (var i = 0; i < message.draugList.length; ++i)
                $root.Draug.encode(message.draugList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    AwakenDraugS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    AwakenDraugS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwakenDraugS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.awakenLevel = reader.int32();
                break;
            case 3:
                if (!(message.draugList && message.draugList.length))
                    message.draugList = [];
                message.draugList.push($root.Draug.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    AwakenDraugS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    AwakenDraugS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.awakenLevel != null && message.hasOwnProperty("awakenLevel"))
            if (!$util.isInteger(message.awakenLevel))
                return "awakenLevel: integer expected";
        if (message.draugList != null && message.hasOwnProperty("draugList")) {
            if (!Array.isArray(message.draugList))
                return "draugList: array expected";
            for (var i = 0; i < message.draugList.length; ++i) {
                var error = $root.Draug.verify(message.draugList[i]);
                if (error)
                    return "draugList." + error;
            }
        }
        return null;
    };
    AwakenDraugS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.AwakenDraugS2C)
            return object;
        var message = new $root.AwakenDraugS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.awakenLevel != null)
            message.awakenLevel = object.awakenLevel | 0;
        if (object.draugList) {
            if (!Array.isArray(object.draugList))
                throw TypeError(".AwakenDraugS2C.draugList: array expected");
            message.draugList = [];
            for (var i = 0; i < object.draugList.length; ++i) {
                if (typeof object.draugList[i] !== "object")
                    throw TypeError(".AwakenDraugS2C.draugList: object expected");
                message.draugList[i] = $root.Draug.fromObject(object.draugList[i]);
            }
        }
        return message;
    };
    AwakenDraugS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.draugList = [];
        if (options.defaults) {
            object.error = 0;
            object.awakenLevel = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.awakenLevel != null && message.hasOwnProperty("awakenLevel"))
            object.awakenLevel = message.awakenLevel;
        if (message.draugList && message.draugList.length) {
            object.draugList = [];
            for (var j = 0; j < message.draugList.length; ++j)
                object.draugList[j] = $root.Draug.toObject(message.draugList[j], options);
        }
        return object;
    };
    AwakenDraugS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return AwakenDraugS2C;
})();
$root.PutDraugIntoPackC2S = (function() {
    function PutDraugIntoPackC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PutDraugIntoPackC2S.prototype.id = 0;
    PutDraugIntoPackC2S.create = function create(properties) {
        return new PutDraugIntoPackC2S(properties);
    };
    PutDraugIntoPackC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    PutDraugIntoPackC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PutDraugIntoPackC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PutDraugIntoPackC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PutDraugIntoPackC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PutDraugIntoPackC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    PutDraugIntoPackC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.PutDraugIntoPackC2S)
            return object;
        var message = new $root.PutDraugIntoPackC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    PutDraugIntoPackC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    PutDraugIntoPackC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PutDraugIntoPackC2S;
})();
$root.PutDraugIntoPackS2C = (function() {
    function PutDraugIntoPackS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PutDraugIntoPackS2C.prototype.error = 0;
    PutDraugIntoPackS2C.create = function create(properties) {
        return new PutDraugIntoPackS2C(properties);
    };
    PutDraugIntoPackS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    PutDraugIntoPackS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PutDraugIntoPackS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PutDraugIntoPackS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PutDraugIntoPackS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PutDraugIntoPackS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    PutDraugIntoPackS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.PutDraugIntoPackS2C)
            return object;
        var message = new $root.PutDraugIntoPackS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    PutDraugIntoPackS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    PutDraugIntoPackS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PutDraugIntoPackS2C;
})();
$root.SwallowDraugC2S = (function() {
    function SwallowDraugC2S(properties) {
        this.beSwallowIdList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SwallowDraugC2S.prototype.id = 0;
    SwallowDraugC2S.prototype.swallowId = 0;
    SwallowDraugC2S.prototype.heroId = 0;
    SwallowDraugC2S.prototype.beSwallowIdList = $util.emptyArray;
    SwallowDraugC2S.create = function create(properties) {
        return new SwallowDraugC2S(properties);
    };
    SwallowDraugC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.swallowId != null && message.hasOwnProperty("swallowId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.swallowId);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.heroId);
        if (message.beSwallowIdList != null && message.beSwallowIdList.length) {
            writer.uint32(/* id 4, wireType 2 =*/34).fork();
            for (var i = 0; i < message.beSwallowIdList.length; ++i)
                writer.int32(message.beSwallowIdList[i]);
            writer.ldelim();
        }
        return writer;
    };
    SwallowDraugC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SwallowDraugC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SwallowDraugC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.swallowId = reader.int32();
                break;
            case 3:
                message.heroId = reader.int32();
                break;
            case 4:
                if (!(message.beSwallowIdList && message.beSwallowIdList.length))
                    message.beSwallowIdList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.beSwallowIdList.push(reader.int32());
                } else
                    message.beSwallowIdList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SwallowDraugC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SwallowDraugC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.swallowId != null && message.hasOwnProperty("swallowId"))
            if (!$util.isInteger(message.swallowId))
                return "swallowId: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.beSwallowIdList != null && message.hasOwnProperty("beSwallowIdList")) {
            if (!Array.isArray(message.beSwallowIdList))
                return "beSwallowIdList: array expected";
            for (var i = 0; i < message.beSwallowIdList.length; ++i)
                if (!$util.isInteger(message.beSwallowIdList[i]))
                    return "beSwallowIdList: integer[] expected";
        }
        return null;
    };
    SwallowDraugC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.SwallowDraugC2S)
            return object;
        var message = new $root.SwallowDraugC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.swallowId != null)
            message.swallowId = object.swallowId | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.beSwallowIdList) {
            if (!Array.isArray(object.beSwallowIdList))
                throw TypeError(".SwallowDraugC2S.beSwallowIdList: array expected");
            message.beSwallowIdList = [];
            for (var i = 0; i < object.beSwallowIdList.length; ++i)
                message.beSwallowIdList[i] = object.beSwallowIdList[i] | 0;
        }
        return message;
    };
    SwallowDraugC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.beSwallowIdList = [];
        if (options.defaults) {
            object.id = 0;
            object.swallowId = 0;
            object.heroId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.swallowId != null && message.hasOwnProperty("swallowId"))
            object.swallowId = message.swallowId;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.beSwallowIdList && message.beSwallowIdList.length) {
            object.beSwallowIdList = [];
            for (var j = 0; j < message.beSwallowIdList.length; ++j)
                object.beSwallowIdList[j] = message.beSwallowIdList[j];
        }
        return object;
    };
    SwallowDraugC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SwallowDraugC2S;
})();
$root.SwallowDraugS2C = (function() {
    function SwallowDraugS2C(properties) {
        this.beSwallowIdList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SwallowDraugS2C.prototype.error = 0;
    SwallowDraugS2C.prototype.draug = null;
    SwallowDraugS2C.prototype.heroId = 0;
    SwallowDraugS2C.prototype.beSwallowIdList = $util.emptyArray;
    SwallowDraugS2C.create = function create(properties) {
        return new SwallowDraugS2C(properties);
    };
    SwallowDraugS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.draug != null && message.hasOwnProperty("draug"))
            $root.Draug.encode(message.draug, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.heroId);
        if (message.beSwallowIdList != null && message.beSwallowIdList.length) {
            writer.uint32(/* id 4, wireType 2 =*/34).fork();
            for (var i = 0; i < message.beSwallowIdList.length; ++i)
                writer.int32(message.beSwallowIdList[i]);
            writer.ldelim();
        }
        return writer;
    };
    SwallowDraugS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SwallowDraugS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SwallowDraugS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.draug = $root.Draug.decode(reader, reader.uint32());
                break;
            case 3:
                message.heroId = reader.int32();
                break;
            case 4:
                if (!(message.beSwallowIdList && message.beSwallowIdList.length))
                    message.beSwallowIdList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.beSwallowIdList.push(reader.int32());
                } else
                    message.beSwallowIdList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SwallowDraugS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SwallowDraugS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.draug != null && message.hasOwnProperty("draug")) {
            var error = $root.Draug.verify(message.draug);
            if (error)
                return "draug." + error;
        }
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.beSwallowIdList != null && message.hasOwnProperty("beSwallowIdList")) {
            if (!Array.isArray(message.beSwallowIdList))
                return "beSwallowIdList: array expected";
            for (var i = 0; i < message.beSwallowIdList.length; ++i)
                if (!$util.isInteger(message.beSwallowIdList[i]))
                    return "beSwallowIdList: integer[] expected";
        }
        return null;
    };
    SwallowDraugS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.SwallowDraugS2C)
            return object;
        var message = new $root.SwallowDraugS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.draug != null) {
            if (typeof object.draug !== "object")
                throw TypeError(".SwallowDraugS2C.draug: object expected");
            message.draug = $root.Draug.fromObject(object.draug);
        }
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.beSwallowIdList) {
            if (!Array.isArray(object.beSwallowIdList))
                throw TypeError(".SwallowDraugS2C.beSwallowIdList: array expected");
            message.beSwallowIdList = [];
            for (var i = 0; i < object.beSwallowIdList.length; ++i)
                message.beSwallowIdList[i] = object.beSwallowIdList[i] | 0;
        }
        return message;
    };
    SwallowDraugS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.beSwallowIdList = [];
        if (options.defaults) {
            object.error = 0;
            object.draug = null;
            object.heroId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.draug != null && message.hasOwnProperty("draug"))
            object.draug = $root.Draug.toObject(message.draug, options);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.beSwallowIdList && message.beSwallowIdList.length) {
            object.beSwallowIdList = [];
            for (var j = 0; j < message.beSwallowIdList.length; ++j)
                object.beSwallowIdList[j] = message.beSwallowIdList[j];
        }
        return object;
    };
    SwallowDraugS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SwallowDraugS2C;
})();
$root.DecomposeDraugC2S = (function() {
    function DecomposeDraugC2S(properties) {
        this.draugIdList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DecomposeDraugC2S.prototype.id = 0;
    DecomposeDraugC2S.prototype.draugIdList = $util.emptyArray;
    DecomposeDraugC2S.create = function create(properties) {
        return new DecomposeDraugC2S(properties);
    };
    DecomposeDraugC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.draugIdList != null && message.draugIdList.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.draugIdList.length; ++i)
                writer.int32(message.draugIdList[i]);
            writer.ldelim();
        }
        return writer;
    };
    DecomposeDraugC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DecomposeDraugC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DecomposeDraugC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                if (!(message.draugIdList && message.draugIdList.length))
                    message.draugIdList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.draugIdList.push(reader.int32());
                } else
                    message.draugIdList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DecomposeDraugC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DecomposeDraugC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.draugIdList != null && message.hasOwnProperty("draugIdList")) {
            if (!Array.isArray(message.draugIdList))
                return "draugIdList: array expected";
            for (var i = 0; i < message.draugIdList.length; ++i)
                if (!$util.isInteger(message.draugIdList[i]))
                    return "draugIdList: integer[] expected";
        }
        return null;
    };
    DecomposeDraugC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.DecomposeDraugC2S)
            return object;
        var message = new $root.DecomposeDraugC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.draugIdList) {
            if (!Array.isArray(object.draugIdList))
                throw TypeError(".DecomposeDraugC2S.draugIdList: array expected");
            message.draugIdList = [];
            for (var i = 0; i < object.draugIdList.length; ++i)
                message.draugIdList[i] = object.draugIdList[i] | 0;
        }
        return message;
    };
    DecomposeDraugC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.draugIdList = [];
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.draugIdList && message.draugIdList.length) {
            object.draugIdList = [];
            for (var j = 0; j < message.draugIdList.length; ++j)
                object.draugIdList[j] = message.draugIdList[j];
        }
        return object;
    };
    DecomposeDraugC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DecomposeDraugC2S;
})();
$root.DecomposeDraugS2C = (function() {
    function DecomposeDraugS2C(properties) {
        this.draugIdList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DecomposeDraugS2C.prototype.error = 0;
    DecomposeDraugS2C.prototype.draugIdList = $util.emptyArray;
    DecomposeDraugS2C.create = function create(properties) {
        return new DecomposeDraugS2C(properties);
    };
    DecomposeDraugS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.draugIdList != null && message.draugIdList.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.draugIdList.length; ++i)
                writer.int32(message.draugIdList[i]);
            writer.ldelim();
        }
        return writer;
    };
    DecomposeDraugS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DecomposeDraugS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DecomposeDraugS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.draugIdList && message.draugIdList.length))
                    message.draugIdList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.draugIdList.push(reader.int32());
                } else
                    message.draugIdList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DecomposeDraugS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DecomposeDraugS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.draugIdList != null && message.hasOwnProperty("draugIdList")) {
            if (!Array.isArray(message.draugIdList))
                return "draugIdList: array expected";
            for (var i = 0; i < message.draugIdList.length; ++i)
                if (!$util.isInteger(message.draugIdList[i]))
                    return "draugIdList: integer[] expected";
        }
        return null;
    };
    DecomposeDraugS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.DecomposeDraugS2C)
            return object;
        var message = new $root.DecomposeDraugS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.draugIdList) {
            if (!Array.isArray(object.draugIdList))
                throw TypeError(".DecomposeDraugS2C.draugIdList: array expected");
            message.draugIdList = [];
            for (var i = 0; i < object.draugIdList.length; ++i)
                message.draugIdList[i] = object.draugIdList[i] | 0;
        }
        return message;
    };
    DecomposeDraugS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.draugIdList = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.draugIdList && message.draugIdList.length) {
            object.draugIdList = [];
            for (var j = 0; j < message.draugIdList.length; ++j)
                object.draugIdList[j] = message.draugIdList[j];
        }
        return object;
    };
    DecomposeDraugS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DecomposeDraugS2C;
})();
$root.LockDraugC2S = (function() {
    function LockDraugC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    LockDraugC2S.prototype.id = 0;
    LockDraugC2S.prototype.draugId = 0;
    LockDraugC2S.create = function create(properties) {
        return new LockDraugC2S(properties);
    };
    LockDraugC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.draugId);
        return writer;
    };
    LockDraugC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    LockDraugC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LockDraugC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.draugId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    LockDraugC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    LockDraugC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            if (!$util.isInteger(message.draugId))
                return "draugId: integer expected";
        return null;
    };
    LockDraugC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.LockDraugC2S)
            return object;
        var message = new $root.LockDraugC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.draugId != null)
            message.draugId = object.draugId | 0;
        return message;
    };
    LockDraugC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.draugId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            object.draugId = message.draugId;
        return object;
    };
    LockDraugC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return LockDraugC2S;
})();
$root.LockDraugS2C = (function() {
    function LockDraugS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    LockDraugS2C.prototype.error = 0;
    LockDraugS2C.prototype.draugId = 0;
    LockDraugS2C.prototype.isLock = false;
    LockDraugS2C.create = function create(properties) {
        return new LockDraugS2C(properties);
    };
    LockDraugS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.draugId);
        if (message.isLock != null && message.hasOwnProperty("isLock"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isLock);
        return writer;
    };
    LockDraugS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    LockDraugS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LockDraugS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.draugId = reader.int32();
                break;
            case 3:
                message.isLock = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    LockDraugS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    LockDraugS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            if (!$util.isInteger(message.draugId))
                return "draugId: integer expected";
        if (message.isLock != null && message.hasOwnProperty("isLock"))
            if (typeof message.isLock !== "boolean")
                return "isLock: boolean expected";
        return null;
    };
    LockDraugS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.LockDraugS2C)
            return object;
        var message = new $root.LockDraugS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.draugId != null)
            message.draugId = object.draugId | 0;
        if (object.isLock != null)
            message.isLock = Boolean(object.isLock);
        return message;
    };
    LockDraugS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.draugId = 0;
            object.isLock = false;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            object.draugId = message.draugId;
        if (message.isLock != null && message.hasOwnProperty("isLock"))
            object.isLock = message.isLock;
        return object;
    };
    LockDraugS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return LockDraugS2C;
})();
$root.WearDraugC2S = (function() {
    function WearDraugC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    WearDraugC2S.prototype.id = 0;
    WearDraugC2S.prototype.draugId = 0;
    WearDraugC2S.prototype.heroId = 0;
    WearDraugC2S.create = function create(properties) {
        return new WearDraugC2S(properties);
    };
    WearDraugC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.draugId);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.heroId);
        return writer;
    };
    WearDraugC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    WearDraugC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WearDraugC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.draugId = reader.int32();
                break;
            case 3:
                message.heroId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    WearDraugC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    WearDraugC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            if (!$util.isInteger(message.draugId))
                return "draugId: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        return null;
    };
    WearDraugC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.WearDraugC2S)
            return object;
        var message = new $root.WearDraugC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.draugId != null)
            message.draugId = object.draugId | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        return message;
    };
    WearDraugC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.draugId = 0;
            object.heroId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            object.draugId = message.draugId;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        return object;
    };
    WearDraugC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return WearDraugC2S;
})();
$root.WearDraugS2C = (function() {
    function WearDraugS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    WearDraugS2C.prototype.error = 0;
    WearDraugS2C.prototype.draugId = 0;
    WearDraugS2C.prototype.heroId = 0;
    WearDraugS2C.prototype.unwearDraug = null;
    WearDraugS2C.create = function create(properties) {
        return new WearDraugS2C(properties);
    };
    WearDraugS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.draugId);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.heroId);
        if (message.unwearDraug != null && message.hasOwnProperty("unwearDraug"))
            $root.Draug.encode(message.unwearDraug, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    WearDraugS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    WearDraugS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WearDraugS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.draugId = reader.int32();
                break;
            case 3:
                message.heroId = reader.int32();
                break;
            case 4:
                message.unwearDraug = $root.Draug.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    WearDraugS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    WearDraugS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            if (!$util.isInteger(message.draugId))
                return "draugId: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.unwearDraug != null && message.hasOwnProperty("unwearDraug")) {
            var error = $root.Draug.verify(message.unwearDraug);
            if (error)
                return "unwearDraug." + error;
        }
        return null;
    };
    WearDraugS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.WearDraugS2C)
            return object;
        var message = new $root.WearDraugS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.draugId != null)
            message.draugId = object.draugId | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.unwearDraug != null) {
            if (typeof object.unwearDraug !== "object")
                throw TypeError(".WearDraugS2C.unwearDraug: object expected");
            message.unwearDraug = $root.Draug.fromObject(object.unwearDraug);
        }
        return message;
    };
    WearDraugS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.draugId = 0;
            object.heroId = 0;
            object.unwearDraug = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.draugId != null && message.hasOwnProperty("draugId"))
            object.draugId = message.draugId;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.unwearDraug != null && message.hasOwnProperty("unwearDraug"))
            object.unwearDraug = $root.Draug.toObject(message.unwearDraug, options);
        return object;
    };
    WearDraugS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return WearDraugS2C;
})();
$root.UnwearDraugC2S = (function() {
    function UnwearDraugC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    UnwearDraugC2S.prototype.id = 0;
    UnwearDraugC2S.prototype.heroId = 0;
    UnwearDraugC2S.prototype.pos = 0;
    UnwearDraugC2S.create = function create(properties) {
        return new UnwearDraugC2S(properties);
    };
    UnwearDraugC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        if (message.pos != null && message.hasOwnProperty("pos"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pos);
        return writer;
    };
    UnwearDraugC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    UnwearDraugC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UnwearDraugC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            case 3:
                message.pos = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    UnwearDraugC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    UnwearDraugC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.pos != null && message.hasOwnProperty("pos"))
            if (!$util.isInteger(message.pos))
                return "pos: integer expected";
        return null;
    };
    UnwearDraugC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.UnwearDraugC2S)
            return object;
        var message = new $root.UnwearDraugC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.pos != null)
            message.pos = object.pos | 0;
        return message;
    };
    UnwearDraugC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroId = 0;
            object.pos = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.pos != null && message.hasOwnProperty("pos"))
            object.pos = message.pos;
        return object;
    };
    UnwearDraugC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return UnwearDraugC2S;
})();
$root.UnwearDraugS2C = (function() {
    function UnwearDraugS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    UnwearDraugS2C.prototype.error = 0;
    UnwearDraugS2C.prototype.heroId = 0;
    UnwearDraugS2C.prototype.unwearDraug = null;
    UnwearDraugS2C.create = function create(properties) {
        return new UnwearDraugS2C(properties);
    };
    UnwearDraugS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        if (message.unwearDraug != null && message.hasOwnProperty("unwearDraug"))
            $root.Draug.encode(message.unwearDraug, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    UnwearDraugS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    UnwearDraugS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UnwearDraugS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            case 3:
                message.unwearDraug = $root.Draug.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    UnwearDraugS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    UnwearDraugS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.unwearDraug != null && message.hasOwnProperty("unwearDraug")) {
            var error = $root.Draug.verify(message.unwearDraug);
            if (error)
                return "unwearDraug." + error;
        }
        return null;
    };
    UnwearDraugS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.UnwearDraugS2C)
            return object;
        var message = new $root.UnwearDraugS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.unwearDraug != null) {
            if (typeof object.unwearDraug !== "object")
                throw TypeError(".UnwearDraugS2C.unwearDraug: object expected");
            message.unwearDraug = $root.Draug.fromObject(object.unwearDraug);
        }
        return message;
    };
    UnwearDraugS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.heroId = 0;
            object.unwearDraug = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.unwearDraug != null && message.hasOwnProperty("unwearDraug"))
            object.unwearDraug = $root.Draug.toObject(message.unwearDraug, options);
        return object;
    };
    UnwearDraugS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return UnwearDraugS2C;
})();
$root.DraugSelectHeroC2S = (function() {
    function DraugSelectHeroC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DraugSelectHeroC2S.prototype.id = 0;
    DraugSelectHeroC2S.prototype.selectHeroId = 0;
    DraugSelectHeroC2S.create = function create(properties) {
        return new DraugSelectHeroC2S(properties);
    };
    DraugSelectHeroC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.selectHeroId != null && message.hasOwnProperty("selectHeroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.selectHeroId);
        return writer;
    };
    DraugSelectHeroC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DraugSelectHeroC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DraugSelectHeroC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.selectHeroId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DraugSelectHeroC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DraugSelectHeroC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.selectHeroId != null && message.hasOwnProperty("selectHeroId"))
            if (!$util.isInteger(message.selectHeroId))
                return "selectHeroId: integer expected";
        return null;
    };
    DraugSelectHeroC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.DraugSelectHeroC2S)
            return object;
        var message = new $root.DraugSelectHeroC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.selectHeroId != null)
            message.selectHeroId = object.selectHeroId | 0;
        return message;
    };
    DraugSelectHeroC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.selectHeroId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.selectHeroId != null && message.hasOwnProperty("selectHeroId"))
            object.selectHeroId = message.selectHeroId;
        return object;
    };
    DraugSelectHeroC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DraugSelectHeroC2S;
})();
$root.DraugSelectHeroS2C = (function() {
    function DraugSelectHeroS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DraugSelectHeroS2C.prototype.error = 0;
    DraugSelectHeroS2C.prototype.selectHeroId = 0;
    DraugSelectHeroS2C.create = function create(properties) {
        return new DraugSelectHeroS2C(properties);
    };
    DraugSelectHeroS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.selectHeroId != null && message.hasOwnProperty("selectHeroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.selectHeroId);
        return writer;
    };
    DraugSelectHeroS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DraugSelectHeroS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DraugSelectHeroS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.selectHeroId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DraugSelectHeroS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DraugSelectHeroS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.selectHeroId != null && message.hasOwnProperty("selectHeroId"))
            if (!$util.isInteger(message.selectHeroId))
                return "selectHeroId: integer expected";
        return null;
    };
    DraugSelectHeroS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.DraugSelectHeroS2C)
            return object;
        var message = new $root.DraugSelectHeroS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.selectHeroId != null)
            message.selectHeroId = object.selectHeroId | 0;
        return message;
    };
    DraugSelectHeroS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.selectHeroId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.selectHeroId != null && message.hasOwnProperty("selectHeroId"))
            object.selectHeroId = message.selectHeroId;
        return object;
    };
    DraugSelectHeroS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DraugSelectHeroS2C;
})();
$root.HeroGroupListC2S = (function() {
    function HeroGroupListC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    HeroGroupListC2S.prototype.id = 0;
    HeroGroupListC2S.create = function create(properties) {
        return new HeroGroupListC2S(properties);
    };
    HeroGroupListC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    HeroGroupListC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    HeroGroupListC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HeroGroupListC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    HeroGroupListC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    HeroGroupListC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    HeroGroupListC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.HeroGroupListC2S)
            return object;
        var message = new $root.HeroGroupListC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    HeroGroupListC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    HeroGroupListC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HeroGroupListC2S;
})();
$root.HeroGroupListS2C = (function() {
    function HeroGroupListS2C(properties) {
        this.heroGroupList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    HeroGroupListS2C.prototype.error = 0;
    HeroGroupListS2C.prototype.heroGroupList = $util.emptyArray;
    HeroGroupListS2C.create = function create(properties) {
        return new HeroGroupListS2C(properties);
    };
    HeroGroupListS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroGroupList != null && message.heroGroupList.length)
            for (var i = 0; i < message.heroGroupList.length; ++i)
                $root.HeroGroup.encode(message.heroGroupList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    HeroGroupListS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    HeroGroupListS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HeroGroupListS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.heroGroupList && message.heroGroupList.length))
                    message.heroGroupList = [];
                message.heroGroupList.push($root.HeroGroup.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    HeroGroupListS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    HeroGroupListS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroGroupList != null && message.hasOwnProperty("heroGroupList")) {
            if (!Array.isArray(message.heroGroupList))
                return "heroGroupList: array expected";
            for (var i = 0; i < message.heroGroupList.length; ++i) {
                var error = $root.HeroGroup.verify(message.heroGroupList[i]);
                if (error)
                    return "heroGroupList." + error;
            }
        }
        return null;
    };
    HeroGroupListS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.HeroGroupListS2C)
            return object;
        var message = new $root.HeroGroupListS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroGroupList) {
            if (!Array.isArray(object.heroGroupList))
                throw TypeError(".HeroGroupListS2C.heroGroupList: array expected");
            message.heroGroupList = [];
            for (var i = 0; i < object.heroGroupList.length; ++i) {
                if (typeof object.heroGroupList[i] !== "object")
                    throw TypeError(".HeroGroupListS2C.heroGroupList: object expected");
                message.heroGroupList[i] = $root.HeroGroup.fromObject(object.heroGroupList[i]);
            }
        }
        return message;
    };
    HeroGroupListS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.heroGroupList = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroGroupList && message.heroGroupList.length) {
            object.heroGroupList = [];
            for (var j = 0; j < message.heroGroupList.length; ++j)
                object.heroGroupList[j] = $root.HeroGroup.toObject(message.heroGroupList[j], options);
        }
        return object;
    };
    HeroGroupListS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HeroGroupListS2C;
})();
$root.UnlockHeroGroupC2S = (function() {
    function UnlockHeroGroupC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    UnlockHeroGroupC2S.prototype.id = 0;
    UnlockHeroGroupC2S.prototype.heroGroupId = 0;
    UnlockHeroGroupC2S.create = function create(properties) {
        return new UnlockHeroGroupC2S(properties);
    };
    UnlockHeroGroupC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroGroupId);
        return writer;
    };
    UnlockHeroGroupC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    UnlockHeroGroupC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UnlockHeroGroupC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroGroupId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    UnlockHeroGroupC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    UnlockHeroGroupC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            if (!$util.isInteger(message.heroGroupId))
                return "heroGroupId: integer expected";
        return null;
    };
    UnlockHeroGroupC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.UnlockHeroGroupC2S)
            return object;
        var message = new $root.UnlockHeroGroupC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroGroupId != null)
            message.heroGroupId = object.heroGroupId | 0;
        return message;
    };
    UnlockHeroGroupC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroGroupId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            object.heroGroupId = message.heroGroupId;
        return object;
    };
    UnlockHeroGroupC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return UnlockHeroGroupC2S;
})();
$root.UnlockHeroGroupS2C = (function() {
    function UnlockHeroGroupS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    UnlockHeroGroupS2C.prototype.error = 0;
    UnlockHeroGroupS2C.prototype.heroGroup = null;
    UnlockHeroGroupS2C.create = function create(properties) {
        return new UnlockHeroGroupS2C(properties);
    };
    UnlockHeroGroupS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroGroup != null && message.hasOwnProperty("heroGroup"))
            $root.HeroGroup.encode(message.heroGroup, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    UnlockHeroGroupS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    UnlockHeroGroupS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UnlockHeroGroupS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.heroGroup = $root.HeroGroup.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    UnlockHeroGroupS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    UnlockHeroGroupS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroGroup != null && message.hasOwnProperty("heroGroup")) {
            var error = $root.HeroGroup.verify(message.heroGroup);
            if (error)
                return "heroGroup." + error;
        }
        return null;
    };
    UnlockHeroGroupS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.UnlockHeroGroupS2C)
            return object;
        var message = new $root.UnlockHeroGroupS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroGroup != null) {
            if (typeof object.heroGroup !== "object")
                throw TypeError(".UnlockHeroGroupS2C.heroGroup: object expected");
            message.heroGroup = $root.HeroGroup.fromObject(object.heroGroup);
        }
        return message;
    };
    UnlockHeroGroupS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.heroGroup = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroGroup != null && message.hasOwnProperty("heroGroup"))
            object.heroGroup = $root.HeroGroup.toObject(message.heroGroup, options);
        return object;
    };
    UnlockHeroGroupS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return UnlockHeroGroupS2C;
})();
$root.ChangeNameHeroGroupC2S = (function() {
    function ChangeNameHeroGroupC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ChangeNameHeroGroupC2S.prototype.id = 0;
    ChangeNameHeroGroupC2S.prototype.heroGroupId = 0;
    ChangeNameHeroGroupC2S.prototype.name = "";
    ChangeNameHeroGroupC2S.create = function create(properties) {
        return new ChangeNameHeroGroupC2S(properties);
    };
    ChangeNameHeroGroupC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroGroupId);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        return writer;
    };
    ChangeNameHeroGroupC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ChangeNameHeroGroupC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ChangeNameHeroGroupC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroGroupId = reader.int32();
                break;
            case 3:
                message.name = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ChangeNameHeroGroupC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ChangeNameHeroGroupC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            if (!$util.isInteger(message.heroGroupId))
                return "heroGroupId: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };
    ChangeNameHeroGroupC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.ChangeNameHeroGroupC2S)
            return object;
        var message = new $root.ChangeNameHeroGroupC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroGroupId != null)
            message.heroGroupId = object.heroGroupId | 0;
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };
    ChangeNameHeroGroupC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroGroupId = 0;
            object.name = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            object.heroGroupId = message.heroGroupId;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };
    ChangeNameHeroGroupC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ChangeNameHeroGroupC2S;
})();
$root.ChangeNameHeroGroupS2C = (function() {
    function ChangeNameHeroGroupS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ChangeNameHeroGroupS2C.prototype.error = 0;
    ChangeNameHeroGroupS2C.prototype.heroGroupId = 0;
    ChangeNameHeroGroupS2C.prototype.name = "";
    ChangeNameHeroGroupS2C.create = function create(properties) {
        return new ChangeNameHeroGroupS2C(properties);
    };
    ChangeNameHeroGroupS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroGroupId);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        return writer;
    };
    ChangeNameHeroGroupS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ChangeNameHeroGroupS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ChangeNameHeroGroupS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.heroGroupId = reader.int32();
                break;
            case 3:
                message.name = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ChangeNameHeroGroupS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ChangeNameHeroGroupS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            if (!$util.isInteger(message.heroGroupId))
                return "heroGroupId: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };
    ChangeNameHeroGroupS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.ChangeNameHeroGroupS2C)
            return object;
        var message = new $root.ChangeNameHeroGroupS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroGroupId != null)
            message.heroGroupId = object.heroGroupId | 0;
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };
    ChangeNameHeroGroupS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.heroGroupId = 0;
            object.name = "";
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            object.heroGroupId = message.heroGroupId;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };
    ChangeNameHeroGroupS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ChangeNameHeroGroupS2C;
})();
$root.GamerNotifyUnlockPosHeroGroupS2C = (function() {
    function GamerNotifyUnlockPosHeroGroupS2C(properties) {
        this.heroGroupList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyUnlockPosHeroGroupS2C.prototype.error = 0;
    GamerNotifyUnlockPosHeroGroupS2C.prototype.heroGroupList = $util.emptyArray;
    GamerNotifyUnlockPosHeroGroupS2C.create = function create(properties) {
        return new GamerNotifyUnlockPosHeroGroupS2C(properties);
    };
    GamerNotifyUnlockPosHeroGroupS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroGroupList != null && message.heroGroupList.length)
            for (var i = 0; i < message.heroGroupList.length; ++i)
                $root.HeroGroup.encode(message.heroGroupList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyUnlockPosHeroGroupS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyUnlockPosHeroGroupS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyUnlockPosHeroGroupS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.heroGroupList && message.heroGroupList.length))
                    message.heroGroupList = [];
                message.heroGroupList.push($root.HeroGroup.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyUnlockPosHeroGroupS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyUnlockPosHeroGroupS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroGroupList != null && message.hasOwnProperty("heroGroupList")) {
            if (!Array.isArray(message.heroGroupList))
                return "heroGroupList: array expected";
            for (var i = 0; i < message.heroGroupList.length; ++i) {
                var error = $root.HeroGroup.verify(message.heroGroupList[i]);
                if (error)
                    return "heroGroupList." + error;
            }
        }
        return null;
    };
    GamerNotifyUnlockPosHeroGroupS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyUnlockPosHeroGroupS2C)
            return object;
        var message = new $root.GamerNotifyUnlockPosHeroGroupS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroGroupList) {
            if (!Array.isArray(object.heroGroupList))
                throw TypeError(".GamerNotifyUnlockPosHeroGroupS2C.heroGroupList: array expected");
            message.heroGroupList = [];
            for (var i = 0; i < object.heroGroupList.length; ++i) {
                if (typeof object.heroGroupList[i] !== "object")
                    throw TypeError(".GamerNotifyUnlockPosHeroGroupS2C.heroGroupList: object expected");
                message.heroGroupList[i] = $root.HeroGroup.fromObject(object.heroGroupList[i]);
            }
        }
        return message;
    };
    GamerNotifyUnlockPosHeroGroupS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.heroGroupList = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroGroupList && message.heroGroupList.length) {
            object.heroGroupList = [];
            for (var j = 0; j < message.heroGroupList.length; ++j)
                object.heroGroupList[j] = $root.HeroGroup.toObject(message.heroGroupList[j], options);
        }
        return object;
    };
    GamerNotifyUnlockPosHeroGroupS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyUnlockPosHeroGroupS2C;
})();
$root.HeroGroupChangeHeroC2S = (function() {
    function HeroGroupChangeHeroC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    HeroGroupChangeHeroC2S.prototype.id = 0;
    HeroGroupChangeHeroC2S.prototype.heroGroupId = 0;
    HeroGroupChangeHeroC2S.prototype.pos = 0;
    HeroGroupChangeHeroC2S.prototype.heroId = 0;
    HeroGroupChangeHeroC2S.create = function create(properties) {
        return new HeroGroupChangeHeroC2S(properties);
    };
    HeroGroupChangeHeroC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroGroupId);
        if (message.pos != null && message.hasOwnProperty("pos"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pos);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.heroId);
        return writer;
    };
    HeroGroupChangeHeroC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    HeroGroupChangeHeroC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HeroGroupChangeHeroC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroGroupId = reader.int32();
                break;
            case 3:
                message.pos = reader.int32();
                break;
            case 4:
                message.heroId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    HeroGroupChangeHeroC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    HeroGroupChangeHeroC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            if (!$util.isInteger(message.heroGroupId))
                return "heroGroupId: integer expected";
        if (message.pos != null && message.hasOwnProperty("pos"))
            if (!$util.isInteger(message.pos))
                return "pos: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        return null;
    };
    HeroGroupChangeHeroC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.HeroGroupChangeHeroC2S)
            return object;
        var message = new $root.HeroGroupChangeHeroC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroGroupId != null)
            message.heroGroupId = object.heroGroupId | 0;
        if (object.pos != null)
            message.pos = object.pos | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        return message;
    };
    HeroGroupChangeHeroC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroGroupId = 0;
            object.pos = 0;
            object.heroId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            object.heroGroupId = message.heroGroupId;
        if (message.pos != null && message.hasOwnProperty("pos"))
            object.pos = message.pos;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        return object;
    };
    HeroGroupChangeHeroC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HeroGroupChangeHeroC2S;
})();
$root.HeroGroupChangeHeroS2C = (function() {
    function HeroGroupChangeHeroS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    HeroGroupChangeHeroS2C.prototype.error = 0;
    HeroGroupChangeHeroS2C.prototype.heroGroupId = 0;
    HeroGroupChangeHeroS2C.prototype.pos = 0;
    HeroGroupChangeHeroS2C.prototype.heroId = 0;
    HeroGroupChangeHeroS2C.create = function create(properties) {
        return new HeroGroupChangeHeroS2C(properties);
    };
    HeroGroupChangeHeroS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroGroupId);
        if (message.pos != null && message.hasOwnProperty("pos"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pos);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.heroId);
        return writer;
    };
    HeroGroupChangeHeroS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    HeroGroupChangeHeroS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HeroGroupChangeHeroS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.heroGroupId = reader.int32();
                break;
            case 3:
                message.pos = reader.int32();
                break;
            case 4:
                message.heroId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    HeroGroupChangeHeroS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    HeroGroupChangeHeroS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            if (!$util.isInteger(message.heroGroupId))
                return "heroGroupId: integer expected";
        if (message.pos != null && message.hasOwnProperty("pos"))
            if (!$util.isInteger(message.pos))
                return "pos: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        return null;
    };
    HeroGroupChangeHeroS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.HeroGroupChangeHeroS2C)
            return object;
        var message = new $root.HeroGroupChangeHeroS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroGroupId != null)
            message.heroGroupId = object.heroGroupId | 0;
        if (object.pos != null)
            message.pos = object.pos | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        return message;
    };
    HeroGroupChangeHeroS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.heroGroupId = 0;
            object.pos = 0;
            object.heroId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            object.heroGroupId = message.heroGroupId;
        if (message.pos != null && message.hasOwnProperty("pos"))
            object.pos = message.pos;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        return object;
    };
    HeroGroupChangeHeroS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HeroGroupChangeHeroS2C;
})();
$root.HeroGroupChangeSkillC2S = (function() {
    function HeroGroupChangeSkillC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    HeroGroupChangeSkillC2S.prototype.id = 0;
    HeroGroupChangeSkillC2S.prototype.heroGroupId = 0;
    HeroGroupChangeSkillC2S.prototype.pos = 0;
    HeroGroupChangeSkillC2S.prototype.skillId = 0;
    HeroGroupChangeSkillC2S.create = function create(properties) {
        return new HeroGroupChangeSkillC2S(properties);
    };
    HeroGroupChangeSkillC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroGroupId);
        if (message.pos != null && message.hasOwnProperty("pos"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pos);
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.skillId);
        return writer;
    };
    HeroGroupChangeSkillC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    HeroGroupChangeSkillC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HeroGroupChangeSkillC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroGroupId = reader.int32();
                break;
            case 3:
                message.pos = reader.int32();
                break;
            case 4:
                message.skillId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    HeroGroupChangeSkillC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    HeroGroupChangeSkillC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            if (!$util.isInteger(message.heroGroupId))
                return "heroGroupId: integer expected";
        if (message.pos != null && message.hasOwnProperty("pos"))
            if (!$util.isInteger(message.pos))
                return "pos: integer expected";
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            if (!$util.isInteger(message.skillId))
                return "skillId: integer expected";
        return null;
    };
    HeroGroupChangeSkillC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.HeroGroupChangeSkillC2S)
            return object;
        var message = new $root.HeroGroupChangeSkillC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroGroupId != null)
            message.heroGroupId = object.heroGroupId | 0;
        if (object.pos != null)
            message.pos = object.pos | 0;
        if (object.skillId != null)
            message.skillId = object.skillId | 0;
        return message;
    };
    HeroGroupChangeSkillC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroGroupId = 0;
            object.pos = 0;
            object.skillId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            object.heroGroupId = message.heroGroupId;
        if (message.pos != null && message.hasOwnProperty("pos"))
            object.pos = message.pos;
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            object.skillId = message.skillId;
        return object;
    };
    HeroGroupChangeSkillC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HeroGroupChangeSkillC2S;
})();
$root.HeroGroupChangeSkillS2C = (function() {
    function HeroGroupChangeSkillS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    HeroGroupChangeSkillS2C.prototype.error = 0;
    HeroGroupChangeSkillS2C.prototype.heroGroupId = 0;
    HeroGroupChangeSkillS2C.prototype.pos = 0;
    HeroGroupChangeSkillS2C.prototype.skillId = 0;
    HeroGroupChangeSkillS2C.create = function create(properties) {
        return new HeroGroupChangeSkillS2C(properties);
    };
    HeroGroupChangeSkillS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroGroupId);
        if (message.pos != null && message.hasOwnProperty("pos"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pos);
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.skillId);
        return writer;
    };
    HeroGroupChangeSkillS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    HeroGroupChangeSkillS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HeroGroupChangeSkillS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.heroGroupId = reader.int32();
                break;
            case 3:
                message.pos = reader.int32();
                break;
            case 4:
                message.skillId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    HeroGroupChangeSkillS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    HeroGroupChangeSkillS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            if (!$util.isInteger(message.heroGroupId))
                return "heroGroupId: integer expected";
        if (message.pos != null && message.hasOwnProperty("pos"))
            if (!$util.isInteger(message.pos))
                return "pos: integer expected";
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            if (!$util.isInteger(message.skillId))
                return "skillId: integer expected";
        return null;
    };
    HeroGroupChangeSkillS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.HeroGroupChangeSkillS2C)
            return object;
        var message = new $root.HeroGroupChangeSkillS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroGroupId != null)
            message.heroGroupId = object.heroGroupId | 0;
        if (object.pos != null)
            message.pos = object.pos | 0;
        if (object.skillId != null)
            message.skillId = object.skillId | 0;
        return message;
    };
    HeroGroupChangeSkillS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.heroGroupId = 0;
            object.pos = 0;
            object.skillId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroGroupId != null && message.hasOwnProperty("heroGroupId"))
            object.heroGroupId = message.heroGroupId;
        if (message.pos != null && message.hasOwnProperty("pos"))
            object.pos = message.pos;
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            object.skillId = message.skillId;
        return object;
    };
    HeroGroupChangeSkillS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HeroGroupChangeSkillS2C;
})();
$root.BuyFatigueC2S = (function() {
    function BuyFatigueC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuyFatigueC2S.prototype.id = 0;
    BuyFatigueC2S.prototype.goodId = 0;
    BuyFatigueC2S.create = function create(properties) {
        return new BuyFatigueC2S(properties);
    };
    BuyFatigueC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.goodId != null && message.hasOwnProperty("goodId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.goodId);
        return writer;
    };
    BuyFatigueC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuyFatigueC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuyFatigueC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.goodId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuyFatigueC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuyFatigueC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.goodId != null && message.hasOwnProperty("goodId"))
            if (!$util.isInteger(message.goodId))
                return "goodId: integer expected";
        return null;
    };
    BuyFatigueC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.BuyFatigueC2S)
            return object;
        var message = new $root.BuyFatigueC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.goodId != null)
            message.goodId = object.goodId | 0;
        return message;
    };
    BuyFatigueC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.goodId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.goodId != null && message.hasOwnProperty("goodId"))
            object.goodId = message.goodId;
        return object;
    };
    BuyFatigueC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuyFatigueC2S;
})();
$root.BuyFatigueS2C = (function() {
    function BuyFatigueS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuyFatigueS2C.prototype.error = 0;
    BuyFatigueS2C.prototype.goodId = 0;
    BuyFatigueS2C.create = function create(properties) {
        return new BuyFatigueS2C(properties);
    };
    BuyFatigueS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.goodId != null && message.hasOwnProperty("goodId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.goodId);
        return writer;
    };
    BuyFatigueS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuyFatigueS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuyFatigueS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.goodId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuyFatigueS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuyFatigueS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.goodId != null && message.hasOwnProperty("goodId"))
            if (!$util.isInteger(message.goodId))
                return "goodId: integer expected";
        return null;
    };
    BuyFatigueS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.BuyFatigueS2C)
            return object;
        var message = new $root.BuyFatigueS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.goodId != null)
            message.goodId = object.goodId | 0;
        return message;
    };
    BuyFatigueS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.goodId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.goodId != null && message.hasOwnProperty("goodId"))
            object.goodId = message.goodId;
        return object;
    };
    BuyFatigueS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuyFatigueS2C;
})();
$root.GetFatigueWelfareC2S = (function() {
    function GetFatigueWelfareC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetFatigueWelfareC2S.prototype.id = 0;
    GetFatigueWelfareC2S.prototype.welfareId = 0;
    GetFatigueWelfareC2S.create = function create(properties) {
        return new GetFatigueWelfareC2S(properties);
    };
    GetFatigueWelfareC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.welfareId != null && message.hasOwnProperty("welfareId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.welfareId);
        return writer;
    };
    GetFatigueWelfareC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetFatigueWelfareC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetFatigueWelfareC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.welfareId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetFatigueWelfareC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetFatigueWelfareC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.welfareId != null && message.hasOwnProperty("welfareId"))
            if (!$util.isInteger(message.welfareId))
                return "welfareId: integer expected";
        return null;
    };
    GetFatigueWelfareC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetFatigueWelfareC2S)
            return object;
        var message = new $root.GetFatigueWelfareC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.welfareId != null)
            message.welfareId = object.welfareId | 0;
        return message;
    };
    GetFatigueWelfareC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.welfareId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.welfareId != null && message.hasOwnProperty("welfareId"))
            object.welfareId = message.welfareId;
        return object;
    };
    GetFatigueWelfareC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetFatigueWelfareC2S;
})();
$root.GetFatigueWelfareS2C = (function() {
    function GetFatigueWelfareS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetFatigueWelfareS2C.prototype.error = 0;
    GetFatigueWelfareS2C.create = function create(properties) {
        return new GetFatigueWelfareS2C(properties);
    };
    GetFatigueWelfareS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GetFatigueWelfareS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetFatigueWelfareS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetFatigueWelfareS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetFatigueWelfareS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetFatigueWelfareS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GetFatigueWelfareS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetFatigueWelfareS2C)
            return object;
        var message = new $root.GetFatigueWelfareS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GetFatigueWelfareS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GetFatigueWelfareS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetFatigueWelfareS2C;
})();
$root.GamerNotifyFatigueS2C = (function() {
    function GamerNotifyFatigueS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyFatigueS2C.prototype.error = 0;
    GamerNotifyFatigueS2C.prototype.fatigueInfo = null;
    GamerNotifyFatigueS2C.create = function create(properties) {
        return new GamerNotifyFatigueS2C(properties);
    };
    GamerNotifyFatigueS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.fatigueInfo != null && message.hasOwnProperty("fatigueInfo"))
            $root.FatigueInfo.encode(message.fatigueInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyFatigueS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyFatigueS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyFatigueS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.fatigueInfo = $root.FatigueInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyFatigueS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyFatigueS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.fatigueInfo != null && message.hasOwnProperty("fatigueInfo")) {
            var error = $root.FatigueInfo.verify(message.fatigueInfo);
            if (error)
                return "fatigueInfo." + error;
        }
        return null;
    };
    GamerNotifyFatigueS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyFatigueS2C)
            return object;
        var message = new $root.GamerNotifyFatigueS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.fatigueInfo != null) {
            if (typeof object.fatigueInfo !== "object")
                throw TypeError(".GamerNotifyFatigueS2C.fatigueInfo: object expected");
            message.fatigueInfo = $root.FatigueInfo.fromObject(object.fatigueInfo);
        }
        return message;
    };
    GamerNotifyFatigueS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.fatigueInfo = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.fatigueInfo != null && message.hasOwnProperty("fatigueInfo"))
            object.fatigueInfo = $root.FatigueInfo.toObject(message.fatigueInfo, options);
        return object;
    };
    GamerNotifyFatigueS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyFatigueS2C;
})();
$root.UpStarEquipC2S = (function() {
    function UpStarEquipC2S(properties) {
        this.eatUidList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    UpStarEquipC2S.prototype.id = 0;
    UpStarEquipC2S.prototype.heroId = 0;
    UpStarEquipC2S.prototype.equipUid = 0;
    UpStarEquipC2S.prototype.type = 0;
    UpStarEquipC2S.prototype.eatUidList = $util.emptyArray;
    UpStarEquipC2S.create = function create(properties) {
        return new UpStarEquipC2S(properties);
    };
    UpStarEquipC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.equipUid);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
        if (message.eatUidList != null && message.eatUidList.length) {
            writer.uint32(/* id 5, wireType 2 =*/42).fork();
            for (var i = 0; i < message.eatUidList.length; ++i)
                writer.int32(message.eatUidList[i]);
            writer.ldelim();
        }
        return writer;
    };
    UpStarEquipC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    UpStarEquipC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UpStarEquipC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            case 3:
                message.equipUid = reader.int32();
                break;
            case 4:
                message.type = reader.int32();
                break;
            case 5:
                if (!(message.eatUidList && message.eatUidList.length))
                    message.eatUidList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.eatUidList.push(reader.int32());
                } else
                    message.eatUidList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    UpStarEquipC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    UpStarEquipC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            if (!$util.isInteger(message.equipUid))
                return "equipUid: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        if (message.eatUidList != null && message.hasOwnProperty("eatUidList")) {
            if (!Array.isArray(message.eatUidList))
                return "eatUidList: array expected";
            for (var i = 0; i < message.eatUidList.length; ++i)
                if (!$util.isInteger(message.eatUidList[i]))
                    return "eatUidList: integer[] expected";
        }
        return null;
    };
    UpStarEquipC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.UpStarEquipC2S)
            return object;
        var message = new $root.UpStarEquipC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.equipUid != null)
            message.equipUid = object.equipUid | 0;
        if (object.type != null)
            message.type = object.type | 0;
        if (object.eatUidList) {
            if (!Array.isArray(object.eatUidList))
                throw TypeError(".UpStarEquipC2S.eatUidList: array expected");
            message.eatUidList = [];
            for (var i = 0; i < object.eatUidList.length; ++i)
                message.eatUidList[i] = object.eatUidList[i] | 0;
        }
        return message;
    };
    UpStarEquipC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.eatUidList = [];
        if (options.defaults) {
            object.id = 0;
            object.heroId = 0;
            object.equipUid = 0;
            object.type = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            object.equipUid = message.equipUid;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.eatUidList && message.eatUidList.length) {
            object.eatUidList = [];
            for (var j = 0; j < message.eatUidList.length; ++j)
                object.eatUidList[j] = message.eatUidList[j];
        }
        return object;
    };
    UpStarEquipC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return UpStarEquipC2S;
})();
$root.UpStarEquipS2C = (function() {
    function UpStarEquipS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    UpStarEquipS2C.prototype.error = 0;
    UpStarEquipS2C.prototype.equip = null;
    UpStarEquipS2C.create = function create(properties) {
        return new UpStarEquipS2C(properties);
    };
    UpStarEquipS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.equip != null && message.hasOwnProperty("equip"))
            $root.GameItem.encode(message.equip, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    UpStarEquipS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    UpStarEquipS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UpStarEquipS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 3:
                message.equip = $root.GameItem.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    UpStarEquipS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    UpStarEquipS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.equip != null && message.hasOwnProperty("equip")) {
            var error = $root.GameItem.verify(message.equip);
            if (error)
                return "equip." + error;
        }
        return null;
    };
    UpStarEquipS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.UpStarEquipS2C)
            return object;
        var message = new $root.UpStarEquipS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.equip != null) {
            if (typeof object.equip !== "object")
                throw TypeError(".UpStarEquipS2C.equip: object expected");
            message.equip = $root.GameItem.fromObject(object.equip);
        }
        return message;
    };
    UpStarEquipS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.equip = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.equip != null && message.hasOwnProperty("equip"))
            object.equip = $root.GameItem.toObject(message.equip, options);
        return object;
    };
    UpStarEquipS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return UpStarEquipS2C;
})();
$root.EatEquipsC2S = (function() {
    function EatEquipsC2S(properties) {
        this.eatUidList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    EatEquipsC2S.prototype.id = 0;
    EatEquipsC2S.prototype.heroId = 0;
    EatEquipsC2S.prototype.equipUid = 0;
    EatEquipsC2S.prototype.eatUidList = $util.emptyArray;
    EatEquipsC2S.create = function create(properties) {
        return new EatEquipsC2S(properties);
    };
    EatEquipsC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.equipUid);
        if (message.eatUidList != null && message.eatUidList.length) {
            writer.uint32(/* id 4, wireType 2 =*/34).fork();
            for (var i = 0; i < message.eatUidList.length; ++i)
                writer.int32(message.eatUidList[i]);
            writer.ldelim();
        }
        return writer;
    };
    EatEquipsC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    EatEquipsC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EatEquipsC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            case 3:
                message.equipUid = reader.int32();
                break;
            case 4:
                if (!(message.eatUidList && message.eatUidList.length))
                    message.eatUidList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.eatUidList.push(reader.int32());
                } else
                    message.eatUidList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    EatEquipsC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    EatEquipsC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            if (!$util.isInteger(message.equipUid))
                return "equipUid: integer expected";
        if (message.eatUidList != null && message.hasOwnProperty("eatUidList")) {
            if (!Array.isArray(message.eatUidList))
                return "eatUidList: array expected";
            for (var i = 0; i < message.eatUidList.length; ++i)
                if (!$util.isInteger(message.eatUidList[i]))
                    return "eatUidList: integer[] expected";
        }
        return null;
    };
    EatEquipsC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.EatEquipsC2S)
            return object;
        var message = new $root.EatEquipsC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.equipUid != null)
            message.equipUid = object.equipUid | 0;
        if (object.eatUidList) {
            if (!Array.isArray(object.eatUidList))
                throw TypeError(".EatEquipsC2S.eatUidList: array expected");
            message.eatUidList = [];
            for (var i = 0; i < object.eatUidList.length; ++i)
                message.eatUidList[i] = object.eatUidList[i] | 0;
        }
        return message;
    };
    EatEquipsC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.eatUidList = [];
        if (options.defaults) {
            object.id = 0;
            object.heroId = 0;
            object.equipUid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            object.equipUid = message.equipUid;
        if (message.eatUidList && message.eatUidList.length) {
            object.eatUidList = [];
            for (var j = 0; j < message.eatUidList.length; ++j)
                object.eatUidList[j] = message.eatUidList[j];
        }
        return object;
    };
    EatEquipsC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return EatEquipsC2S;
})();
$root.EatEquipsS2C = (function() {
    function EatEquipsS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    EatEquipsS2C.prototype.error = 0;
    EatEquipsS2C.prototype.equip = null;
    EatEquipsS2C.create = function create(properties) {
        return new EatEquipsS2C(properties);
    };
    EatEquipsS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.equip != null && message.hasOwnProperty("equip"))
            $root.GameItem.encode(message.equip, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    EatEquipsS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    EatEquipsS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EatEquipsS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 3:
                message.equip = $root.GameItem.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    EatEquipsS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    EatEquipsS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.equip != null && message.hasOwnProperty("equip")) {
            var error = $root.GameItem.verify(message.equip);
            if (error)
                return "equip." + error;
        }
        return null;
    };
    EatEquipsS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.EatEquipsS2C)
            return object;
        var message = new $root.EatEquipsS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.equip != null) {
            if (typeof object.equip !== "object")
                throw TypeError(".EatEquipsS2C.equip: object expected");
            message.equip = $root.GameItem.fromObject(object.equip);
        }
        return message;
    };
    EatEquipsS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.equip = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.equip != null && message.hasOwnProperty("equip"))
            object.equip = $root.GameItem.toObject(message.equip, options);
        return object;
    };
    EatEquipsS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return EatEquipsS2C;
})();
$root.DesEquipC2S = (function() {
    function DesEquipC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DesEquipC2S.prototype.id = 0;
    DesEquipC2S.prototype.equipUid = 0;
    DesEquipC2S.create = function create(properties) {
        return new DesEquipC2S(properties);
    };
    DesEquipC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.equipUid);
        return writer;
    };
    DesEquipC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DesEquipC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DesEquipC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.equipUid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DesEquipC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DesEquipC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            if (!$util.isInteger(message.equipUid))
                return "equipUid: integer expected";
        return null;
    };
    DesEquipC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.DesEquipC2S)
            return object;
        var message = new $root.DesEquipC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.equipUid != null)
            message.equipUid = object.equipUid | 0;
        return message;
    };
    DesEquipC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.equipUid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            object.equipUid = message.equipUid;
        return object;
    };
    DesEquipC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DesEquipC2S;
})();
$root.DesEquipS2C = (function() {
    function DesEquipS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DesEquipS2C.prototype.error = 0;
    DesEquipS2C.prototype.equipUid = 0;
    DesEquipS2C.create = function create(properties) {
        return new DesEquipS2C(properties);
    };
    DesEquipS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.equipUid);
        return writer;
    };
    DesEquipS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DesEquipS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DesEquipS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.equipUid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DesEquipS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DesEquipS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            if (!$util.isInteger(message.equipUid))
                return "equipUid: integer expected";
        return null;
    };
    DesEquipS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.DesEquipS2C)
            return object;
        var message = new $root.DesEquipS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.equipUid != null)
            message.equipUid = object.equipUid | 0;
        return message;
    };
    DesEquipS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.equipUid = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            object.equipUid = message.equipUid;
        return object;
    };
    DesEquipS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DesEquipS2C;
})();
$root.TakeOnEquipC2S = (function() {
    function TakeOnEquipC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    TakeOnEquipC2S.prototype.id = 0;
    TakeOnEquipC2S.prototype.heroIdOn = 0;
    TakeOnEquipC2S.prototype.heroIdOff = 0;
    TakeOnEquipC2S.prototype.equipUid = 0;
    TakeOnEquipC2S.create = function create(properties) {
        return new TakeOnEquipC2S(properties);
    };
    TakeOnEquipC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroIdOn != null && message.hasOwnProperty("heroIdOn"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroIdOn);
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.heroIdOff);
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.equipUid);
        return writer;
    };
    TakeOnEquipC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    TakeOnEquipC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TakeOnEquipC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroIdOn = reader.int32();
                break;
            case 3:
                message.heroIdOff = reader.int32();
                break;
            case 4:
                message.equipUid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    TakeOnEquipC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    TakeOnEquipC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroIdOn != null && message.hasOwnProperty("heroIdOn"))
            if (!$util.isInteger(message.heroIdOn))
                return "heroIdOn: integer expected";
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff"))
            if (!$util.isInteger(message.heroIdOff))
                return "heroIdOff: integer expected";
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            if (!$util.isInteger(message.equipUid))
                return "equipUid: integer expected";
        return null;
    };
    TakeOnEquipC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.TakeOnEquipC2S)
            return object;
        var message = new $root.TakeOnEquipC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroIdOn != null)
            message.heroIdOn = object.heroIdOn | 0;
        if (object.heroIdOff != null)
            message.heroIdOff = object.heroIdOff | 0;
        if (object.equipUid != null)
            message.equipUid = object.equipUid | 0;
        return message;
    };
    TakeOnEquipC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroIdOn = 0;
            object.heroIdOff = 0;
            object.equipUid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroIdOn != null && message.hasOwnProperty("heroIdOn"))
            object.heroIdOn = message.heroIdOn;
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff"))
            object.heroIdOff = message.heroIdOff;
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            object.equipUid = message.equipUid;
        return object;
    };
    TakeOnEquipC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TakeOnEquipC2S;
})();
$root.TakeOnEquipS2C = (function() {
    function TakeOnEquipS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    TakeOnEquipS2C.prototype.error = 0;
    TakeOnEquipS2C.prototype.heroIdOn = null;
    TakeOnEquipS2C.prototype.heroIdOff = null;
    TakeOnEquipS2C.prototype.equip = null;
    TakeOnEquipS2C.create = function create(properties) {
        return new TakeOnEquipS2C(properties);
    };
    TakeOnEquipS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroIdOn != null && message.hasOwnProperty("heroIdOn"))
            $root.GamerHero.encode(message.heroIdOn, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff"))
            $root.GamerHero.encode(message.heroIdOff, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.equip != null && message.hasOwnProperty("equip"))
            $root.GameItem.encode(message.equip, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    TakeOnEquipS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    TakeOnEquipS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TakeOnEquipS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.heroIdOn = $root.GamerHero.decode(reader, reader.uint32());
                break;
            case 3:
                message.heroIdOff = $root.GamerHero.decode(reader, reader.uint32());
                break;
            case 4:
                message.equip = $root.GameItem.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    TakeOnEquipS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    TakeOnEquipS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroIdOn != null && message.hasOwnProperty("heroIdOn")) {
            var error = $root.GamerHero.verify(message.heroIdOn);
            if (error)
                return "heroIdOn." + error;
        }
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff")) {
            var error = $root.GamerHero.verify(message.heroIdOff);
            if (error)
                return "heroIdOff." + error;
        }
        if (message.equip != null && message.hasOwnProperty("equip")) {
            var error = $root.GameItem.verify(message.equip);
            if (error)
                return "equip." + error;
        }
        return null;
    };
    TakeOnEquipS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.TakeOnEquipS2C)
            return object;
        var message = new $root.TakeOnEquipS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroIdOn != null) {
            if (typeof object.heroIdOn !== "object")
                throw TypeError(".TakeOnEquipS2C.heroIdOn: object expected");
            message.heroIdOn = $root.GamerHero.fromObject(object.heroIdOn);
        }
        if (object.heroIdOff != null) {
            if (typeof object.heroIdOff !== "object")
                throw TypeError(".TakeOnEquipS2C.heroIdOff: object expected");
            message.heroIdOff = $root.GamerHero.fromObject(object.heroIdOff);
        }
        if (object.equip != null) {
            if (typeof object.equip !== "object")
                throw TypeError(".TakeOnEquipS2C.equip: object expected");
            message.equip = $root.GameItem.fromObject(object.equip);
        }
        return message;
    };
    TakeOnEquipS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.heroIdOn = null;
            object.heroIdOff = null;
            object.equip = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroIdOn != null && message.hasOwnProperty("heroIdOn"))
            object.heroIdOn = $root.GamerHero.toObject(message.heroIdOn, options);
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff"))
            object.heroIdOff = $root.GamerHero.toObject(message.heroIdOff, options);
        if (message.equip != null && message.hasOwnProperty("equip"))
            object.equip = $root.GameItem.toObject(message.equip, options);
        return object;
    };
    TakeOnEquipS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TakeOnEquipS2C;
})();
$root.TakeOffEquipC2S = (function() {
    function TakeOffEquipC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    TakeOffEquipC2S.prototype.id = 0;
    TakeOffEquipC2S.prototype.heroIdOff = 0;
    TakeOffEquipC2S.prototype.equipUid = 0;
    TakeOffEquipC2S.create = function create(properties) {
        return new TakeOffEquipC2S(properties);
    };
    TakeOffEquipC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroIdOff);
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.equipUid);
        return writer;
    };
    TakeOffEquipC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    TakeOffEquipC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TakeOffEquipC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroIdOff = reader.int32();
                break;
            case 3:
                message.equipUid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    TakeOffEquipC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    TakeOffEquipC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff"))
            if (!$util.isInteger(message.heroIdOff))
                return "heroIdOff: integer expected";
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            if (!$util.isInteger(message.equipUid))
                return "equipUid: integer expected";
        return null;
    };
    TakeOffEquipC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.TakeOffEquipC2S)
            return object;
        var message = new $root.TakeOffEquipC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroIdOff != null)
            message.heroIdOff = object.heroIdOff | 0;
        if (object.equipUid != null)
            message.equipUid = object.equipUid | 0;
        return message;
    };
    TakeOffEquipC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroIdOff = 0;
            object.equipUid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff"))
            object.heroIdOff = message.heroIdOff;
        if (message.equipUid != null && message.hasOwnProperty("equipUid"))
            object.equipUid = message.equipUid;
        return object;
    };
    TakeOffEquipC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TakeOffEquipC2S;
})();
$root.TakeOffEquipS2C = (function() {
    function TakeOffEquipS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    TakeOffEquipS2C.prototype.error = 0;
    TakeOffEquipS2C.prototype.heroIdOff = null;
    TakeOffEquipS2C.prototype.equip = null;
    TakeOffEquipS2C.create = function create(properties) {
        return new TakeOffEquipS2C(properties);
    };
    TakeOffEquipS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff"))
            $root.GamerHero.encode(message.heroIdOff, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.equip != null && message.hasOwnProperty("equip"))
            $root.GameItem.encode(message.equip, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    TakeOffEquipS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    TakeOffEquipS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TakeOffEquipS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.heroIdOff = $root.GamerHero.decode(reader, reader.uint32());
                break;
            case 3:
                message.equip = $root.GameItem.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    TakeOffEquipS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    TakeOffEquipS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff")) {
            var error = $root.GamerHero.verify(message.heroIdOff);
            if (error)
                return "heroIdOff." + error;
        }
        if (message.equip != null && message.hasOwnProperty("equip")) {
            var error = $root.GameItem.verify(message.equip);
            if (error)
                return "equip." + error;
        }
        return null;
    };
    TakeOffEquipS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.TakeOffEquipS2C)
            return object;
        var message = new $root.TakeOffEquipS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroIdOff != null) {
            if (typeof object.heroIdOff !== "object")
                throw TypeError(".TakeOffEquipS2C.heroIdOff: object expected");
            message.heroIdOff = $root.GamerHero.fromObject(object.heroIdOff);
        }
        if (object.equip != null) {
            if (typeof object.equip !== "object")
                throw TypeError(".TakeOffEquipS2C.equip: object expected");
            message.equip = $root.GameItem.fromObject(object.equip);
        }
        return message;
    };
    TakeOffEquipS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.heroIdOff = null;
            object.equip = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroIdOff != null && message.hasOwnProperty("heroIdOff"))
            object.heroIdOff = $root.GamerHero.toObject(message.heroIdOff, options);
        if (message.equip != null && message.hasOwnProperty("equip"))
            object.equip = $root.GameItem.toObject(message.equip, options);
        return object;
    };
    TakeOffEquipS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TakeOffEquipS2C;
})();
$root.RedSpotC2S = (function() {
    function RedSpotC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    RedSpotC2S.prototype.id = 0;
    RedSpotC2S.create = function create(properties) {
        return new RedSpotC2S(properties);
    };
    RedSpotC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    RedSpotC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    RedSpotC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RedSpotC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    RedSpotC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    RedSpotC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    RedSpotC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.RedSpotC2S)
            return object;
        var message = new $root.RedSpotC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    RedSpotC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    RedSpotC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return RedSpotC2S;
})();
$root.RedSpotS2C = (function() {
    function RedSpotS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    RedSpotS2C.prototype.error = 0;
    RedSpotS2C.prototype.redSpot = null;
    RedSpotS2C.create = function create(properties) {
        return new RedSpotS2C(properties);
    };
    RedSpotS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.redSpot != null && message.hasOwnProperty("redSpot"))
            $root.RedSpot.encode(message.redSpot, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    RedSpotS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    RedSpotS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RedSpotS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.redSpot = $root.RedSpot.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    RedSpotS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    RedSpotS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.redSpot != null && message.hasOwnProperty("redSpot")) {
            var error = $root.RedSpot.verify(message.redSpot);
            if (error)
                return "redSpot." + error;
        }
        return null;
    };
    RedSpotS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.RedSpotS2C)
            return object;
        var message = new $root.RedSpotS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.redSpot != null) {
            if (typeof object.redSpot !== "object")
                throw TypeError(".RedSpotS2C.redSpot: object expected");
            message.redSpot = $root.RedSpot.fromObject(object.redSpot);
        }
        return message;
    };
    RedSpotS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.redSpot = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.redSpot != null && message.hasOwnProperty("redSpot"))
            object.redSpot = $root.RedSpot.toObject(message.redSpot, options);
        return object;
    };
    RedSpotS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return RedSpotS2C;
})();
$root.MakeTeamC2S = (function() {
    function MakeTeamC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    MakeTeamC2S.prototype.id = 0;
    MakeTeamC2S.prototype.aim = 0;
    MakeTeamC2S.prototype.heroId = 0;
    MakeTeamC2S.prototype.hero = null;
    MakeTeamC2S.prototype.secretLand = null;
    MakeTeamC2S.create = function create(properties) {
        return new MakeTeamC2S(properties);
    };
    MakeTeamC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.aim != null && message.hasOwnProperty("aim"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aim);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.heroId);
        if (message.hero != null && message.hasOwnProperty("hero"))
            $root.GamerHero.encode(message.hero, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            $root.GamerSecretLand.encode(message.secretLand, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    MakeTeamC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    MakeTeamC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MakeTeamC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.aim = reader.int32();
                break;
            case 3:
                message.heroId = reader.int32();
                break;
            case 4:
                message.hero = $root.GamerHero.decode(reader, reader.uint32());
                break;
            case 5:
                message.secretLand = $root.GamerSecretLand.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    MakeTeamC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    MakeTeamC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.aim != null && message.hasOwnProperty("aim"))
            if (!$util.isInteger(message.aim))
                return "aim: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.hero != null && message.hasOwnProperty("hero")) {
            var error = $root.GamerHero.verify(message.hero);
            if (error)
                return "hero." + error;
        }
        if (message.secretLand != null && message.hasOwnProperty("secretLand")) {
            var error = $root.GamerSecretLand.verify(message.secretLand);
            if (error)
                return "secretLand." + error;
        }
        return null;
    };
    MakeTeamC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.MakeTeamC2S)
            return object;
        var message = new $root.MakeTeamC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.aim != null)
            message.aim = object.aim | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.hero != null) {
            if (typeof object.hero !== "object")
                throw TypeError(".MakeTeamC2S.hero: object expected");
            message.hero = $root.GamerHero.fromObject(object.hero);
        }
        if (object.secretLand != null) {
            if (typeof object.secretLand !== "object")
                throw TypeError(".MakeTeamC2S.secretLand: object expected");
            message.secretLand = $root.GamerSecretLand.fromObject(object.secretLand);
        }
        return message;
    };
    MakeTeamC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.aim = 0;
            object.heroId = 0;
            object.hero = null;
            object.secretLand = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.aim != null && message.hasOwnProperty("aim"))
            object.aim = message.aim;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.hero != null && message.hasOwnProperty("hero"))
            object.hero = $root.GamerHero.toObject(message.hero, options);
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            object.secretLand = $root.GamerSecretLand.toObject(message.secretLand, options);
        return object;
    };
    MakeTeamC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return MakeTeamC2S;
})();
$root.MakeTeamS2C = (function() {
    function MakeTeamS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    MakeTeamS2C.prototype.error = 0;
    MakeTeamS2C.prototype.team = null;
    MakeTeamS2C.create = function create(properties) {
        return new MakeTeamS2C(properties);
    };
    MakeTeamS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.team != null && message.hasOwnProperty("team"))
            $root.Team.encode(message.team, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    MakeTeamS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    MakeTeamS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MakeTeamS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.team = $root.Team.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    MakeTeamS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    MakeTeamS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.team != null && message.hasOwnProperty("team")) {
            var error = $root.Team.verify(message.team);
            if (error)
                return "team." + error;
        }
        return null;
    };
    MakeTeamS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.MakeTeamS2C)
            return object;
        var message = new $root.MakeTeamS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.team != null) {
            if (typeof object.team !== "object")
                throw TypeError(".MakeTeamS2C.team: object expected");
            message.team = $root.Team.fromObject(object.team);
        }
        return message;
    };
    MakeTeamS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.team = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.team != null && message.hasOwnProperty("team"))
            object.team = $root.Team.toObject(message.team, options);
        return object;
    };
    MakeTeamS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return MakeTeamS2C;
})();
$root.SetTeamAimC2S = (function() {
    function SetTeamAimC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SetTeamAimC2S.prototype.id = 0;
    SetTeamAimC2S.prototype.aim = 0;
    SetTeamAimC2S.create = function create(properties) {
        return new SetTeamAimC2S(properties);
    };
    SetTeamAimC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.aim != null && message.hasOwnProperty("aim"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aim);
        return writer;
    };
    SetTeamAimC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SetTeamAimC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SetTeamAimC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.aim = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SetTeamAimC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SetTeamAimC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.aim != null && message.hasOwnProperty("aim"))
            if (!$util.isInteger(message.aim))
                return "aim: integer expected";
        return null;
    };
    SetTeamAimC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.SetTeamAimC2S)
            return object;
        var message = new $root.SetTeamAimC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.aim != null)
            message.aim = object.aim | 0;
        return message;
    };
    SetTeamAimC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.aim = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.aim != null && message.hasOwnProperty("aim"))
            object.aim = message.aim;
        return object;
    };
    SetTeamAimC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SetTeamAimC2S;
})();
$root.SetTeamAimS2C = (function() {
    function SetTeamAimS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SetTeamAimS2C.prototype.error = 0;
    SetTeamAimS2C.create = function create(properties) {
        return new SetTeamAimS2C(properties);
    };
    SetTeamAimS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    SetTeamAimS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SetTeamAimS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SetTeamAimS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SetTeamAimS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SetTeamAimS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    SetTeamAimS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.SetTeamAimS2C)
            return object;
        var message = new $root.SetTeamAimS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    SetTeamAimS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    SetTeamAimS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SetTeamAimS2C;
})();
$root.JoinTeamC2S = (function() {
    function JoinTeamC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    JoinTeamC2S.prototype.id = 0;
    JoinTeamC2S.prototype.teamId = 0;
    JoinTeamC2S.prototype.heroId = 0;
    JoinTeamC2S.prototype.hero = null;
    JoinTeamC2S.prototype.secretLand = null;
    JoinTeamC2S.create = function create(properties) {
        return new JoinTeamC2S(properties);
    };
    JoinTeamC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.teamId);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.heroId);
        if (message.hero != null && message.hasOwnProperty("hero"))
            $root.GamerHero.encode(message.hero, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            $root.GamerSecretLand.encode(message.secretLand, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    JoinTeamC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    JoinTeamC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.JoinTeamC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.teamId = reader.uint32();
                break;
            case 3:
                message.heroId = reader.int32();
                break;
            case 4:
                message.hero = $root.GamerHero.decode(reader, reader.uint32());
                break;
            case 5:
                message.secretLand = $root.GamerSecretLand.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    JoinTeamC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    JoinTeamC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            if (!$util.isInteger(message.teamId))
                return "teamId: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.hero != null && message.hasOwnProperty("hero")) {
            var error = $root.GamerHero.verify(message.hero);
            if (error)
                return "hero." + error;
        }
        if (message.secretLand != null && message.hasOwnProperty("secretLand")) {
            var error = $root.GamerSecretLand.verify(message.secretLand);
            if (error)
                return "secretLand." + error;
        }
        return null;
    };
    JoinTeamC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.JoinTeamC2S)
            return object;
        var message = new $root.JoinTeamC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.teamId != null)
            message.teamId = object.teamId >>> 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.hero != null) {
            if (typeof object.hero !== "object")
                throw TypeError(".JoinTeamC2S.hero: object expected");
            message.hero = $root.GamerHero.fromObject(object.hero);
        }
        if (object.secretLand != null) {
            if (typeof object.secretLand !== "object")
                throw TypeError(".JoinTeamC2S.secretLand: object expected");
            message.secretLand = $root.GamerSecretLand.fromObject(object.secretLand);
        }
        return message;
    };
    JoinTeamC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.teamId = 0;
            object.heroId = 0;
            object.hero = null;
            object.secretLand = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            object.teamId = message.teamId;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.hero != null && message.hasOwnProperty("hero"))
            object.hero = $root.GamerHero.toObject(message.hero, options);
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            object.secretLand = $root.GamerSecretLand.toObject(message.secretLand, options);
        return object;
    };
    JoinTeamC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return JoinTeamC2S;
})();
$root.JoinTeamS2C = (function() {
    function JoinTeamS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    JoinTeamS2C.prototype.error = 0;
    JoinTeamS2C.create = function create(properties) {
        return new JoinTeamS2C(properties);
    };
    JoinTeamS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    JoinTeamS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    JoinTeamS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.JoinTeamS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    JoinTeamS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    JoinTeamS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    JoinTeamS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.JoinTeamS2C)
            return object;
        var message = new $root.JoinTeamS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    JoinTeamS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    JoinTeamS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return JoinTeamS2C;
})();
$root.ExitTeamC2S = (function() {
    function ExitTeamC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ExitTeamC2S.prototype.id = 0;
    ExitTeamC2S.create = function create(properties) {
        return new ExitTeamC2S(properties);
    };
    ExitTeamC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    ExitTeamC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ExitTeamC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ExitTeamC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ExitTeamC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ExitTeamC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    ExitTeamC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.ExitTeamC2S)
            return object;
        var message = new $root.ExitTeamC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    ExitTeamC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    ExitTeamC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ExitTeamC2S;
})();
$root.ExitTeamS2C = (function() {
    function ExitTeamS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ExitTeamS2C.prototype.error = 0;
    ExitTeamS2C.create = function create(properties) {
        return new ExitTeamS2C(properties);
    };
    ExitTeamS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    ExitTeamS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ExitTeamS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ExitTeamS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ExitTeamS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ExitTeamS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    ExitTeamS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.ExitTeamS2C)
            return object;
        var message = new $root.ExitTeamS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    ExitTeamS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    ExitTeamS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ExitTeamS2C;
})();
$root.TurnOverTeamLeaderC2S = (function() {
    function TurnOverTeamLeaderC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    TurnOverTeamLeaderC2S.prototype.id = 0;
    TurnOverTeamLeaderC2S.prototype.newLeaderId = 0;
    TurnOverTeamLeaderC2S.create = function create(properties) {
        return new TurnOverTeamLeaderC2S(properties);
    };
    TurnOverTeamLeaderC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.newLeaderId != null && message.hasOwnProperty("newLeaderId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.newLeaderId);
        return writer;
    };
    TurnOverTeamLeaderC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    TurnOverTeamLeaderC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TurnOverTeamLeaderC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.newLeaderId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    TurnOverTeamLeaderC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    TurnOverTeamLeaderC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.newLeaderId != null && message.hasOwnProperty("newLeaderId"))
            if (!$util.isInteger(message.newLeaderId))
                return "newLeaderId: integer expected";
        return null;
    };
    TurnOverTeamLeaderC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.TurnOverTeamLeaderC2S)
            return object;
        var message = new $root.TurnOverTeamLeaderC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.newLeaderId != null)
            message.newLeaderId = object.newLeaderId | 0;
        return message;
    };
    TurnOverTeamLeaderC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.newLeaderId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.newLeaderId != null && message.hasOwnProperty("newLeaderId"))
            object.newLeaderId = message.newLeaderId;
        return object;
    };
    TurnOverTeamLeaderC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TurnOverTeamLeaderC2S;
})();
$root.TurnOverTeamLeaderS2C = (function() {
    function TurnOverTeamLeaderS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    TurnOverTeamLeaderS2C.prototype.error = 0;
    TurnOverTeamLeaderS2C.create = function create(properties) {
        return new TurnOverTeamLeaderS2C(properties);
    };
    TurnOverTeamLeaderS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    TurnOverTeamLeaderS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    TurnOverTeamLeaderS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TurnOverTeamLeaderS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    TurnOverTeamLeaderS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    TurnOverTeamLeaderS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    TurnOverTeamLeaderS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.TurnOverTeamLeaderS2C)
            return object;
        var message = new $root.TurnOverTeamLeaderS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    TurnOverTeamLeaderS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    TurnOverTeamLeaderS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TurnOverTeamLeaderS2C;
})();
$root.InviteTeamC2S = (function() {
    function InviteTeamC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    InviteTeamC2S.prototype.id = 0;
    InviteTeamC2S.prototype.gid = 0;
    InviteTeamC2S.create = function create(properties) {
        return new InviteTeamC2S(properties);
    };
    InviteTeamC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.gid != null && message.hasOwnProperty("gid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gid);
        return writer;
    };
    InviteTeamC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    InviteTeamC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.InviteTeamC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 3:
                message.gid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    InviteTeamC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    InviteTeamC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.gid != null && message.hasOwnProperty("gid"))
            if (!$util.isInteger(message.gid))
                return "gid: integer expected";
        return null;
    };
    InviteTeamC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.InviteTeamC2S)
            return object;
        var message = new $root.InviteTeamC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.gid != null)
            message.gid = object.gid | 0;
        return message;
    };
    InviteTeamC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.gid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.gid != null && message.hasOwnProperty("gid"))
            object.gid = message.gid;
        return object;
    };
    InviteTeamC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return InviteTeamC2S;
})();
$root.InviteTeamS2C = (function() {
    function InviteTeamS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    InviteTeamS2C.prototype.error = 0;
    InviteTeamS2C.create = function create(properties) {
        return new InviteTeamS2C(properties);
    };
    InviteTeamS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    InviteTeamS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    InviteTeamS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.InviteTeamS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    InviteTeamS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    InviteTeamS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    InviteTeamS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.InviteTeamS2C)
            return object;
        var message = new $root.InviteTeamS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    InviteTeamS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    InviteTeamS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return InviteTeamS2C;
})();
$root.RejectTeamC2S = (function() {
    function RejectTeamC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    RejectTeamC2S.prototype.id = 0;
    RejectTeamC2S.prototype.teamId = 0;
    RejectTeamC2S.prototype.gid = 0;
    RejectTeamC2S.prototype.type = 0;
    RejectTeamC2S.create = function create(properties) {
        return new RejectTeamC2S(properties);
    };
    RejectTeamC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.teamId);
        if (message.gid != null && message.hasOwnProperty("gid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gid);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
        return writer;
    };
    RejectTeamC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    RejectTeamC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RejectTeamC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.teamId = reader.uint32();
                break;
            case 3:
                message.gid = reader.int32();
                break;
            case 4:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    RejectTeamC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    RejectTeamC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            if (!$util.isInteger(message.teamId))
                return "teamId: integer expected";
        if (message.gid != null && message.hasOwnProperty("gid"))
            if (!$util.isInteger(message.gid))
                return "gid: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        return null;
    };
    RejectTeamC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.RejectTeamC2S)
            return object;
        var message = new $root.RejectTeamC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.teamId != null)
            message.teamId = object.teamId >>> 0;
        if (object.gid != null)
            message.gid = object.gid | 0;
        switch (object.type) {
        case "NullType":
        case 0:
            message.type = 0;
            break;
        case "Friend":
        case 1:
            message.type = 1;
            break;
        case "Reject":
        case 2:
            message.type = 2;
            break;
        case "Wait":
        case 3:
            message.type = 3;
            break;
        case "Kick":
        case 4:
            message.type = 4;
            break;
        case "Military":
        case 5:
            message.type = 5;
            break;
        }
        return message;
    };
    RejectTeamC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.teamId = 0;
            object.gid = 0;
            object.type = options.enums === String ? "NullType" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            object.teamId = message.teamId;
        if (message.gid != null && message.hasOwnProperty("gid"))
            object.gid = message.gid;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.InviteType[message.type] : message.type;
        return object;
    };
    RejectTeamC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return RejectTeamC2S;
})();
$root.RejectTeamS2C = (function() {
    function RejectTeamS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    RejectTeamS2C.prototype.error = 0;
    RejectTeamS2C.create = function create(properties) {
        return new RejectTeamS2C(properties);
    };
    RejectTeamS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    RejectTeamS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    RejectTeamS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RejectTeamS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    RejectTeamS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    RejectTeamS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    RejectTeamS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.RejectTeamS2C)
            return object;
        var message = new $root.RejectTeamS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    RejectTeamS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    RejectTeamS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return RejectTeamS2C;
})();
$root.GamerNotifyTeamS2C = (function() {
    function GamerNotifyTeamS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyTeamS2C.prototype.error = 0;
    GamerNotifyTeamS2C.prototype.team = null;
    GamerNotifyTeamS2C.create = function create(properties) {
        return new GamerNotifyTeamS2C(properties);
    };
    GamerNotifyTeamS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.team != null && message.hasOwnProperty("team"))
            $root.Team.encode(message.team, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyTeamS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyTeamS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyTeamS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.team = $root.Team.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyTeamS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyTeamS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.team != null && message.hasOwnProperty("team")) {
            var error = $root.Team.verify(message.team);
            if (error)
                return "team." + error;
        }
        return null;
    };
    GamerNotifyTeamS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyTeamS2C)
            return object;
        var message = new $root.GamerNotifyTeamS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.team != null) {
            if (typeof object.team !== "object")
                throw TypeError(".GamerNotifyTeamS2C.team: object expected");
            message.team = $root.Team.fromObject(object.team);
        }
        return message;
    };
    GamerNotifyTeamS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.team = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.team != null && message.hasOwnProperty("team"))
            object.team = $root.Team.toObject(message.team, options);
        return object;
    };
    GamerNotifyTeamS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyTeamS2C;
})();
$root.GamerNotifyTeamInfoS2C = (function() {
    function GamerNotifyTeamInfoS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyTeamInfoS2C.prototype.error = 0;
    GamerNotifyTeamInfoS2C.prototype.teamId = 0;
    GamerNotifyTeamInfoS2C.prototype.aim = 0;
    GamerNotifyTeamInfoS2C.prototype.type = 0;
    GamerNotifyTeamInfoS2C.prototype.value = 0;
    GamerNotifyTeamInfoS2C.prototype.timeStamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerNotifyTeamInfoS2C.create = function create(properties) {
        return new GamerNotifyTeamInfoS2C(properties);
    };
    GamerNotifyTeamInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.teamId);
        if (message.aim != null && message.hasOwnProperty("aim"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.aim);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
        if (message.value != null && message.hasOwnProperty("value"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.value);
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.timeStamp);
        return writer;
    };
    GamerNotifyTeamInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyTeamInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyTeamInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.teamId = reader.uint32();
                break;
            case 3:
                message.aim = reader.int32();
                break;
            case 4:
                message.type = reader.int32();
                break;
            case 5:
                message.value = reader.int32();
                break;
            case 6:
                message.timeStamp = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyTeamInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyTeamInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            if (!$util.isInteger(message.teamId))
                return "teamId: integer expected";
        if (message.aim != null && message.hasOwnProperty("aim"))
            if (!$util.isInteger(message.aim))
                return "aim: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.value != null && message.hasOwnProperty("value"))
            if (!$util.isInteger(message.value))
                return "value: integer expected";
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (!$util.isInteger(message.timeStamp) && !(message.timeStamp && $util.isInteger(message.timeStamp.low) && $util.isInteger(message.timeStamp.high)))
                return "timeStamp: integer|Long expected";
        return null;
    };
    GamerNotifyTeamInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyTeamInfoS2C)
            return object;
        var message = new $root.GamerNotifyTeamInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.teamId != null)
            message.teamId = object.teamId >>> 0;
        if (object.aim != null)
            message.aim = object.aim | 0;
        switch (object.type) {
        case "NullType":
        case 0:
            message.type = 0;
            break;
        case "Friend":
        case 1:
            message.type = 1;
            break;
        case "Reject":
        case 2:
            message.type = 2;
            break;
        case "Wait":
        case 3:
            message.type = 3;
            break;
        case "Kick":
        case 4:
            message.type = 4;
            break;
        case "Military":
        case 5:
            message.type = 5;
            break;
        }
        if (object.value != null)
            message.value = object.value | 0;
        if (object.timeStamp != null)
            if ($util.Long)
                (message.timeStamp = $util.Long.fromValue(object.timeStamp)).unsigned = false;
            else if (typeof object.timeStamp === "string")
                message.timeStamp = parseInt(object.timeStamp, 10);
            else if (typeof object.timeStamp === "number")
                message.timeStamp = object.timeStamp;
            else if (typeof object.timeStamp === "object")
                message.timeStamp = new $util.LongBits(object.timeStamp.low >>> 0, object.timeStamp.high >>> 0).toNumber();
        return message;
    };
    GamerNotifyTeamInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.teamId = 0;
            object.aim = 0;
            object.type = options.enums === String ? "NullType" : 0;
            object.value = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timeStamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timeStamp = options.longs === String ? "0" : 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            object.teamId = message.teamId;
        if (message.aim != null && message.hasOwnProperty("aim"))
            object.aim = message.aim;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.InviteType[message.type] : message.type;
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = message.value;
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (typeof message.timeStamp === "number")
                object.timeStamp = options.longs === String ? String(message.timeStamp) : message.timeStamp;
            else
                object.timeStamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeStamp) : options.longs === Number ? new $util.LongBits(message.timeStamp.low >>> 0, message.timeStamp.high >>> 0).toNumber() : message.timeStamp;
        return object;
    };
    GamerNotifyTeamInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyTeamInfoS2C;
})();
$root.GamerNotifyTeamChangeS2C = (function() {
    function GamerNotifyTeamChangeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyTeamChangeS2C.prototype.error = 0;
    GamerNotifyTeamChangeS2C.prototype.type = 0;
    GamerNotifyTeamChangeS2C.prototype.value = 0;
    GamerNotifyTeamChangeS2C.prototype.timeStamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerNotifyTeamChangeS2C.create = function create(properties) {
        return new GamerNotifyTeamChangeS2C(properties);
    };
    GamerNotifyTeamChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.value != null && message.hasOwnProperty("value"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.value);
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.timeStamp);
        return writer;
    };
    GamerNotifyTeamChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyTeamChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyTeamChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.value = reader.int32();
                break;
            case 4:
                message.timeStamp = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyTeamChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyTeamChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (!$util.isInteger(message.value))
                return "value: integer expected";
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (!$util.isInteger(message.timeStamp) && !(message.timeStamp && $util.isInteger(message.timeStamp.low) && $util.isInteger(message.timeStamp.high)))
                return "timeStamp: integer|Long expected";
        return null;
    };
    GamerNotifyTeamChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyTeamChangeS2C)
            return object;
        var message = new $root.GamerNotifyTeamChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.type != null)
            message.type = object.type | 0;
        if (object.value != null)
            message.value = object.value | 0;
        if (object.timeStamp != null)
            if ($util.Long)
                (message.timeStamp = $util.Long.fromValue(object.timeStamp)).unsigned = false;
            else if (typeof object.timeStamp === "string")
                message.timeStamp = parseInt(object.timeStamp, 10);
            else if (typeof object.timeStamp === "number")
                message.timeStamp = object.timeStamp;
            else if (typeof object.timeStamp === "object")
                message.timeStamp = new $util.LongBits(object.timeStamp.low >>> 0, object.timeStamp.high >>> 0).toNumber();
        return message;
    };
    GamerNotifyTeamChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.type = 0;
            object.value = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timeStamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timeStamp = options.longs === String ? "0" : 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = message.value;
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (typeof message.timeStamp === "number")
                object.timeStamp = options.longs === String ? String(message.timeStamp) : message.timeStamp;
            else
                object.timeStamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeStamp) : options.longs === Number ? new $util.LongBits(message.timeStamp.low >>> 0, message.timeStamp.high >>> 0).toNumber() : message.timeStamp;
        return object;
    };
    GamerNotifyTeamChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyTeamChangeS2C;
})();
$root.GamerNotifyTeamMemberChangeS2C = (function() {
    function GamerNotifyTeamMemberChangeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyTeamMemberChangeS2C.prototype.error = 0;
    GamerNotifyTeamMemberChangeS2C.prototype.teamer = null;
    GamerNotifyTeamMemberChangeS2C.create = function create(properties) {
        return new GamerNotifyTeamMemberChangeS2C(properties);
    };
    GamerNotifyTeamMemberChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.teamer != null && message.hasOwnProperty("teamer"))
            $root.Teamer.encode(message.teamer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyTeamMemberChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyTeamMemberChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyTeamMemberChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.teamer = $root.Teamer.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyTeamMemberChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyTeamMemberChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.teamer != null && message.hasOwnProperty("teamer")) {
            var error = $root.Teamer.verify(message.teamer);
            if (error)
                return "teamer." + error;
        }
        return null;
    };
    GamerNotifyTeamMemberChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyTeamMemberChangeS2C)
            return object;
        var message = new $root.GamerNotifyTeamMemberChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.teamer != null) {
            if (typeof object.teamer !== "object")
                throw TypeError(".GamerNotifyTeamMemberChangeS2C.teamer: object expected");
            message.teamer = $root.Teamer.fromObject(object.teamer);
        }
        return message;
    };
    GamerNotifyTeamMemberChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.teamer = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.teamer != null && message.hasOwnProperty("teamer"))
            object.teamer = $root.Teamer.toObject(message.teamer, options);
        return object;
    };
    GamerNotifyTeamMemberChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyTeamMemberChangeS2C;
})();
$root.GamerNotifyLeaveTeamS2C = (function() {
    function GamerNotifyLeaveTeamS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyLeaveTeamS2C.prototype.error = 0;
    GamerNotifyLeaveTeamS2C.prototype.memberId = 0;
    GamerNotifyLeaveTeamS2C.prototype.newOwnerId = 0;
    GamerNotifyLeaveTeamS2C.create = function create(properties) {
        return new GamerNotifyLeaveTeamS2C(properties);
    };
    GamerNotifyLeaveTeamS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.memberId != null && message.hasOwnProperty("memberId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.memberId);
        if (message.newOwnerId != null && message.hasOwnProperty("newOwnerId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.newOwnerId);
        return writer;
    };
    GamerNotifyLeaveTeamS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyLeaveTeamS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyLeaveTeamS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.memberId = reader.int32();
                break;
            case 3:
                message.newOwnerId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyLeaveTeamS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyLeaveTeamS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.memberId != null && message.hasOwnProperty("memberId"))
            if (!$util.isInteger(message.memberId))
                return "memberId: integer expected";
        if (message.newOwnerId != null && message.hasOwnProperty("newOwnerId"))
            if (!$util.isInteger(message.newOwnerId))
                return "newOwnerId: integer expected";
        return null;
    };
    GamerNotifyLeaveTeamS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyLeaveTeamS2C)
            return object;
        var message = new $root.GamerNotifyLeaveTeamS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.memberId != null)
            message.memberId = object.memberId | 0;
        if (object.newOwnerId != null)
            message.newOwnerId = object.newOwnerId | 0;
        return message;
    };
    GamerNotifyLeaveTeamS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.memberId = 0;
            object.newOwnerId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.memberId != null && message.hasOwnProperty("memberId"))
            object.memberId = message.memberId;
        if (message.newOwnerId != null && message.hasOwnProperty("newOwnerId"))
            object.newOwnerId = message.newOwnerId;
        return object;
    };
    GamerNotifyLeaveTeamS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyLeaveTeamS2C;
})();
$root.KickTeamC2S = (function() {
    function KickTeamC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    KickTeamC2S.prototype.id = 0;
    KickTeamC2S.prototype.gid = 0;
    KickTeamC2S.create = function create(properties) {
        return new KickTeamC2S(properties);
    };
    KickTeamC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.gid != null && message.hasOwnProperty("gid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gid);
        return writer;
    };
    KickTeamC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    KickTeamC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.KickTeamC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.gid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    KickTeamC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    KickTeamC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.gid != null && message.hasOwnProperty("gid"))
            if (!$util.isInteger(message.gid))
                return "gid: integer expected";
        return null;
    };
    KickTeamC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.KickTeamC2S)
            return object;
        var message = new $root.KickTeamC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.gid != null)
            message.gid = object.gid | 0;
        return message;
    };
    KickTeamC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.gid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.gid != null && message.hasOwnProperty("gid"))
            object.gid = message.gid;
        return object;
    };
    KickTeamC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return KickTeamC2S;
})();
$root.KickTeamS2C = (function() {
    function KickTeamS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    KickTeamS2C.prototype.error = 0;
    KickTeamS2C.create = function create(properties) {
        return new KickTeamS2C(properties);
    };
    KickTeamS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    KickTeamS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    KickTeamS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.KickTeamS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    KickTeamS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    KickTeamS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    KickTeamS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.KickTeamS2C)
            return object;
        var message = new $root.KickTeamS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    KickTeamS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    KickTeamS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return KickTeamS2C;
})();
$root.SetTeamHelpC2S = (function() {
    function SetTeamHelpC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SetTeamHelpC2S.prototype.id = 0;
    SetTeamHelpC2S.prototype.isHelper = false;
    SetTeamHelpC2S.create = function create(properties) {
        return new SetTeamHelpC2S(properties);
    };
    SetTeamHelpC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.isHelper != null && message.hasOwnProperty("isHelper"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isHelper);
        return writer;
    };
    SetTeamHelpC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SetTeamHelpC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SetTeamHelpC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.isHelper = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SetTeamHelpC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SetTeamHelpC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.isHelper != null && message.hasOwnProperty("isHelper"))
            if (typeof message.isHelper !== "boolean")
                return "isHelper: boolean expected";
        return null;
    };
    SetTeamHelpC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.SetTeamHelpC2S)
            return object;
        var message = new $root.SetTeamHelpC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.isHelper != null)
            message.isHelper = Boolean(object.isHelper);
        return message;
    };
    SetTeamHelpC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.isHelper = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.isHelper != null && message.hasOwnProperty("isHelper"))
            object.isHelper = message.isHelper;
        return object;
    };
    SetTeamHelpC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SetTeamHelpC2S;
})();
$root.SetTeamHelpS2C = (function() {
    function SetTeamHelpS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SetTeamHelpS2C.prototype.error = 0;
    SetTeamHelpS2C.create = function create(properties) {
        return new SetTeamHelpS2C(properties);
    };
    SetTeamHelpS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    SetTeamHelpS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SetTeamHelpS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SetTeamHelpS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SetTeamHelpS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SetTeamHelpS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    SetTeamHelpS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.SetTeamHelpS2C)
            return object;
        var message = new $root.SetTeamHelpS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    SetTeamHelpS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    SetTeamHelpS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SetTeamHelpS2C;
})();
$root.SetTeamHeroC2S = (function() {
    function SetTeamHeroC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SetTeamHeroC2S.prototype.id = 0;
    SetTeamHeroC2S.prototype.heroId = 0;
    SetTeamHeroC2S.prototype.skillId = 0;
    SetTeamHeroC2S.prototype.hero = null;
    SetTeamHeroC2S.create = function create(properties) {
        return new SetTeamHeroC2S(properties);
    };
    SetTeamHeroC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.skillId);
        if (message.hero != null && message.hasOwnProperty("hero"))
            $root.GamerHero.encode(message.hero, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    SetTeamHeroC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SetTeamHeroC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SetTeamHeroC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            case 3:
                message.skillId = reader.int32();
                break;
            case 4:
                message.hero = $root.GamerHero.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SetTeamHeroC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SetTeamHeroC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            if (!$util.isInteger(message.skillId))
                return "skillId: integer expected";
        if (message.hero != null && message.hasOwnProperty("hero")) {
            var error = $root.GamerHero.verify(message.hero);
            if (error)
                return "hero." + error;
        }
        return null;
    };
    SetTeamHeroC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.SetTeamHeroC2S)
            return object;
        var message = new $root.SetTeamHeroC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.skillId != null)
            message.skillId = object.skillId | 0;
        if (object.hero != null) {
            if (typeof object.hero !== "object")
                throw TypeError(".SetTeamHeroC2S.hero: object expected");
            message.hero = $root.GamerHero.fromObject(object.hero);
        }
        return message;
    };
    SetTeamHeroC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroId = 0;
            object.skillId = 0;
            object.hero = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            object.skillId = message.skillId;
        if (message.hero != null && message.hasOwnProperty("hero"))
            object.hero = $root.GamerHero.toObject(message.hero, options);
        return object;
    };
    SetTeamHeroC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SetTeamHeroC2S;
})();
$root.SetTeamHeroS2C = (function() {
    function SetTeamHeroS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SetTeamHeroS2C.prototype.error = 0;
    SetTeamHeroS2C.create = function create(properties) {
        return new SetTeamHeroS2C(properties);
    };
    SetTeamHeroS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    SetTeamHeroS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SetTeamHeroS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SetTeamHeroS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SetTeamHeroS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SetTeamHeroS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    SetTeamHeroS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.SetTeamHeroS2C)
            return object;
        var message = new $root.SetTeamHeroS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    SetTeamHeroS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    SetTeamHeroS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SetTeamHeroS2C;
})();
$root.SwitchTeamReadyC2S = (function() {
    function SwitchTeamReadyC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SwitchTeamReadyC2S.prototype.id = 0;
    SwitchTeamReadyC2S.create = function create(properties) {
        return new SwitchTeamReadyC2S(properties);
    };
    SwitchTeamReadyC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    SwitchTeamReadyC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SwitchTeamReadyC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SwitchTeamReadyC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SwitchTeamReadyC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SwitchTeamReadyC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    SwitchTeamReadyC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.SwitchTeamReadyC2S)
            return object;
        var message = new $root.SwitchTeamReadyC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    SwitchTeamReadyC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    SwitchTeamReadyC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SwitchTeamReadyC2S;
})();
$root.SwitchTeamReadyS2C = (function() {
    function SwitchTeamReadyS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SwitchTeamReadyS2C.prototype.error = 0;
    SwitchTeamReadyS2C.create = function create(properties) {
        return new SwitchTeamReadyS2C(properties);
    };
    SwitchTeamReadyS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    SwitchTeamReadyS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SwitchTeamReadyS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SwitchTeamReadyS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SwitchTeamReadyS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SwitchTeamReadyS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    SwitchTeamReadyS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.SwitchTeamReadyS2C)
            return object;
        var message = new $root.SwitchTeamReadyS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    SwitchTeamReadyS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    SwitchTeamReadyS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SwitchTeamReadyS2C;
})();
$root.GamerNotifyTeamReadyS2C = (function() {
    function GamerNotifyTeamReadyS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyTeamReadyS2C.prototype.error = 0;
    GamerNotifyTeamReadyS2C.prototype.memberId = 0;
    GamerNotifyTeamReadyS2C.prototype.isReady = false;
    GamerNotifyTeamReadyS2C.create = function create(properties) {
        return new GamerNotifyTeamReadyS2C(properties);
    };
    GamerNotifyTeamReadyS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.memberId != null && message.hasOwnProperty("memberId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.memberId);
        if (message.isReady != null && message.hasOwnProperty("isReady"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isReady);
        return writer;
    };
    GamerNotifyTeamReadyS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyTeamReadyS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyTeamReadyS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.memberId = reader.int32();
                break;
            case 3:
                message.isReady = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyTeamReadyS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyTeamReadyS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.memberId != null && message.hasOwnProperty("memberId"))
            if (!$util.isInteger(message.memberId))
                return "memberId: integer expected";
        if (message.isReady != null && message.hasOwnProperty("isReady"))
            if (typeof message.isReady !== "boolean")
                return "isReady: boolean expected";
        return null;
    };
    GamerNotifyTeamReadyS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyTeamReadyS2C)
            return object;
        var message = new $root.GamerNotifyTeamReadyS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.memberId != null)
            message.memberId = object.memberId | 0;
        if (object.isReady != null)
            message.isReady = Boolean(object.isReady);
        return message;
    };
    GamerNotifyTeamReadyS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.memberId = 0;
            object.isReady = false;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.memberId != null && message.hasOwnProperty("memberId"))
            object.memberId = message.memberId;
        if (message.isReady != null && message.hasOwnProperty("isReady"))
            object.isReady = message.isReady;
        return object;
    };
    GamerNotifyTeamReadyS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyTeamReadyS2C;
})();
$root.TeamBattleC2S = (function() {
    function TeamBattleC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    TeamBattleC2S.prototype.id = 0;
    TeamBattleC2S.create = function create(properties) {
        return new TeamBattleC2S(properties);
    };
    TeamBattleC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    TeamBattleC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    TeamBattleC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TeamBattleC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    TeamBattleC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    TeamBattleC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    TeamBattleC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.TeamBattleC2S)
            return object;
        var message = new $root.TeamBattleC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    TeamBattleC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    TeamBattleC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TeamBattleC2S;
})();
$root.TeamBattleS2C = (function() {
    function TeamBattleS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    TeamBattleS2C.prototype.error = 0;
    TeamBattleS2C.create = function create(properties) {
        return new TeamBattleS2C(properties);
    };
    TeamBattleS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    TeamBattleS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    TeamBattleS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TeamBattleS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    TeamBattleS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    TeamBattleS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    TeamBattleS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.TeamBattleS2C)
            return object;
        var message = new $root.TeamBattleS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    TeamBattleS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    TeamBattleS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TeamBattleS2C;
})();
$root.GetDanInfoC2S = (function() {
    function GetDanInfoC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetDanInfoC2S.prototype.id = 0;
    GetDanInfoC2S.create = function create(properties) {
        return new GetDanInfoC2S(properties);
    };
    GetDanInfoC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GetDanInfoC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetDanInfoC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetDanInfoC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetDanInfoC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetDanInfoC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GetDanInfoC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetDanInfoC2S)
            return object;
        var message = new $root.GetDanInfoC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GetDanInfoC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GetDanInfoC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetDanInfoC2S;
})();
$root.GetDanInfoS2C = (function() {
    function GetDanInfoS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetDanInfoS2C.prototype.error = 0;
    GetDanInfoS2C.prototype.gamerDan = null;
    GetDanInfoS2C.create = function create(properties) {
        return new GetDanInfoS2C(properties);
    };
    GetDanInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.gamerDan != null && message.hasOwnProperty("gamerDan"))
            $root.GamerDan.encode(message.gamerDan, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GetDanInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetDanInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetDanInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.gamerDan = $root.GamerDan.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetDanInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetDanInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.gamerDan != null && message.hasOwnProperty("gamerDan")) {
            var error = $root.GamerDan.verify(message.gamerDan);
            if (error)
                return "gamerDan." + error;
        }
        return null;
    };
    GetDanInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetDanInfoS2C)
            return object;
        var message = new $root.GetDanInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.gamerDan != null) {
            if (typeof object.gamerDan !== "object")
                throw TypeError(".GetDanInfoS2C.gamerDan: object expected");
            message.gamerDan = $root.GamerDan.fromObject(object.gamerDan);
        }
        return message;
    };
    GetDanInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.gamerDan = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.gamerDan != null && message.hasOwnProperty("gamerDan"))
            object.gamerDan = $root.GamerDan.toObject(message.gamerDan, options);
        return object;
    };
    GetDanInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetDanInfoS2C;
})();
$root.GamerNotifyDanInfoS2C = (function() {
    function GamerNotifyDanInfoS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyDanInfoS2C.prototype.error = 0;
    GamerNotifyDanInfoS2C.prototype.gamerDan = null;
    GamerNotifyDanInfoS2C.create = function create(properties) {
        return new GamerNotifyDanInfoS2C(properties);
    };
    GamerNotifyDanInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.gamerDan != null && message.hasOwnProperty("gamerDan"))
            $root.GamerDan.encode(message.gamerDan, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyDanInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyDanInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyDanInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.gamerDan = $root.GamerDan.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyDanInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyDanInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.gamerDan != null && message.hasOwnProperty("gamerDan")) {
            var error = $root.GamerDan.verify(message.gamerDan);
            if (error)
                return "gamerDan." + error;
        }
        return null;
    };
    GamerNotifyDanInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyDanInfoS2C)
            return object;
        var message = new $root.GamerNotifyDanInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.gamerDan != null) {
            if (typeof object.gamerDan !== "object")
                throw TypeError(".GamerNotifyDanInfoS2C.gamerDan: object expected");
            message.gamerDan = $root.GamerDan.fromObject(object.gamerDan);
        }
        return message;
    };
    GamerNotifyDanInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.gamerDan = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.gamerDan != null && message.hasOwnProperty("gamerDan"))
            object.gamerDan = $root.GamerDan.toObject(message.gamerDan, options);
        return object;
    };
    GamerNotifyDanInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyDanInfoS2C;
})();
$root.GamerNotifyNewSeasonS2C = (function() {
    function GamerNotifyNewSeasonS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewSeasonS2C.prototype.error = 0;
    GamerNotifyNewSeasonS2C.prototype.newSeasonId = 0;
    GamerNotifyNewSeasonS2C.create = function create(properties) {
        return new GamerNotifyNewSeasonS2C(properties);
    };
    GamerNotifyNewSeasonS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.newSeasonId != null && message.hasOwnProperty("newSeasonId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.newSeasonId);
        return writer;
    };
    GamerNotifyNewSeasonS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewSeasonS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewSeasonS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.newSeasonId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewSeasonS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewSeasonS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.newSeasonId != null && message.hasOwnProperty("newSeasonId"))
            if (!$util.isInteger(message.newSeasonId))
                return "newSeasonId: integer expected";
        return null;
    };
    GamerNotifyNewSeasonS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewSeasonS2C)
            return object;
        var message = new $root.GamerNotifyNewSeasonS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.newSeasonId != null)
            message.newSeasonId = object.newSeasonId | 0;
        return message;
    };
    GamerNotifyNewSeasonS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.newSeasonId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.newSeasonId != null && message.hasOwnProperty("newSeasonId"))
            object.newSeasonId = message.newSeasonId;
        return object;
    };
    GamerNotifyNewSeasonS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewSeasonS2C;
})();
$root.GetDuelRankC2S = (function() {
    function GetDuelRankC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetDuelRankC2S.prototype.id = 0;
    GetDuelRankC2S.prototype.type = 0;
    GetDuelRankC2S.prototype.seasonId = 0;
    GetDuelRankC2S.prototype.start = 0;
    GetDuelRankC2S.prototype.length = 0;
    GetDuelRankC2S.create = function create(properties) {
        return new GetDuelRankC2S(properties);
    };
    GetDuelRankC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.seasonId != null && message.hasOwnProperty("seasonId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.seasonId);
        if (message.start != null && message.hasOwnProperty("start"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.start);
        if (message.length != null && message.hasOwnProperty("length"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.length);
        return writer;
    };
    GetDuelRankC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetDuelRankC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetDuelRankC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.seasonId = reader.int32();
                break;
            case 4:
                message.start = reader.int32();
                break;
            case 5:
                message.length = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetDuelRankC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetDuelRankC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.seasonId != null && message.hasOwnProperty("seasonId"))
            if (!$util.isInteger(message.seasonId))
                return "seasonId: integer expected";
        if (message.start != null && message.hasOwnProperty("start"))
            if (!$util.isInteger(message.start))
                return "start: integer expected";
        if (message.length != null && message.hasOwnProperty("length"))
            if (!$util.isInteger(message.length))
                return "length: integer expected";
        return null;
    };
    GetDuelRankC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetDuelRankC2S)
            return object;
        var message = new $root.GetDuelRankC2S();
        if (object.id != null)
            message.id = object.id | 0;
        switch (object.type) {
        case "RankType_None":
        case 0:
            message.type = 0;
            break;
        case "Total":
        case 1:
            message.type = 1;
            break;
        case "Server":
        case 2:
            message.type = 2;
            break;
        case "HallOfFame":
        case 3:
            message.type = 3;
            break;
        }
        if (object.seasonId != null)
            message.seasonId = object.seasonId | 0;
        if (object.start != null)
            message.start = object.start | 0;
        if (object.length != null)
            message.length = object.length | 0;
        return message;
    };
    GetDuelRankC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.type = options.enums === String ? "RankType_None" : 0;
            object.seasonId = 0;
            object.start = 0;
            object.length = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.RankType[message.type] : message.type;
        if (message.seasonId != null && message.hasOwnProperty("seasonId"))
            object.seasonId = message.seasonId;
        if (message.start != null && message.hasOwnProperty("start"))
            object.start = message.start;
        if (message.length != null && message.hasOwnProperty("length"))
            object.length = message.length;
        return object;
    };
    GetDuelRankC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetDuelRankC2S;
})();
$root.GetDuelRankS2C = (function() {
    function GetDuelRankS2C(properties) {
        this.ranks = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetDuelRankS2C.prototype.error = 0;
    GetDuelRankS2C.prototype.type = 0;
    GetDuelRankS2C.prototype.seasonId = 0;
    GetDuelRankS2C.prototype.ranks = $util.emptyArray;
    GetDuelRankS2C.create = function create(properties) {
        return new GetDuelRankS2C(properties);
    };
    GetDuelRankS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.seasonId != null && message.hasOwnProperty("seasonId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.seasonId);
        if (message.ranks != null && message.ranks.length)
            for (var i = 0; i < message.ranks.length; ++i)
                $root.RankLength.encode(message.ranks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    GetDuelRankS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetDuelRankS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetDuelRankS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.seasonId = reader.int32();
                break;
            case 4:
                if (!(message.ranks && message.ranks.length))
                    message.ranks = [];
                message.ranks.push($root.RankLength.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetDuelRankS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetDuelRankS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.seasonId != null && message.hasOwnProperty("seasonId"))
            if (!$util.isInteger(message.seasonId))
                return "seasonId: integer expected";
        if (message.ranks != null && message.hasOwnProperty("ranks")) {
            if (!Array.isArray(message.ranks))
                return "ranks: array expected";
            for (var i = 0; i < message.ranks.length; ++i) {
                var error = $root.RankLength.verify(message.ranks[i]);
                if (error)
                    return "ranks." + error;
            }
        }
        return null;
    };
    GetDuelRankS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetDuelRankS2C)
            return object;
        var message = new $root.GetDuelRankS2C();
        if (object.error != null)
            message.error = object.error | 0;
        switch (object.type) {
        case "RankType_None":
        case 0:
            message.type = 0;
            break;
        case "Total":
        case 1:
            message.type = 1;
            break;
        case "Server":
        case 2:
            message.type = 2;
            break;
        case "HallOfFame":
        case 3:
            message.type = 3;
            break;
        }
        if (object.seasonId != null)
            message.seasonId = object.seasonId | 0;
        if (object.ranks) {
            if (!Array.isArray(object.ranks))
                throw TypeError(".GetDuelRankS2C.ranks: array expected");
            message.ranks = [];
            for (var i = 0; i < object.ranks.length; ++i) {
                if (typeof object.ranks[i] !== "object")
                    throw TypeError(".GetDuelRankS2C.ranks: object expected");
                message.ranks[i] = $root.RankLength.fromObject(object.ranks[i]);
            }
        }
        return message;
    };
    GetDuelRankS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.ranks = [];
        if (options.defaults) {
            object.error = 0;
            object.type = options.enums === String ? "RankType_None" : 0;
            object.seasonId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.RankType[message.type] : message.type;
        if (message.seasonId != null && message.hasOwnProperty("seasonId"))
            object.seasonId = message.seasonId;
        if (message.ranks && message.ranks.length) {
            object.ranks = [];
            for (var j = 0; j < message.ranks.length; ++j)
                object.ranks[j] = $root.RankLength.toObject(message.ranks[j], options);
        }
        return object;
    };
    GetDuelRankS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetDuelRankS2C;
})();
$root.SysListC2S = (function() {
    function SysListC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SysListC2S.prototype.id = 0;
    SysListC2S.create = function create(properties) {
        return new SysListC2S(properties);
    };
    SysListC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    SysListC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SysListC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SysListC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SysListC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SysListC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    SysListC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.SysListC2S)
            return object;
        var message = new $root.SysListC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    SysListC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    SysListC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SysListC2S;
})();
$root.SysListS2C = (function() {
    function SysListS2C(properties) {
        this.openedSys = [];
        this.readySys = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SysListS2C.prototype.error = 0;
    SysListS2C.prototype.openedSys = $util.emptyArray;
    SysListS2C.prototype.readySys = $util.emptyArray;
    SysListS2C.create = function create(properties) {
        return new SysListS2C(properties);
    };
    SysListS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.openedSys != null && message.openedSys.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.openedSys.length; ++i)
                writer.int32(message.openedSys[i]);
            writer.ldelim();
        }
        if (message.readySys != null && message.readySys.length) {
            writer.uint32(/* id 3, wireType 2 =*/26).fork();
            for (var i = 0; i < message.readySys.length; ++i)
                writer.int32(message.readySys[i]);
            writer.ldelim();
        }
        return writer;
    };
    SysListS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SysListS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SysListS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.openedSys && message.openedSys.length))
                    message.openedSys = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.openedSys.push(reader.int32());
                } else
                    message.openedSys.push(reader.int32());
                break;
            case 3:
                if (!(message.readySys && message.readySys.length))
                    message.readySys = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.readySys.push(reader.int32());
                } else
                    message.readySys.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SysListS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SysListS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.openedSys != null && message.hasOwnProperty("openedSys")) {
            if (!Array.isArray(message.openedSys))
                return "openedSys: array expected";
            for (var i = 0; i < message.openedSys.length; ++i)
                if (!$util.isInteger(message.openedSys[i]))
                    return "openedSys: integer[] expected";
        }
        if (message.readySys != null && message.hasOwnProperty("readySys")) {
            if (!Array.isArray(message.readySys))
                return "readySys: array expected";
            for (var i = 0; i < message.readySys.length; ++i)
                if (!$util.isInteger(message.readySys[i]))
                    return "readySys: integer[] expected";
        }
        return null;
    };
    SysListS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.SysListS2C)
            return object;
        var message = new $root.SysListS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.openedSys) {
            if (!Array.isArray(object.openedSys))
                throw TypeError(".SysListS2C.openedSys: array expected");
            message.openedSys = [];
            for (var i = 0; i < object.openedSys.length; ++i)
                message.openedSys[i] = object.openedSys[i] | 0;
        }
        if (object.readySys) {
            if (!Array.isArray(object.readySys))
                throw TypeError(".SysListS2C.readySys: array expected");
            message.readySys = [];
            for (var i = 0; i < object.readySys.length; ++i)
                message.readySys[i] = object.readySys[i] | 0;
        }
        return message;
    };
    SysListS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.openedSys = [];
            object.readySys = [];
        }
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.openedSys && message.openedSys.length) {
            object.openedSys = [];
            for (var j = 0; j < message.openedSys.length; ++j)
                object.openedSys[j] = message.openedSys[j];
        }
        if (message.readySys && message.readySys.length) {
            object.readySys = [];
            for (var j = 0; j < message.readySys.length; ++j)
                object.readySys[j] = message.readySys[j];
        }
        return object;
    };
    SysListS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SysListS2C;
})();
$root.SysOpenShowC2S = (function() {
    function SysOpenShowC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SysOpenShowC2S.prototype.id = 0;
    SysOpenShowC2S.prototype.sysid = 0;
    SysOpenShowC2S.create = function create(properties) {
        return new SysOpenShowC2S(properties);
    };
    SysOpenShowC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.sysid != null && message.hasOwnProperty("sysid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sysid);
        return writer;
    };
    SysOpenShowC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SysOpenShowC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SysOpenShowC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.sysid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SysOpenShowC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SysOpenShowC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.sysid != null && message.hasOwnProperty("sysid"))
            if (!$util.isInteger(message.sysid))
                return "sysid: integer expected";
        return null;
    };
    SysOpenShowC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.SysOpenShowC2S)
            return object;
        var message = new $root.SysOpenShowC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.sysid != null)
            message.sysid = object.sysid | 0;
        return message;
    };
    SysOpenShowC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.sysid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.sysid != null && message.hasOwnProperty("sysid"))
            object.sysid = message.sysid;
        return object;
    };
    SysOpenShowC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SysOpenShowC2S;
})();
$root.SysOpenShowS2C = (function() {
    function SysOpenShowS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SysOpenShowS2C.prototype.error = 0;
    SysOpenShowS2C.prototype.sysid = 0;
    SysOpenShowS2C.create = function create(properties) {
        return new SysOpenShowS2C(properties);
    };
    SysOpenShowS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.sysid != null && message.hasOwnProperty("sysid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sysid);
        return writer;
    };
    SysOpenShowS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SysOpenShowS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SysOpenShowS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.sysid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SysOpenShowS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SysOpenShowS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.sysid != null && message.hasOwnProperty("sysid"))
            if (!$util.isInteger(message.sysid))
                return "sysid: integer expected";
        return null;
    };
    SysOpenShowS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.SysOpenShowS2C)
            return object;
        var message = new $root.SysOpenShowS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.sysid != null)
            message.sysid = object.sysid | 0;
        return message;
    };
    SysOpenShowS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.sysid = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.sysid != null && message.hasOwnProperty("sysid"))
            object.sysid = message.sysid;
        return object;
    };
    SysOpenShowS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SysOpenShowS2C;
})();
$root.GetQuestsC2S = (function() {
    function GetQuestsC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetQuestsC2S.prototype.id = 0;
    GetQuestsC2S.create = function create(properties) {
        return new GetQuestsC2S(properties);
    };
    GetQuestsC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GetQuestsC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetQuestsC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetQuestsC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetQuestsC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetQuestsC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GetQuestsC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetQuestsC2S)
            return object;
        var message = new $root.GetQuestsC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GetQuestsC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GetQuestsC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetQuestsC2S;
})();
$root.GetQuestsS2C = (function() {
    function GetQuestsS2C(properties) {
        this.questList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetQuestsS2C.prototype.error = 0;
    GetQuestsS2C.prototype.questList = $util.emptyArray;
    GetQuestsS2C.prototype.active = null;
    GetQuestsS2C.create = function create(properties) {
        return new GetQuestsS2C(properties);
    };
    GetQuestsS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.questList != null && message.questList.length)
            for (var i = 0; i < message.questList.length; ++i)
                $root.GamerQuest.encode(message.questList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.active != null && message.hasOwnProperty("active"))
            $root.DailyActive.encode(message.active, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GetQuestsS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetQuestsS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetQuestsS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.questList && message.questList.length))
                    message.questList = [];
                message.questList.push($root.GamerQuest.decode(reader, reader.uint32()));
                break;
            case 3:
                message.active = $root.DailyActive.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetQuestsS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetQuestsS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.questList != null && message.hasOwnProperty("questList")) {
            if (!Array.isArray(message.questList))
                return "questList: array expected";
            for (var i = 0; i < message.questList.length; ++i) {
                var error = $root.GamerQuest.verify(message.questList[i]);
                if (error)
                    return "questList." + error;
            }
        }
        if (message.active != null && message.hasOwnProperty("active")) {
            var error = $root.DailyActive.verify(message.active);
            if (error)
                return "active." + error;
        }
        return null;
    };
    GetQuestsS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetQuestsS2C)
            return object;
        var message = new $root.GetQuestsS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.questList) {
            if (!Array.isArray(object.questList))
                throw TypeError(".GetQuestsS2C.questList: array expected");
            message.questList = [];
            for (var i = 0; i < object.questList.length; ++i) {
                if (typeof object.questList[i] !== "object")
                    throw TypeError(".GetQuestsS2C.questList: object expected");
                message.questList[i] = $root.GamerQuest.fromObject(object.questList[i]);
            }
        }
        if (object.active != null) {
            if (typeof object.active !== "object")
                throw TypeError(".GetQuestsS2C.active: object expected");
            message.active = $root.DailyActive.fromObject(object.active);
        }
        return message;
    };
    GetQuestsS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.questList = [];
        if (options.defaults) {
            object.error = 0;
            object.active = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.questList && message.questList.length) {
            object.questList = [];
            for (var j = 0; j < message.questList.length; ++j)
                object.questList[j] = $root.GamerQuest.toObject(message.questList[j], options);
        }
        if (message.active != null && message.hasOwnProperty("active"))
            object.active = $root.DailyActive.toObject(message.active, options);
        return object;
    };
    GetQuestsS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetQuestsS2C;
})();
$root.GamerNotifyQuestsS2C = (function() {
    function GamerNotifyQuestsS2C(properties) {
        this.questList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyQuestsS2C.prototype.error = 0;
    GamerNotifyQuestsS2C.prototype.questList = $util.emptyArray;
    GamerNotifyQuestsS2C.prototype.active = null;
    GamerNotifyQuestsS2C.create = function create(properties) {
        return new GamerNotifyQuestsS2C(properties);
    };
    GamerNotifyQuestsS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.questList != null && message.questList.length)
            for (var i = 0; i < message.questList.length; ++i)
                $root.GamerQuest.encode(message.questList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.active != null && message.hasOwnProperty("active"))
            $root.DailyActive.encode(message.active, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerNotifyQuestsS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyQuestsS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyQuestsS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.questList && message.questList.length))
                    message.questList = [];
                message.questList.push($root.GamerQuest.decode(reader, reader.uint32()));
                break;
            case 3:
                message.active = $root.DailyActive.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyQuestsS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyQuestsS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.questList != null && message.hasOwnProperty("questList")) {
            if (!Array.isArray(message.questList))
                return "questList: array expected";
            for (var i = 0; i < message.questList.length; ++i) {
                var error = $root.GamerQuest.verify(message.questList[i]);
                if (error)
                    return "questList." + error;
            }
        }
        if (message.active != null && message.hasOwnProperty("active")) {
            var error = $root.DailyActive.verify(message.active);
            if (error)
                return "active." + error;
        }
        return null;
    };
    GamerNotifyQuestsS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyQuestsS2C)
            return object;
        var message = new $root.GamerNotifyQuestsS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.questList) {
            if (!Array.isArray(object.questList))
                throw TypeError(".GamerNotifyQuestsS2C.questList: array expected");
            message.questList = [];
            for (var i = 0; i < object.questList.length; ++i) {
                if (typeof object.questList[i] !== "object")
                    throw TypeError(".GamerNotifyQuestsS2C.questList: object expected");
                message.questList[i] = $root.GamerQuest.fromObject(object.questList[i]);
            }
        }
        if (object.active != null) {
            if (typeof object.active !== "object")
                throw TypeError(".GamerNotifyQuestsS2C.active: object expected");
            message.active = $root.DailyActive.fromObject(object.active);
        }
        return message;
    };
    GamerNotifyQuestsS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.questList = [];
        if (options.defaults) {
            object.error = 0;
            object.active = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.questList && message.questList.length) {
            object.questList = [];
            for (var j = 0; j < message.questList.length; ++j)
                object.questList[j] = $root.GamerQuest.toObject(message.questList[j], options);
        }
        if (message.active != null && message.hasOwnProperty("active"))
            object.active = $root.DailyActive.toObject(message.active, options);
        return object;
    };
    GamerNotifyQuestsS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyQuestsS2C;
})();
$root.GetQuestRewardC2S = (function() {
    function GetQuestRewardC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetQuestRewardC2S.prototype.id = 0;
    GetQuestRewardC2S.prototype.questId = 0;
    GetQuestRewardC2S.create = function create(properties) {
        return new GetQuestRewardC2S(properties);
    };
    GetQuestRewardC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.questId != null && message.hasOwnProperty("questId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.questId);
        return writer;
    };
    GetQuestRewardC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetQuestRewardC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetQuestRewardC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.questId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetQuestRewardC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetQuestRewardC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.questId != null && message.hasOwnProperty("questId"))
            if (!$util.isInteger(message.questId))
                return "questId: integer expected";
        return null;
    };
    GetQuestRewardC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetQuestRewardC2S)
            return object;
        var message = new $root.GetQuestRewardC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.questId != null)
            message.questId = object.questId | 0;
        return message;
    };
    GetQuestRewardC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.questId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.questId != null && message.hasOwnProperty("questId"))
            object.questId = message.questId;
        return object;
    };
    GetQuestRewardC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetQuestRewardC2S;
})();
$root.GetQuestRewardS2C = (function() {
    function GetQuestRewardS2C(properties) {
        this.itemList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetQuestRewardS2C.prototype.error = 0;
    GetQuestRewardS2C.prototype.itemList = $util.emptyArray;
    GetQuestRewardS2C.create = function create(properties) {
        return new GetQuestRewardS2C(properties);
    };
    GetQuestRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.itemList != null && message.itemList.length)
            for (var i = 0; i < message.itemList.length; ++i)
                $root.GameItem.encode(message.itemList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GetQuestRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetQuestRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetQuestRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.itemList && message.itemList.length))
                    message.itemList = [];
                message.itemList.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetQuestRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetQuestRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.itemList != null && message.hasOwnProperty("itemList")) {
            if (!Array.isArray(message.itemList))
                return "itemList: array expected";
            for (var i = 0; i < message.itemList.length; ++i) {
                var error = $root.GameItem.verify(message.itemList[i]);
                if (error)
                    return "itemList." + error;
            }
        }
        return null;
    };
    GetQuestRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetQuestRewardS2C)
            return object;
        var message = new $root.GetQuestRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.itemList) {
            if (!Array.isArray(object.itemList))
                throw TypeError(".GetQuestRewardS2C.itemList: array expected");
            message.itemList = [];
            for (var i = 0; i < object.itemList.length; ++i) {
                if (typeof object.itemList[i] !== "object")
                    throw TypeError(".GetQuestRewardS2C.itemList: object expected");
                message.itemList[i] = $root.GameItem.fromObject(object.itemList[i]);
            }
        }
        return message;
    };
    GetQuestRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.itemList = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.itemList && message.itemList.length) {
            object.itemList = [];
            for (var j = 0; j < message.itemList.length; ++j)
                object.itemList[j] = $root.GameItem.toObject(message.itemList[j], options);
        }
        return object;
    };
    GetQuestRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetQuestRewardS2C;
})();
$root.GetDailyQuestRewardC2S = (function() {
    function GetDailyQuestRewardC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetDailyQuestRewardC2S.prototype.id = 0;
    GetDailyQuestRewardC2S.prototype.rewardActive = 0;
    GetDailyQuestRewardC2S.create = function create(properties) {
        return new GetDailyQuestRewardC2S(properties);
    };
    GetDailyQuestRewardC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.rewardActive != null && message.hasOwnProperty("rewardActive"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.rewardActive);
        return writer;
    };
    GetDailyQuestRewardC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetDailyQuestRewardC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetDailyQuestRewardC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.rewardActive = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetDailyQuestRewardC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetDailyQuestRewardC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.rewardActive != null && message.hasOwnProperty("rewardActive"))
            if (!$util.isInteger(message.rewardActive))
                return "rewardActive: integer expected";
        return null;
    };
    GetDailyQuestRewardC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetDailyQuestRewardC2S)
            return object;
        var message = new $root.GetDailyQuestRewardC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.rewardActive != null)
            message.rewardActive = object.rewardActive | 0;
        return message;
    };
    GetDailyQuestRewardC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.rewardActive = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.rewardActive != null && message.hasOwnProperty("rewardActive"))
            object.rewardActive = message.rewardActive;
        return object;
    };
    GetDailyQuestRewardC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetDailyQuestRewardC2S;
})();
$root.GetDailyQuestRewardS2C = (function() {
    function GetDailyQuestRewardS2C(properties) {
        this.itemList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetDailyQuestRewardS2C.prototype.error = 0;
    GetDailyQuestRewardS2C.prototype.active = null;
    GetDailyQuestRewardS2C.prototype.itemList = $util.emptyArray;
    GetDailyQuestRewardS2C.create = function create(properties) {
        return new GetDailyQuestRewardS2C(properties);
    };
    GetDailyQuestRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.active != null && message.hasOwnProperty("active"))
            $root.DailyActive.encode(message.active, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.itemList != null && message.itemList.length)
            for (var i = 0; i < message.itemList.length; ++i)
                $root.GameItem.encode(message.itemList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GetDailyQuestRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetDailyQuestRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetDailyQuestRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.active = $root.DailyActive.decode(reader, reader.uint32());
                break;
            case 3:
                if (!(message.itemList && message.itemList.length))
                    message.itemList = [];
                message.itemList.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetDailyQuestRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetDailyQuestRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.active != null && message.hasOwnProperty("active")) {
            var error = $root.DailyActive.verify(message.active);
            if (error)
                return "active." + error;
        }
        if (message.itemList != null && message.hasOwnProperty("itemList")) {
            if (!Array.isArray(message.itemList))
                return "itemList: array expected";
            for (var i = 0; i < message.itemList.length; ++i) {
                var error = $root.GameItem.verify(message.itemList[i]);
                if (error)
                    return "itemList." + error;
            }
        }
        return null;
    };
    GetDailyQuestRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetDailyQuestRewardS2C)
            return object;
        var message = new $root.GetDailyQuestRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.active != null) {
            if (typeof object.active !== "object")
                throw TypeError(".GetDailyQuestRewardS2C.active: object expected");
            message.active = $root.DailyActive.fromObject(object.active);
        }
        if (object.itemList) {
            if (!Array.isArray(object.itemList))
                throw TypeError(".GetDailyQuestRewardS2C.itemList: array expected");
            message.itemList = [];
            for (var i = 0; i < object.itemList.length; ++i) {
                if (typeof object.itemList[i] !== "object")
                    throw TypeError(".GetDailyQuestRewardS2C.itemList: object expected");
                message.itemList[i] = $root.GameItem.fromObject(object.itemList[i]);
            }
        }
        return message;
    };
    GetDailyQuestRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.itemList = [];
        if (options.defaults) {
            object.error = 0;
            object.active = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.active != null && message.hasOwnProperty("active"))
            object.active = $root.DailyActive.toObject(message.active, options);
        if (message.itemList && message.itemList.length) {
            object.itemList = [];
            for (var j = 0; j < message.itemList.length; ++j)
                object.itemList[j] = $root.GameItem.toObject(message.itemList[j], options);
        }
        return object;
    };
    GetDailyQuestRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetDailyQuestRewardS2C;
})();
$root.GamerHeroImageChooseC2S = (function() {
    function GamerHeroImageChooseC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerHeroImageChooseC2S.prototype.id = 0;
    GamerHeroImageChooseC2S.create = function create(properties) {
        return new GamerHeroImageChooseC2S(properties);
    };
    GamerHeroImageChooseC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerHeroImageChooseC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerHeroImageChooseC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerHeroImageChooseC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerHeroImageChooseC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerHeroImageChooseC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerHeroImageChooseC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerHeroImageChooseC2S)
            return object;
        var message = new $root.GamerHeroImageChooseC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerHeroImageChooseC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerHeroImageChooseC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerHeroImageChooseC2S;
})();
$root.GamerHeroImageChooseS2C = (function() {
    function GamerHeroImageChooseS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerHeroImageChooseS2C.prototype.error = 0;
    GamerHeroImageChooseS2C.prototype.heroId = 0;
    GamerHeroImageChooseS2C.create = function create(properties) {
        return new GamerHeroImageChooseS2C(properties);
    };
    GamerHeroImageChooseS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        return writer;
    };
    GamerHeroImageChooseS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerHeroImageChooseS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerHeroImageChooseS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerHeroImageChooseS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerHeroImageChooseS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        return null;
    };
    GamerHeroImageChooseS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerHeroImageChooseS2C)
            return object;
        var message = new $root.GamerHeroImageChooseS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        return message;
    };
    GamerHeroImageChooseS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.heroId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        return object;
    };
    GamerHeroImageChooseS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerHeroImageChooseS2C;
})();
$root.GamerHeroImageChangeC2S = (function() {
    function GamerHeroImageChangeC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerHeroImageChangeC2S.prototype.id = 0;
    GamerHeroImageChangeC2S.prototype.heroId = 0;
    GamerHeroImageChangeC2S.create = function create(properties) {
        return new GamerHeroImageChangeC2S(properties);
    };
    GamerHeroImageChangeC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        return writer;
    };
    GamerHeroImageChangeC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerHeroImageChangeC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerHeroImageChangeC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerHeroImageChangeC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerHeroImageChangeC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        return null;
    };
    GamerHeroImageChangeC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerHeroImageChangeC2S)
            return object;
        var message = new $root.GamerHeroImageChangeC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        return message;
    };
    GamerHeroImageChangeC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.heroId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        return object;
    };
    GamerHeroImageChangeC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerHeroImageChangeC2S;
})();
$root.GamerHeroImageChangeS2C = (function() {
    function GamerHeroImageChangeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerHeroImageChangeS2C.prototype.error = 0;
    GamerHeroImageChangeS2C.prototype.heroId = 0;
    GamerHeroImageChangeS2C.create = function create(properties) {
        return new GamerHeroImageChangeS2C(properties);
    };
    GamerHeroImageChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.heroId);
        return writer;
    };
    GamerHeroImageChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerHeroImageChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerHeroImageChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.heroId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerHeroImageChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerHeroImageChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        return null;
    };
    GamerHeroImageChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerHeroImageChangeS2C)
            return object;
        var message = new $root.GamerHeroImageChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        return message;
    };
    GamerHeroImageChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.heroId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        return object;
    };
    GamerHeroImageChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerHeroImageChangeS2C;
})();
$root.GamerBuyRollC2S = (function() {
    function GamerBuyRollC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerBuyRollC2S.prototype.id = 0;
    GamerBuyRollC2S.prototype.num = 0;
    GamerBuyRollC2S.create = function create(properties) {
        return new GamerBuyRollC2S(properties);
    };
    GamerBuyRollC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.num != null && message.hasOwnProperty("num"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
        return writer;
    };
    GamerBuyRollC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerBuyRollC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerBuyRollC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.num = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerBuyRollC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerBuyRollC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.num != null && message.hasOwnProperty("num"))
            if (!$util.isInteger(message.num))
                return "num: integer expected";
        return null;
    };
    GamerBuyRollC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerBuyRollC2S)
            return object;
        var message = new $root.GamerBuyRollC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.num != null)
            message.num = object.num | 0;
        return message;
    };
    GamerBuyRollC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.num = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.num != null && message.hasOwnProperty("num"))
            object.num = message.num;
        return object;
    };
    GamerBuyRollC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerBuyRollC2S;
})();
$root.GamerBuyRollS2C = (function() {
    function GamerBuyRollS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerBuyRollS2C.prototype.error = 0;
    GamerBuyRollS2C.prototype.rollNum = 0;
    GamerBuyRollS2C.create = function create(properties) {
        return new GamerBuyRollS2C(properties);
    };
    GamerBuyRollS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.rollNum != null && message.hasOwnProperty("rollNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.rollNum);
        return writer;
    };
    GamerBuyRollS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerBuyRollS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerBuyRollS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.rollNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerBuyRollS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerBuyRollS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.rollNum != null && message.hasOwnProperty("rollNum"))
            if (!$util.isInteger(message.rollNum))
                return "rollNum: integer expected";
        return null;
    };
    GamerBuyRollS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerBuyRollS2C)
            return object;
        var message = new $root.GamerBuyRollS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.rollNum != null)
            message.rollNum = object.rollNum | 0;
        return message;
    };
    GamerBuyRollS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.rollNum = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.rollNum != null && message.hasOwnProperty("rollNum"))
            object.rollNum = message.rollNum;
        return object;
    };
    GamerBuyRollS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerBuyRollS2C;
})();
$root.GetGamerSecretLandC2S = (function() {
    function GetGamerSecretLandC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetGamerSecretLandC2S.prototype.id = 0;
    GetGamerSecretLandC2S.create = function create(properties) {
        return new GetGamerSecretLandC2S(properties);
    };
    GetGamerSecretLandC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GetGamerSecretLandC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetGamerSecretLandC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetGamerSecretLandC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetGamerSecretLandC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetGamerSecretLandC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GetGamerSecretLandC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetGamerSecretLandC2S)
            return object;
        var message = new $root.GetGamerSecretLandC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GetGamerSecretLandC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GetGamerSecretLandC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetGamerSecretLandC2S;
})();
$root.GetGamerSecretLandS2C = (function() {
    function GetGamerSecretLandS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetGamerSecretLandS2C.prototype.error = 0;
    GetGamerSecretLandS2C.prototype.secretLand = null;
    GetGamerSecretLandS2C.prototype.thisWeekReward = 0;
    GetGamerSecretLandS2C.prototype.lastWeekReward = 0;
    GetGamerSecretLandS2C.prototype.lastBattleReward = null;
    GetGamerSecretLandS2C.create = function create(properties) {
        return new GetGamerSecretLandS2C(properties);
    };
    GetGamerSecretLandS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            $root.GamerSecretLand.encode(message.secretLand, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.thisWeekReward != null && message.hasOwnProperty("thisWeekReward"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.thisWeekReward);
        if (message.lastWeekReward != null && message.hasOwnProperty("lastWeekReward"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.lastWeekReward);
        if (message.lastBattleReward != null && message.hasOwnProperty("lastBattleReward"))
            $root.SecretLandReward.encode(message.lastBattleReward, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    GetGamerSecretLandS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetGamerSecretLandS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetGamerSecretLandS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.secretLand = $root.GamerSecretLand.decode(reader, reader.uint32());
                break;
            case 3:
                message.thisWeekReward = reader.int32();
                break;
            case 4:
                message.lastWeekReward = reader.int32();
                break;
            case 5:
                message.lastBattleReward = $root.SecretLandReward.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetGamerSecretLandS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetGamerSecretLandS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.secretLand != null && message.hasOwnProperty("secretLand")) {
            var error = $root.GamerSecretLand.verify(message.secretLand);
            if (error)
                return "secretLand." + error;
        }
        if (message.thisWeekReward != null && message.hasOwnProperty("thisWeekReward"))
            if (!$util.isInteger(message.thisWeekReward))
                return "thisWeekReward: integer expected";
        if (message.lastWeekReward != null && message.hasOwnProperty("lastWeekReward"))
            if (!$util.isInteger(message.lastWeekReward))
                return "lastWeekReward: integer expected";
        if (message.lastBattleReward != null && message.hasOwnProperty("lastBattleReward")) {
            var error = $root.SecretLandReward.verify(message.lastBattleReward);
            if (error)
                return "lastBattleReward." + error;
        }
        return null;
    };
    GetGamerSecretLandS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetGamerSecretLandS2C)
            return object;
        var message = new $root.GetGamerSecretLandS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.secretLand != null) {
            if (typeof object.secretLand !== "object")
                throw TypeError(".GetGamerSecretLandS2C.secretLand: object expected");
            message.secretLand = $root.GamerSecretLand.fromObject(object.secretLand);
        }
        if (object.thisWeekReward != null)
            message.thisWeekReward = object.thisWeekReward | 0;
        if (object.lastWeekReward != null)
            message.lastWeekReward = object.lastWeekReward | 0;
        if (object.lastBattleReward != null) {
            if (typeof object.lastBattleReward !== "object")
                throw TypeError(".GetGamerSecretLandS2C.lastBattleReward: object expected");
            message.lastBattleReward = $root.SecretLandReward.fromObject(object.lastBattleReward);
        }
        return message;
    };
    GetGamerSecretLandS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.secretLand = null;
            object.thisWeekReward = 0;
            object.lastWeekReward = 0;
            object.lastBattleReward = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            object.secretLand = $root.GamerSecretLand.toObject(message.secretLand, options);
        if (message.thisWeekReward != null && message.hasOwnProperty("thisWeekReward"))
            object.thisWeekReward = message.thisWeekReward;
        if (message.lastWeekReward != null && message.hasOwnProperty("lastWeekReward"))
            object.lastWeekReward = message.lastWeekReward;
        if (message.lastBattleReward != null && message.hasOwnProperty("lastBattleReward"))
            object.lastBattleReward = $root.SecretLandReward.toObject(message.lastBattleReward, options);
        return object;
    };
    GetGamerSecretLandS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetGamerSecretLandS2C;
})();
$root.GamerNotifyGamerSecretLandInfoS2C = (function() {
    function GamerNotifyGamerSecretLandInfoS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyGamerSecretLandInfoS2C.prototype.error = 0;
    GamerNotifyGamerSecretLandInfoS2C.prototype.secretLand = null;
    GamerNotifyGamerSecretLandInfoS2C.prototype.thisWeekReward = 0;
    GamerNotifyGamerSecretLandInfoS2C.prototype.lastWeekReward = 0;
    GamerNotifyGamerSecretLandInfoS2C.prototype.lastBattleReward = null;
    GamerNotifyGamerSecretLandInfoS2C.create = function create(properties) {
        return new GamerNotifyGamerSecretLandInfoS2C(properties);
    };
    GamerNotifyGamerSecretLandInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            $root.GamerSecretLand.encode(message.secretLand, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.thisWeekReward != null && message.hasOwnProperty("thisWeekReward"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.thisWeekReward);
        if (message.lastWeekReward != null && message.hasOwnProperty("lastWeekReward"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.lastWeekReward);
        if (message.lastBattleReward != null && message.hasOwnProperty("lastBattleReward"))
            $root.SecretLandReward.encode(message.lastBattleReward, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    GamerNotifyGamerSecretLandInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyGamerSecretLandInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyGamerSecretLandInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.secretLand = $root.GamerSecretLand.decode(reader, reader.uint32());
                break;
            case 3:
                message.thisWeekReward = reader.int32();
                break;
            case 4:
                message.lastWeekReward = reader.int32();
                break;
            case 5:
                message.lastBattleReward = $root.SecretLandReward.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyGamerSecretLandInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyGamerSecretLandInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.secretLand != null && message.hasOwnProperty("secretLand")) {
            var error = $root.GamerSecretLand.verify(message.secretLand);
            if (error)
                return "secretLand." + error;
        }
        if (message.thisWeekReward != null && message.hasOwnProperty("thisWeekReward"))
            if (!$util.isInteger(message.thisWeekReward))
                return "thisWeekReward: integer expected";
        if (message.lastWeekReward != null && message.hasOwnProperty("lastWeekReward"))
            if (!$util.isInteger(message.lastWeekReward))
                return "lastWeekReward: integer expected";
        if (message.lastBattleReward != null && message.hasOwnProperty("lastBattleReward")) {
            var error = $root.SecretLandReward.verify(message.lastBattleReward);
            if (error)
                return "lastBattleReward." + error;
        }
        return null;
    };
    GamerNotifyGamerSecretLandInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyGamerSecretLandInfoS2C)
            return object;
        var message = new $root.GamerNotifyGamerSecretLandInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.secretLand != null) {
            if (typeof object.secretLand !== "object")
                throw TypeError(".GamerNotifyGamerSecretLandInfoS2C.secretLand: object expected");
            message.secretLand = $root.GamerSecretLand.fromObject(object.secretLand);
        }
        if (object.thisWeekReward != null)
            message.thisWeekReward = object.thisWeekReward | 0;
        if (object.lastWeekReward != null)
            message.lastWeekReward = object.lastWeekReward | 0;
        if (object.lastBattleReward != null) {
            if (typeof object.lastBattleReward !== "object")
                throw TypeError(".GamerNotifyGamerSecretLandInfoS2C.lastBattleReward: object expected");
            message.lastBattleReward = $root.SecretLandReward.fromObject(object.lastBattleReward);
        }
        return message;
    };
    GamerNotifyGamerSecretLandInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.secretLand = null;
            object.thisWeekReward = 0;
            object.lastWeekReward = 0;
            object.lastBattleReward = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            object.secretLand = $root.GamerSecretLand.toObject(message.secretLand, options);
        if (message.thisWeekReward != null && message.hasOwnProperty("thisWeekReward"))
            object.thisWeekReward = message.thisWeekReward;
        if (message.lastWeekReward != null && message.hasOwnProperty("lastWeekReward"))
            object.lastWeekReward = message.lastWeekReward;
        if (message.lastBattleReward != null && message.hasOwnProperty("lastBattleReward"))
            object.lastBattleReward = $root.SecretLandReward.toObject(message.lastBattleReward, options);
        return object;
    };
    GamerNotifyGamerSecretLandInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyGamerSecretLandInfoS2C;
})();
$root.GamerNotifySecretLandInfoS2C = (function() {
    function GamerNotifySecretLandInfoS2C(properties) {
        this.thisAffixList = [];
        this.nextAffixList = [];
        this.checkpointMap = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifySecretLandInfoS2C.prototype.error = 0;
    GamerNotifySecretLandInfoS2C.prototype.thisAffixList = $util.emptyArray;
    GamerNotifySecretLandInfoS2C.prototype.nextAffixList = $util.emptyArray;
    GamerNotifySecretLandInfoS2C.prototype.checkpointMap = $util.emptyArray;
    GamerNotifySecretLandInfoS2C.create = function create(properties) {
        return new GamerNotifySecretLandInfoS2C(properties);
    };
    GamerNotifySecretLandInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.thisAffixList != null && message.thisAffixList.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.thisAffixList.length; ++i)
                writer.int32(message.thisAffixList[i]);
            writer.ldelim();
        }
        if (message.nextAffixList != null && message.nextAffixList.length) {
            writer.uint32(/* id 3, wireType 2 =*/26).fork();
            for (var i = 0; i < message.nextAffixList.length; ++i)
                writer.int32(message.nextAffixList[i]);
            writer.ldelim();
        }
        if (message.checkpointMap != null && message.checkpointMap.length)
            for (var i = 0; i < message.checkpointMap.length; ++i)
                $root.SecretLandMap.encode(message.checkpointMap[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    GamerNotifySecretLandInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifySecretLandInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifySecretLandInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.thisAffixList && message.thisAffixList.length))
                    message.thisAffixList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.thisAffixList.push(reader.int32());
                } else
                    message.thisAffixList.push(reader.int32());
                break;
            case 3:
                if (!(message.nextAffixList && message.nextAffixList.length))
                    message.nextAffixList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.nextAffixList.push(reader.int32());
                } else
                    message.nextAffixList.push(reader.int32());
                break;
            case 4:
                if (!(message.checkpointMap && message.checkpointMap.length))
                    message.checkpointMap = [];
                message.checkpointMap.push($root.SecretLandMap.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifySecretLandInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifySecretLandInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.thisAffixList != null && message.hasOwnProperty("thisAffixList")) {
            if (!Array.isArray(message.thisAffixList))
                return "thisAffixList: array expected";
            for (var i = 0; i < message.thisAffixList.length; ++i)
                if (!$util.isInteger(message.thisAffixList[i]))
                    return "thisAffixList: integer[] expected";
        }
        if (message.nextAffixList != null && message.hasOwnProperty("nextAffixList")) {
            if (!Array.isArray(message.nextAffixList))
                return "nextAffixList: array expected";
            for (var i = 0; i < message.nextAffixList.length; ++i)
                if (!$util.isInteger(message.nextAffixList[i]))
                    return "nextAffixList: integer[] expected";
        }
        if (message.checkpointMap != null && message.hasOwnProperty("checkpointMap")) {
            if (!Array.isArray(message.checkpointMap))
                return "checkpointMap: array expected";
            for (var i = 0; i < message.checkpointMap.length; ++i) {
                var error = $root.SecretLandMap.verify(message.checkpointMap[i]);
                if (error)
                    return "checkpointMap." + error;
            }
        }
        return null;
    };
    GamerNotifySecretLandInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifySecretLandInfoS2C)
            return object;
        var message = new $root.GamerNotifySecretLandInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.thisAffixList) {
            if (!Array.isArray(object.thisAffixList))
                throw TypeError(".GamerNotifySecretLandInfoS2C.thisAffixList: array expected");
            message.thisAffixList = [];
            for (var i = 0; i < object.thisAffixList.length; ++i)
                message.thisAffixList[i] = object.thisAffixList[i] | 0;
        }
        if (object.nextAffixList) {
            if (!Array.isArray(object.nextAffixList))
                throw TypeError(".GamerNotifySecretLandInfoS2C.nextAffixList: array expected");
            message.nextAffixList = [];
            for (var i = 0; i < object.nextAffixList.length; ++i)
                message.nextAffixList[i] = object.nextAffixList[i] | 0;
        }
        if (object.checkpointMap) {
            if (!Array.isArray(object.checkpointMap))
                throw TypeError(".GamerNotifySecretLandInfoS2C.checkpointMap: array expected");
            message.checkpointMap = [];
            for (var i = 0; i < object.checkpointMap.length; ++i) {
                if (typeof object.checkpointMap[i] !== "object")
                    throw TypeError(".GamerNotifySecretLandInfoS2C.checkpointMap: object expected");
                message.checkpointMap[i] = $root.SecretLandMap.fromObject(object.checkpointMap[i]);
            }
        }
        return message;
    };
    GamerNotifySecretLandInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.thisAffixList = [];
            object.nextAffixList = [];
            object.checkpointMap = [];
        }
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.thisAffixList && message.thisAffixList.length) {
            object.thisAffixList = [];
            for (var j = 0; j < message.thisAffixList.length; ++j)
                object.thisAffixList[j] = message.thisAffixList[j];
        }
        if (message.nextAffixList && message.nextAffixList.length) {
            object.nextAffixList = [];
            for (var j = 0; j < message.nextAffixList.length; ++j)
                object.nextAffixList[j] = message.nextAffixList[j];
        }
        if (message.checkpointMap && message.checkpointMap.length) {
            object.checkpointMap = [];
            for (var j = 0; j < message.checkpointMap.length; ++j)
                object.checkpointMap[j] = $root.SecretLandMap.toObject(message.checkpointMap[j], options);
        }
        return object;
    };
    GamerNotifySecretLandInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifySecretLandInfoS2C;
})();
$root.GamerSecretLandBattleRewardC2S = (function() {
    function GamerSecretLandBattleRewardC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSecretLandBattleRewardC2S.prototype.id = 0;
    GamerSecretLandBattleRewardC2S.prototype.useRoll = false;
    GamerSecretLandBattleRewardC2S.create = function create(properties) {
        return new GamerSecretLandBattleRewardC2S(properties);
    };
    GamerSecretLandBattleRewardC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.useRoll != null && message.hasOwnProperty("useRoll"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.useRoll);
        return writer;
    };
    GamerSecretLandBattleRewardC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSecretLandBattleRewardC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSecretLandBattleRewardC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.useRoll = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSecretLandBattleRewardC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSecretLandBattleRewardC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.useRoll != null && message.hasOwnProperty("useRoll"))
            if (typeof message.useRoll !== "boolean")
                return "useRoll: boolean expected";
        return null;
    };
    GamerSecretLandBattleRewardC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSecretLandBattleRewardC2S)
            return object;
        var message = new $root.GamerSecretLandBattleRewardC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.useRoll != null)
            message.useRoll = Boolean(object.useRoll);
        return message;
    };
    GamerSecretLandBattleRewardC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.useRoll = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.useRoll != null && message.hasOwnProperty("useRoll"))
            object.useRoll = message.useRoll;
        return object;
    };
    GamerSecretLandBattleRewardC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSecretLandBattleRewardC2S;
})();
$root.GamerSecretLandBattleRewardS2C = (function() {
    function GamerSecretLandBattleRewardS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSecretLandBattleRewardS2C.prototype.error = 0;
    GamerSecretLandBattleRewardS2C.prototype.items = $util.emptyArray;
    GamerSecretLandBattleRewardS2C.create = function create(properties) {
        return new GamerSecretLandBattleRewardS2C(properties);
    };
    GamerSecretLandBattleRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerSecretLandBattleRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSecretLandBattleRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSecretLandBattleRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSecretLandBattleRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSecretLandBattleRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    GamerSecretLandBattleRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSecretLandBattleRewardS2C)
            return object;
        var message = new $root.GamerSecretLandBattleRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerSecretLandBattleRewardS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerSecretLandBattleRewardS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    GamerSecretLandBattleRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    GamerSecretLandBattleRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSecretLandBattleRewardS2C;
})();
$root.GamerSecretLandWeekRewardC2S = (function() {
    function GamerSecretLandWeekRewardC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSecretLandWeekRewardC2S.prototype.id = 0;
    GamerSecretLandWeekRewardC2S.create = function create(properties) {
        return new GamerSecretLandWeekRewardC2S(properties);
    };
    GamerSecretLandWeekRewardC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerSecretLandWeekRewardC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSecretLandWeekRewardC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSecretLandWeekRewardC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSecretLandWeekRewardC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSecretLandWeekRewardC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerSecretLandWeekRewardC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSecretLandWeekRewardC2S)
            return object;
        var message = new $root.GamerSecretLandWeekRewardC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerSecretLandWeekRewardC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerSecretLandWeekRewardC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSecretLandWeekRewardC2S;
})();
$root.GamerSecretLandWeekRewardS2C = (function() {
    function GamerSecretLandWeekRewardS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSecretLandWeekRewardS2C.prototype.error = 0;
    GamerSecretLandWeekRewardS2C.prototype.items = $util.emptyArray;
    GamerSecretLandWeekRewardS2C.create = function create(properties) {
        return new GamerSecretLandWeekRewardS2C(properties);
    };
    GamerSecretLandWeekRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerSecretLandWeekRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSecretLandWeekRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSecretLandWeekRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSecretLandWeekRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSecretLandWeekRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    GamerSecretLandWeekRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSecretLandWeekRewardS2C)
            return object;
        var message = new $root.GamerSecretLandWeekRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerSecretLandWeekRewardS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerSecretLandWeekRewardS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    GamerSecretLandWeekRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    GamerSecretLandWeekRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSecretLandWeekRewardS2C;
})();
$root.GamerSecretLandRankC2S = (function() {
    function GamerSecretLandRankC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSecretLandRankC2S.prototype.id = 0;
    GamerSecretLandRankC2S.prototype.type = 0;
    GamerSecretLandRankC2S.create = function create(properties) {
        return new GamerSecretLandRankC2S(properties);
    };
    GamerSecretLandRankC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        return writer;
    };
    GamerSecretLandRankC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSecretLandRankC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSecretLandRankC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSecretLandRankC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSecretLandRankC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        return null;
    };
    GamerSecretLandRankC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSecretLandRankC2S)
            return object;
        var message = new $root.GamerSecretLandRankC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.type != null)
            message.type = object.type | 0;
        return message;
    };
    GamerSecretLandRankC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.type = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        return object;
    };
    GamerSecretLandRankC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSecretLandRankC2S;
})();
$root.GamerSecretLandRankS2C = (function() {
    function GamerSecretLandRankS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSecretLandRankS2C.prototype.error = 0;
    GamerSecretLandRankS2C.create = function create(properties) {
        return new GamerSecretLandRankS2C(properties);
    };
    GamerSecretLandRankS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerSecretLandRankS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSecretLandRankS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSecretLandRankS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSecretLandRankS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSecretLandRankS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerSecretLandRankS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSecretLandRankS2C)
            return object;
        var message = new $root.GamerSecretLandRankS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerSecretLandRankS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerSecretLandRankS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSecretLandRankS2C;
})();
$root.GetGamerSecretLandInfoC2S = (function() {
    function GetGamerSecretLandInfoC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetGamerSecretLandInfoC2S.prototype.id = 0;
    GetGamerSecretLandInfoC2S.create = function create(properties) {
        return new GetGamerSecretLandInfoC2S(properties);
    };
    GetGamerSecretLandInfoC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GetGamerSecretLandInfoC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetGamerSecretLandInfoC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetGamerSecretLandInfoC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetGamerSecretLandInfoC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetGamerSecretLandInfoC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GetGamerSecretLandInfoC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetGamerSecretLandInfoC2S)
            return object;
        var message = new $root.GetGamerSecretLandInfoC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GetGamerSecretLandInfoC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GetGamerSecretLandInfoC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetGamerSecretLandInfoC2S;
})();
$root.GetGamerSecretLandInfoS2C = (function() {
    function GetGamerSecretLandInfoS2C(properties) {
        this.thisAffixList = [];
        this.nextAffixList = [];
        this.checkpointMap = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetGamerSecretLandInfoS2C.prototype.error = 0;
    GetGamerSecretLandInfoS2C.prototype.thisAffixList = $util.emptyArray;
    GetGamerSecretLandInfoS2C.prototype.nextAffixList = $util.emptyArray;
    GetGamerSecretLandInfoS2C.prototype.checkpointMap = $util.emptyArray;
    GetGamerSecretLandInfoS2C.create = function create(properties) {
        return new GetGamerSecretLandInfoS2C(properties);
    };
    GetGamerSecretLandInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.thisAffixList != null && message.thisAffixList.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.thisAffixList.length; ++i)
                writer.int32(message.thisAffixList[i]);
            writer.ldelim();
        }
        if (message.nextAffixList != null && message.nextAffixList.length) {
            writer.uint32(/* id 3, wireType 2 =*/26).fork();
            for (var i = 0; i < message.nextAffixList.length; ++i)
                writer.int32(message.nextAffixList[i]);
            writer.ldelim();
        }
        if (message.checkpointMap != null && message.checkpointMap.length)
            for (var i = 0; i < message.checkpointMap.length; ++i)
                $root.SecretLandMap.encode(message.checkpointMap[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    GetGamerSecretLandInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetGamerSecretLandInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetGamerSecretLandInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.thisAffixList && message.thisAffixList.length))
                    message.thisAffixList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.thisAffixList.push(reader.int32());
                } else
                    message.thisAffixList.push(reader.int32());
                break;
            case 3:
                if (!(message.nextAffixList && message.nextAffixList.length))
                    message.nextAffixList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.nextAffixList.push(reader.int32());
                } else
                    message.nextAffixList.push(reader.int32());
                break;
            case 4:
                if (!(message.checkpointMap && message.checkpointMap.length))
                    message.checkpointMap = [];
                message.checkpointMap.push($root.SecretLandMap.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetGamerSecretLandInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetGamerSecretLandInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.thisAffixList != null && message.hasOwnProperty("thisAffixList")) {
            if (!Array.isArray(message.thisAffixList))
                return "thisAffixList: array expected";
            for (var i = 0; i < message.thisAffixList.length; ++i)
                if (!$util.isInteger(message.thisAffixList[i]))
                    return "thisAffixList: integer[] expected";
        }
        if (message.nextAffixList != null && message.hasOwnProperty("nextAffixList")) {
            if (!Array.isArray(message.nextAffixList))
                return "nextAffixList: array expected";
            for (var i = 0; i < message.nextAffixList.length; ++i)
                if (!$util.isInteger(message.nextAffixList[i]))
                    return "nextAffixList: integer[] expected";
        }
        if (message.checkpointMap != null && message.hasOwnProperty("checkpointMap")) {
            if (!Array.isArray(message.checkpointMap))
                return "checkpointMap: array expected";
            for (var i = 0; i < message.checkpointMap.length; ++i) {
                var error = $root.SecretLandMap.verify(message.checkpointMap[i]);
                if (error)
                    return "checkpointMap." + error;
            }
        }
        return null;
    };
    GetGamerSecretLandInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetGamerSecretLandInfoS2C)
            return object;
        var message = new $root.GetGamerSecretLandInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.thisAffixList) {
            if (!Array.isArray(object.thisAffixList))
                throw TypeError(".GetGamerSecretLandInfoS2C.thisAffixList: array expected");
            message.thisAffixList = [];
            for (var i = 0; i < object.thisAffixList.length; ++i)
                message.thisAffixList[i] = object.thisAffixList[i] | 0;
        }
        if (object.nextAffixList) {
            if (!Array.isArray(object.nextAffixList))
                throw TypeError(".GetGamerSecretLandInfoS2C.nextAffixList: array expected");
            message.nextAffixList = [];
            for (var i = 0; i < object.nextAffixList.length; ++i)
                message.nextAffixList[i] = object.nextAffixList[i] | 0;
        }
        if (object.checkpointMap) {
            if (!Array.isArray(object.checkpointMap))
                throw TypeError(".GetGamerSecretLandInfoS2C.checkpointMap: array expected");
            message.checkpointMap = [];
            for (var i = 0; i < object.checkpointMap.length; ++i) {
                if (typeof object.checkpointMap[i] !== "object")
                    throw TypeError(".GetGamerSecretLandInfoS2C.checkpointMap: object expected");
                message.checkpointMap[i] = $root.SecretLandMap.fromObject(object.checkpointMap[i]);
            }
        }
        return message;
    };
    GetGamerSecretLandInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.thisAffixList = [];
            object.nextAffixList = [];
            object.checkpointMap = [];
        }
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.thisAffixList && message.thisAffixList.length) {
            object.thisAffixList = [];
            for (var j = 0; j < message.thisAffixList.length; ++j)
                object.thisAffixList[j] = message.thisAffixList[j];
        }
        if (message.nextAffixList && message.nextAffixList.length) {
            object.nextAffixList = [];
            for (var j = 0; j < message.nextAffixList.length; ++j)
                object.nextAffixList[j] = message.nextAffixList[j];
        }
        if (message.checkpointMap && message.checkpointMap.length) {
            object.checkpointMap = [];
            for (var j = 0; j < message.checkpointMap.length; ++j)
                object.checkpointMap[j] = $root.SecretLandMap.toObject(message.checkpointMap[j], options);
        }
        return object;
    };
    GetGamerSecretLandInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetGamerSecretLandInfoS2C;
})();
$root.GamerNotifySLTreasureBoxS2C = (function() {
    function GamerNotifySLTreasureBoxS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifySLTreasureBoxS2C.prototype.error = 0;
    GamerNotifySLTreasureBoxS2C.prototype.boxKey = "";
    GamerNotifySLTreasureBoxS2C.prototype.treasureBox = null;
    GamerNotifySLTreasureBoxS2C.prototype.id = 0;
    GamerNotifySLTreasureBoxS2C.create = function create(properties) {
        return new GamerNotifySLTreasureBoxS2C(properties);
    };
    GamerNotifySLTreasureBoxS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.boxKey != null && message.hasOwnProperty("boxKey"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.boxKey);
        if (message.treasureBox != null && message.hasOwnProperty("treasureBox"))
            $root.SecretLandTreasureBox.encode(message.treasureBox, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.id);
        return writer;
    };
    GamerNotifySLTreasureBoxS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifySLTreasureBoxS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifySLTreasureBoxS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.boxKey = reader.string();
                break;
            case 3:
                message.treasureBox = $root.SecretLandTreasureBox.decode(reader, reader.uint32());
                break;
            case 4:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifySLTreasureBoxS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifySLTreasureBoxS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.boxKey != null && message.hasOwnProperty("boxKey"))
            if (!$util.isString(message.boxKey))
                return "boxKey: string expected";
        if (message.treasureBox != null && message.hasOwnProperty("treasureBox")) {
            var error = $root.SecretLandTreasureBox.verify(message.treasureBox);
            if (error)
                return "treasureBox." + error;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerNotifySLTreasureBoxS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifySLTreasureBoxS2C)
            return object;
        var message = new $root.GamerNotifySLTreasureBoxS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.boxKey != null)
            message.boxKey = String(object.boxKey);
        if (object.treasureBox != null) {
            if (typeof object.treasureBox !== "object")
                throw TypeError(".GamerNotifySLTreasureBoxS2C.treasureBox: object expected");
            message.treasureBox = $root.SecretLandTreasureBox.fromObject(object.treasureBox);
        }
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerNotifySLTreasureBoxS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.boxKey = "";
            object.treasureBox = null;
            object.id = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.boxKey != null && message.hasOwnProperty("boxKey"))
            object.boxKey = message.boxKey;
        if (message.treasureBox != null && message.hasOwnProperty("treasureBox"))
            object.treasureBox = $root.SecretLandTreasureBox.toObject(message.treasureBox, options);
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerNotifySLTreasureBoxS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifySLTreasureBoxS2C;
})();
$root.GamerNotifyNewSecretLandResultS2C = (function() {
    function GamerNotifyNewSecretLandResultS2C(properties) {
        this.gidList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewSecretLandResultS2C.prototype.error = 0;
    GamerNotifyNewSecretLandResultS2C.prototype.costTime = 0;
    GamerNotifyNewSecretLandResultS2C.prototype.checkPointId = 0;
    GamerNotifyNewSecretLandResultS2C.prototype.level = 0;
    GamerNotifyNewSecretLandResultS2C.prototype.result = 0;
    GamerNotifyNewSecretLandResultS2C.prototype.battleType = 0;
    GamerNotifyNewSecretLandResultS2C.prototype.preKeyStone = 0;
    GamerNotifyNewSecretLandResultS2C.prototype.nowKeyStone = 0;
    GamerNotifyNewSecretLandResultS2C.prototype.boxKey = "";
    GamerNotifyNewSecretLandResultS2C.prototype.gidList = $util.emptyArray;
    GamerNotifyNewSecretLandResultS2C.create = function create(properties) {
        return new GamerNotifyNewSecretLandResultS2C(properties);
    };
    GamerNotifyNewSecretLandResultS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.costTime != null && message.hasOwnProperty("costTime"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.costTime);
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.checkPointId);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.level);
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.result);
        if (message.battleType != null && message.hasOwnProperty("battleType"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.battleType);
        if (message.preKeyStone != null && message.hasOwnProperty("preKeyStone"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.preKeyStone);
        if (message.nowKeyStone != null && message.hasOwnProperty("nowKeyStone"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.nowKeyStone);
        if (message.boxKey != null && message.hasOwnProperty("boxKey"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.boxKey);
        if (message.gidList != null && message.gidList.length) {
            writer.uint32(/* id 10, wireType 2 =*/82).fork();
            for (var i = 0; i < message.gidList.length; ++i)
                writer.int32(message.gidList[i]);
            writer.ldelim();
        }
        return writer;
    };
    GamerNotifyNewSecretLandResultS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewSecretLandResultS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewSecretLandResultS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.costTime = reader.int32();
                break;
            case 3:
                message.checkPointId = reader.int32();
                break;
            case 4:
                message.level = reader.int32();
                break;
            case 5:
                message.result = reader.int32();
                break;
            case 6:
                message.battleType = reader.int32();
                break;
            case 7:
                message.preKeyStone = reader.int32();
                break;
            case 8:
                message.nowKeyStone = reader.int32();
                break;
            case 9:
                message.boxKey = reader.string();
                break;
            case 10:
                if (!(message.gidList && message.gidList.length))
                    message.gidList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.gidList.push(reader.int32());
                } else
                    message.gidList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewSecretLandResultS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewSecretLandResultS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.costTime != null && message.hasOwnProperty("costTime"))
            if (!$util.isInteger(message.costTime))
                return "costTime: integer expected";
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            if (!$util.isInteger(message.checkPointId))
                return "checkPointId: integer expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        if (message.battleType != null && message.hasOwnProperty("battleType"))
            switch (message.battleType) {
            default:
                return "battleType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
                break;
            }
        if (message.preKeyStone != null && message.hasOwnProperty("preKeyStone"))
            if (!$util.isInteger(message.preKeyStone))
                return "preKeyStone: integer expected";
        if (message.nowKeyStone != null && message.hasOwnProperty("nowKeyStone"))
            if (!$util.isInteger(message.nowKeyStone))
                return "nowKeyStone: integer expected";
        if (message.boxKey != null && message.hasOwnProperty("boxKey"))
            if (!$util.isString(message.boxKey))
                return "boxKey: string expected";
        if (message.gidList != null && message.hasOwnProperty("gidList")) {
            if (!Array.isArray(message.gidList))
                return "gidList: array expected";
            for (var i = 0; i < message.gidList.length; ++i)
                if (!$util.isInteger(message.gidList[i]))
                    return "gidList: integer[] expected";
        }
        return null;
    };
    GamerNotifyNewSecretLandResultS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewSecretLandResultS2C)
            return object;
        var message = new $root.GamerNotifyNewSecretLandResultS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.costTime != null)
            message.costTime = object.costTime | 0;
        if (object.checkPointId != null)
            message.checkPointId = object.checkPointId | 0;
        if (object.level != null)
            message.level = object.level | 0;
        switch (object.result) {
        case "None":
        case 0:
            message.result = 0;
            break;
        case "ActiveExit":
        case 1:
            message.result = 1;
            break;
        case "NotPass":
        case 2:
            message.result = 2;
            break;
        case "PassTimeOne":
        case 3:
            message.result = 3;
            break;
        case "PassTimeTwo":
        case 4:
            message.result = 4;
            break;
        case "PassTimeThree":
        case 5:
            message.result = 5;
            break;
        case "PassOutOfTime":
        case 6:
            message.result = 6;
            break;
        }
        switch (object.battleType) {
        case "MINVALID":
        case 0:
            message.battleType = 0;
            break;
        case "PVE_M1":
        case 1:
            message.battleType = 1;
            break;
        case "PVE_M2":
        case 2:
            message.battleType = 2;
            break;
        case "PVE_M3":
        case 3:
            message.battleType = 3;
            break;
        case "PVE_M4":
        case 4:
            message.battleType = 4;
            break;
        case "PVP_M1V1":
        case 100:
            message.battleType = 100;
            break;
        case "PVP_M2V2":
        case 101:
            message.battleType = 101;
            break;
        case "PVP_M3V3":
        case 102:
            message.battleType = 102;
            break;
        case "PVP_M4V4":
        case 103:
            message.battleType = 103;
            break;
        case "PVP_M5V5":
        case 104:
            message.battleType = 104;
            break;
        }
        if (object.preKeyStone != null)
            message.preKeyStone = object.preKeyStone | 0;
        if (object.nowKeyStone != null)
            message.nowKeyStone = object.nowKeyStone | 0;
        if (object.boxKey != null)
            message.boxKey = String(object.boxKey);
        if (object.gidList) {
            if (!Array.isArray(object.gidList))
                throw TypeError(".GamerNotifyNewSecretLandResultS2C.gidList: array expected");
            message.gidList = [];
            for (var i = 0; i < object.gidList.length; ++i)
                message.gidList[i] = object.gidList[i] | 0;
        }
        return message;
    };
    GamerNotifyNewSecretLandResultS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.gidList = [];
        if (options.defaults) {
            object.error = 0;
            object.costTime = 0;
            object.checkPointId = 0;
            object.level = 0;
            object.result = options.enums === String ? "None" : 0;
            object.battleType = options.enums === String ? "MINVALID" : 0;
            object.preKeyStone = 0;
            object.nowKeyStone = 0;
            object.boxKey = "";
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.costTime != null && message.hasOwnProperty("costTime"))
            object.costTime = message.costTime;
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            object.checkPointId = message.checkPointId;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.SLBattleResultType[message.result] : message.result;
        if (message.battleType != null && message.hasOwnProperty("battleType"))
            object.battleType = options.enums === String ? $root.PVPType[message.battleType] : message.battleType;
        if (message.preKeyStone != null && message.hasOwnProperty("preKeyStone"))
            object.preKeyStone = message.preKeyStone;
        if (message.nowKeyStone != null && message.hasOwnProperty("nowKeyStone"))
            object.nowKeyStone = message.nowKeyStone;
        if (message.boxKey != null && message.hasOwnProperty("boxKey"))
            object.boxKey = message.boxKey;
        if (message.gidList && message.gidList.length) {
            object.gidList = [];
            for (var j = 0; j < message.gidList.length; ++j)
                object.gidList[j] = message.gidList[j];
        }
        return object;
    };
    GamerNotifyNewSecretLandResultS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewSecretLandResultS2C;
})();
$root.GamerChangeItemIsSawC2S = (function() {
    function GamerChangeItemIsSawC2S(properties) {
        this.uidList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeItemIsSawC2S.prototype.id = 0;
    GamerChangeItemIsSawC2S.prototype.type = 0;
    GamerChangeItemIsSawC2S.prototype.uidList = $util.emptyArray;
    GamerChangeItemIsSawC2S.create = function create(properties) {
        return new GamerChangeItemIsSawC2S(properties);
    };
    GamerChangeItemIsSawC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.uidList != null && message.uidList.length) {
            writer.uint32(/* id 3, wireType 2 =*/26).fork();
            for (var i = 0; i < message.uidList.length; ++i)
                writer.int32(message.uidList[i]);
            writer.ldelim();
        }
        return writer;
    };
    GamerChangeItemIsSawC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeItemIsSawC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeItemIsSawC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                if (!(message.uidList && message.uidList.length))
                    message.uidList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.uidList.push(reader.int32());
                } else
                    message.uidList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeItemIsSawC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeItemIsSawC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        if (message.uidList != null && message.hasOwnProperty("uidList")) {
            if (!Array.isArray(message.uidList))
                return "uidList: array expected";
            for (var i = 0; i < message.uidList.length; ++i)
                if (!$util.isInteger(message.uidList[i]))
                    return "uidList: integer[] expected";
        }
        return null;
    };
    GamerChangeItemIsSawC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeItemIsSawC2S)
            return object;
        var message = new $root.GamerChangeItemIsSawC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.type != null)
            message.type = object.type | 0;
        if (object.uidList) {
            if (!Array.isArray(object.uidList))
                throw TypeError(".GamerChangeItemIsSawC2S.uidList: array expected");
            message.uidList = [];
            for (var i = 0; i < object.uidList.length; ++i)
                message.uidList[i] = object.uidList[i] | 0;
        }
        return message;
    };
    GamerChangeItemIsSawC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.uidList = [];
        if (options.defaults) {
            object.id = 0;
            object.type = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.uidList && message.uidList.length) {
            object.uidList = [];
            for (var j = 0; j < message.uidList.length; ++j)
                object.uidList[j] = message.uidList[j];
        }
        return object;
    };
    GamerChangeItemIsSawC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeItemIsSawC2S;
})();
$root.GamerChangeItemIsSawS2C = (function() {
    function GamerChangeItemIsSawS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeItemIsSawS2C.prototype.error = 0;
    GamerChangeItemIsSawS2C.create = function create(properties) {
        return new GamerChangeItemIsSawS2C(properties);
    };
    GamerChangeItemIsSawS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerChangeItemIsSawS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeItemIsSawS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeItemIsSawS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeItemIsSawS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeItemIsSawS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerChangeItemIsSawS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeItemIsSawS2C)
            return object;
        var message = new $root.GamerChangeItemIsSawS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerChangeItemIsSawS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerChangeItemIsSawS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeItemIsSawS2C;
})();
$root.PrevC2S = (function() {
    function PrevC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PrevC2S.prototype.key = "";
    PrevC2S.create = function create(properties) {
        return new PrevC2S(properties);
    };
    PrevC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && message.hasOwnProperty("key"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
        return writer;
    };
    PrevC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PrevC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PrevC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.key = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PrevC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PrevC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isString(message.key))
                return "key: string expected";
        return null;
    };
    PrevC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.PrevC2S)
            return object;
        var message = new $root.PrevC2S();
        if (object.key != null)
            message.key = String(object.key);
        return message;
    };
    PrevC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.key = "";
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        return object;
    };
    PrevC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PrevC2S;
})();
$root.ProxyProto = (function() {
    function ProxyProto(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ProxyProto.prototype.data = $util.newBuffer([]);
    ProxyProto.prototype.clientAddr = "";
    ProxyProto.prototype.gateAddr = "";
    ProxyProto.create = function create(properties) {
        return new ProxyProto(properties);
    };
    ProxyProto.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.data != null && message.hasOwnProperty("data"))
            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
        if (message.clientAddr != null && message.hasOwnProperty("clientAddr"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.clientAddr);
        if (message.gateAddr != null && message.hasOwnProperty("gateAddr"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.gateAddr);
        return writer;
    };
    ProxyProto.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ProxyProto.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProxyProto();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.data = reader.bytes();
                break;
            case 2:
                message.clientAddr = reader.string();
                break;
            case 3:
                message.gateAddr = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ProxyProto.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ProxyProto.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.data != null && message.hasOwnProperty("data"))
            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                return "data: buffer expected";
        if (message.clientAddr != null && message.hasOwnProperty("clientAddr"))
            if (!$util.isString(message.clientAddr))
                return "clientAddr: string expected";
        if (message.gateAddr != null && message.hasOwnProperty("gateAddr"))
            if (!$util.isString(message.gateAddr))
                return "gateAddr: string expected";
        return null;
    };
    ProxyProto.fromObject = function fromObject(object) {
        if (object instanceof $root.ProxyProto)
            return object;
        var message = new $root.ProxyProto();
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length)
                message.data = object.data;
        if (object.clientAddr != null)
            message.clientAddr = String(object.clientAddr);
        if (object.gateAddr != null)
            message.gateAddr = String(object.gateAddr);
        return message;
    };
    ProxyProto.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
            object.clientAddr = "";
            object.gateAddr = "";
        }
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        if (message.clientAddr != null && message.hasOwnProperty("clientAddr"))
            object.clientAddr = message.clientAddr;
        if (message.gateAddr != null && message.hasOwnProperty("gateAddr"))
            object.gateAddr = message.gateAddr;
        return object;
    };
    ProxyProto.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ProxyProto;
})();
$root.ServerTime = (function() {
    function ServerTime(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ServerTime.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    ServerTime.prototype.year = 0;
    ServerTime.prototype.month = 0;
    ServerTime.prototype.day = 0;
    ServerTime.prototype.hour = 0;
    ServerTime.prototype.minute = 0;
    ServerTime.prototype.second = 0;
    ServerTime.prototype.timezone = 0;
    ServerTime.create = function create(properties) {
        return new ServerTime(properties);
    };
    ServerTime.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.timestamp);
        if (message.year != null && message.hasOwnProperty("year"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.year);
        if (message.month != null && message.hasOwnProperty("month"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.month);
        if (message.day != null && message.hasOwnProperty("day"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.day);
        if (message.hour != null && message.hasOwnProperty("hour"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.hour);
        if (message.minute != null && message.hasOwnProperty("minute"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.minute);
        if (message.second != null && message.hasOwnProperty("second"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.second);
        if (message.timezone != null && message.hasOwnProperty("timezone"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.timezone);
        return writer;
    };
    ServerTime.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ServerTime.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ServerTime();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.timestamp = reader.int64();
                break;
            case 2:
                message.year = reader.int32();
                break;
            case 3:
                message.month = reader.int32();
                break;
            case 4:
                message.day = reader.int32();
                break;
            case 5:
                message.hour = reader.int32();
                break;
            case 6:
                message.minute = reader.int32();
                break;
            case 7:
                message.second = reader.int32();
                break;
            case 8:
                message.timezone = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ServerTime.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ServerTime.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                return "timestamp: integer|Long expected";
        if (message.year != null && message.hasOwnProperty("year"))
            if (!$util.isInteger(message.year))
                return "year: integer expected";
        if (message.month != null && message.hasOwnProperty("month"))
            if (!$util.isInteger(message.month))
                return "month: integer expected";
        if (message.day != null && message.hasOwnProperty("day"))
            if (!$util.isInteger(message.day))
                return "day: integer expected";
        if (message.hour != null && message.hasOwnProperty("hour"))
            if (!$util.isInteger(message.hour))
                return "hour: integer expected";
        if (message.minute != null && message.hasOwnProperty("minute"))
            if (!$util.isInteger(message.minute))
                return "minute: integer expected";
        if (message.second != null && message.hasOwnProperty("second"))
            if (!$util.isInteger(message.second))
                return "second: integer expected";
        if (message.timezone != null && message.hasOwnProperty("timezone"))
            if (!$util.isInteger(message.timezone))
                return "timezone: integer expected";
        return null;
    };
    ServerTime.fromObject = function fromObject(object) {
        if (object instanceof $root.ServerTime)
            return object;
        var message = new $root.ServerTime();
        if (object.timestamp != null)
            if ($util.Long)
                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
            else if (typeof object.timestamp === "string")
                message.timestamp = parseInt(object.timestamp, 10);
            else if (typeof object.timestamp === "number")
                message.timestamp = object.timestamp;
            else if (typeof object.timestamp === "object")
                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
        if (object.year != null)
            message.year = object.year | 0;
        if (object.month != null)
            message.month = object.month | 0;
        if (object.day != null)
            message.day = object.day | 0;
        if (object.hour != null)
            message.hour = object.hour | 0;
        if (object.minute != null)
            message.minute = object.minute | 0;
        if (object.second != null)
            message.second = object.second | 0;
        if (object.timezone != null)
            message.timezone = object.timezone | 0;
        return message;
    };
    ServerTime.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timestamp = options.longs === String ? "0" : 0;
            object.year = 0;
            object.month = 0;
            object.day = 0;
            object.hour = 0;
            object.minute = 0;
            object.second = 0;
            object.timezone = 0;
        }
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            if (typeof message.timestamp === "number")
                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
            else
                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
        if (message.year != null && message.hasOwnProperty("year"))
            object.year = message.year;
        if (message.month != null && message.hasOwnProperty("month"))
            object.month = message.month;
        if (message.day != null && message.hasOwnProperty("day"))
            object.day = message.day;
        if (message.hour != null && message.hasOwnProperty("hour"))
            object.hour = message.hour;
        if (message.minute != null && message.hasOwnProperty("minute"))
            object.minute = message.minute;
        if (message.second != null && message.hasOwnProperty("second"))
            object.second = message.second;
        if (message.timezone != null && message.hasOwnProperty("timezone"))
            object.timezone = message.timezone;
        return object;
    };
    ServerTime.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ServerTime;
})();
$root.GameItem = (function() {
    function GameItem(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GameItem.prototype.uid = 0;
    GameItem.prototype.id = 0;
    GameItem.prototype.type = 0;
    GameItem.prototype.count = 0;
    GameItem.prototype.obtainTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GameItem.prototype.name = "";
    GameItem.prototype.expireTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GameItem.prototype.equip = null;
    GameItem.prototype.isSaw = false;
    GameItem.create = function create(properties) {
        return new GameItem(properties);
    };
    GameItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
        if (message.count != null && message.hasOwnProperty("count"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.count);
        if (message.obtainTime != null && message.hasOwnProperty("obtainTime"))
            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.obtainTime);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.name);
        if (message.expireTime != null && message.hasOwnProperty("expireTime"))
            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.expireTime);
        if (message.equip != null && message.hasOwnProperty("equip"))
            $root.Equip.encode(message.equip, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.isSaw != null && message.hasOwnProperty("isSaw"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.isSaw);
        return writer;
    };
    GameItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GameItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GameItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.int32();
                break;
            case 2:
                message.id = reader.int32();
                break;
            case 3:
                message.type = reader.int32();
                break;
            case 4:
                message.count = reader.int32();
                break;
            case 5:
                message.obtainTime = reader.int64();
                break;
            case 6:
                message.name = reader.string();
                break;
            case 7:
                message.expireTime = reader.int64();
                break;
            case 8:
                message.equip = $root.Equip.decode(reader, reader.uint32());
                break;
            case 9:
                message.isSaw = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GameItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GameItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid))
                return "uid: integer expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        if (message.count != null && message.hasOwnProperty("count"))
            if (!$util.isInteger(message.count))
                return "count: integer expected";
        if (message.obtainTime != null && message.hasOwnProperty("obtainTime"))
            if (!$util.isInteger(message.obtainTime) && !(message.obtainTime && $util.isInteger(message.obtainTime.low) && $util.isInteger(message.obtainTime.high)))
                return "obtainTime: integer|Long expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.expireTime != null && message.hasOwnProperty("expireTime"))
            if (!$util.isInteger(message.expireTime) && !(message.expireTime && $util.isInteger(message.expireTime.low) && $util.isInteger(message.expireTime.high)))
                return "expireTime: integer|Long expected";
        if (message.equip != null && message.hasOwnProperty("equip")) {
            var error = $root.Equip.verify(message.equip);
            if (error)
                return "equip." + error;
        }
        if (message.isSaw != null && message.hasOwnProperty("isSaw"))
            if (typeof message.isSaw !== "boolean")
                return "isSaw: boolean expected";
        return null;
    };
    GameItem.fromObject = function fromObject(object) {
        if (object instanceof $root.GameItem)
            return object;
        var message = new $root.GameItem();
        if (object.uid != null)
            message.uid = object.uid | 0;
        if (object.id != null)
            message.id = object.id | 0;
        if (object.type != null)
            message.type = object.type | 0;
        if (object.count != null)
            message.count = object.count | 0;
        if (object.obtainTime != null)
            if ($util.Long)
                (message.obtainTime = $util.Long.fromValue(object.obtainTime)).unsigned = false;
            else if (typeof object.obtainTime === "string")
                message.obtainTime = parseInt(object.obtainTime, 10);
            else if (typeof object.obtainTime === "number")
                message.obtainTime = object.obtainTime;
            else if (typeof object.obtainTime === "object")
                message.obtainTime = new $util.LongBits(object.obtainTime.low >>> 0, object.obtainTime.high >>> 0).toNumber();
        if (object.name != null)
            message.name = String(object.name);
        if (object.expireTime != null)
            if ($util.Long)
                (message.expireTime = $util.Long.fromValue(object.expireTime)).unsigned = false;
            else if (typeof object.expireTime === "string")
                message.expireTime = parseInt(object.expireTime, 10);
            else if (typeof object.expireTime === "number")
                message.expireTime = object.expireTime;
            else if (typeof object.expireTime === "object")
                message.expireTime = new $util.LongBits(object.expireTime.low >>> 0, object.expireTime.high >>> 0).toNumber();
        if (object.equip != null) {
            if (typeof object.equip !== "object")
                throw TypeError(".GameItem.equip: object expected");
            message.equip = $root.Equip.fromObject(object.equip);
        }
        if (object.isSaw != null)
            message.isSaw = Boolean(object.isSaw);
        return message;
    };
    GameItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.uid = 0;
            object.id = 0;
            object.type = 0;
            object.count = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.obtainTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.obtainTime = options.longs === String ? "0" : 0;
            object.name = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.expireTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.expireTime = options.longs === String ? "0" : 0;
            object.equip = null;
            object.isSaw = false;
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            object.uid = message.uid;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.count != null && message.hasOwnProperty("count"))
            object.count = message.count;
        if (message.obtainTime != null && message.hasOwnProperty("obtainTime"))
            if (typeof message.obtainTime === "number")
                object.obtainTime = options.longs === String ? String(message.obtainTime) : message.obtainTime;
            else
                object.obtainTime = options.longs === String ? $util.Long.prototype.toString.call(message.obtainTime) : options.longs === Number ? new $util.LongBits(message.obtainTime.low >>> 0, message.obtainTime.high >>> 0).toNumber() : message.obtainTime;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.expireTime != null && message.hasOwnProperty("expireTime"))
            if (typeof message.expireTime === "number")
                object.expireTime = options.longs === String ? String(message.expireTime) : message.expireTime;
            else
                object.expireTime = options.longs === String ? $util.Long.prototype.toString.call(message.expireTime) : options.longs === Number ? new $util.LongBits(message.expireTime.low >>> 0, message.expireTime.high >>> 0).toNumber() : message.expireTime;
        if (message.equip != null && message.hasOwnProperty("equip"))
            object.equip = $root.Equip.toObject(message.equip, options);
        if (message.isSaw != null && message.hasOwnProperty("isSaw"))
            object.isSaw = message.isSaw;
        return object;
    };
    GameItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GameItem;
})();
$root.TimeRecord = (function() {
    function TimeRecord(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    TimeRecord.prototype.lastSign = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    TimeRecord.prototype.lastGetPVPResult = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    TimeRecord.prototype.lastWeekRec = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    TimeRecord.prototype.totalTime = 0;
    TimeRecord.create = function create(properties) {
        return new TimeRecord(properties);
    };
    TimeRecord.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.lastSign != null && message.hasOwnProperty("lastSign"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.lastSign);
        if (message.lastGetPVPResult != null && message.hasOwnProperty("lastGetPVPResult"))
            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.lastGetPVPResult);
        if (message.lastWeekRec != null && message.hasOwnProperty("lastWeekRec"))
            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.lastWeekRec);
        if (message.totalTime != null && message.hasOwnProperty("totalTime"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.totalTime);
        return writer;
    };
    TimeRecord.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    TimeRecord.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TimeRecord();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 3:
                message.lastSign = reader.int64();
                break;
            case 6:
                message.lastGetPVPResult = reader.int64();
                break;
            case 7:
                message.lastWeekRec = reader.int64();
                break;
            case 8:
                message.totalTime = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    TimeRecord.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    TimeRecord.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.lastSign != null && message.hasOwnProperty("lastSign"))
            if (!$util.isInteger(message.lastSign) && !(message.lastSign && $util.isInteger(message.lastSign.low) && $util.isInteger(message.lastSign.high)))
                return "lastSign: integer|Long expected";
        if (message.lastGetPVPResult != null && message.hasOwnProperty("lastGetPVPResult"))
            if (!$util.isInteger(message.lastGetPVPResult) && !(message.lastGetPVPResult && $util.isInteger(message.lastGetPVPResult.low) && $util.isInteger(message.lastGetPVPResult.high)))
                return "lastGetPVPResult: integer|Long expected";
        if (message.lastWeekRec != null && message.hasOwnProperty("lastWeekRec"))
            if (!$util.isInteger(message.lastWeekRec) && !(message.lastWeekRec && $util.isInteger(message.lastWeekRec.low) && $util.isInteger(message.lastWeekRec.high)))
                return "lastWeekRec: integer|Long expected";
        if (message.totalTime != null && message.hasOwnProperty("totalTime"))
            if (!$util.isInteger(message.totalTime))
                return "totalTime: integer expected";
        return null;
    };
    TimeRecord.fromObject = function fromObject(object) {
        if (object instanceof $root.TimeRecord)
            return object;
        var message = new $root.TimeRecord();
        if (object.lastSign != null)
            if ($util.Long)
                (message.lastSign = $util.Long.fromValue(object.lastSign)).unsigned = false;
            else if (typeof object.lastSign === "string")
                message.lastSign = parseInt(object.lastSign, 10);
            else if (typeof object.lastSign === "number")
                message.lastSign = object.lastSign;
            else if (typeof object.lastSign === "object")
                message.lastSign = new $util.LongBits(object.lastSign.low >>> 0, object.lastSign.high >>> 0).toNumber();
        if (object.lastGetPVPResult != null)
            if ($util.Long)
                (message.lastGetPVPResult = $util.Long.fromValue(object.lastGetPVPResult)).unsigned = false;
            else if (typeof object.lastGetPVPResult === "string")
                message.lastGetPVPResult = parseInt(object.lastGetPVPResult, 10);
            else if (typeof object.lastGetPVPResult === "number")
                message.lastGetPVPResult = object.lastGetPVPResult;
            else if (typeof object.lastGetPVPResult === "object")
                message.lastGetPVPResult = new $util.LongBits(object.lastGetPVPResult.low >>> 0, object.lastGetPVPResult.high >>> 0).toNumber();
        if (object.lastWeekRec != null)
            if ($util.Long)
                (message.lastWeekRec = $util.Long.fromValue(object.lastWeekRec)).unsigned = false;
            else if (typeof object.lastWeekRec === "string")
                message.lastWeekRec = parseInt(object.lastWeekRec, 10);
            else if (typeof object.lastWeekRec === "number")
                message.lastWeekRec = object.lastWeekRec;
            else if (typeof object.lastWeekRec === "object")
                message.lastWeekRec = new $util.LongBits(object.lastWeekRec.low >>> 0, object.lastWeekRec.high >>> 0).toNumber();
        if (object.totalTime != null)
            message.totalTime = object.totalTime | 0;
        return message;
    };
    TimeRecord.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastSign = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastSign = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastGetPVPResult = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastGetPVPResult = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastWeekRec = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastWeekRec = options.longs === String ? "0" : 0;
            object.totalTime = 0;
        }
        if (message.lastSign != null && message.hasOwnProperty("lastSign"))
            if (typeof message.lastSign === "number")
                object.lastSign = options.longs === String ? String(message.lastSign) : message.lastSign;
            else
                object.lastSign = options.longs === String ? $util.Long.prototype.toString.call(message.lastSign) : options.longs === Number ? new $util.LongBits(message.lastSign.low >>> 0, message.lastSign.high >>> 0).toNumber() : message.lastSign;
        if (message.lastGetPVPResult != null && message.hasOwnProperty("lastGetPVPResult"))
            if (typeof message.lastGetPVPResult === "number")
                object.lastGetPVPResult = options.longs === String ? String(message.lastGetPVPResult) : message.lastGetPVPResult;
            else
                object.lastGetPVPResult = options.longs === String ? $util.Long.prototype.toString.call(message.lastGetPVPResult) : options.longs === Number ? new $util.LongBits(message.lastGetPVPResult.low >>> 0, message.lastGetPVPResult.high >>> 0).toNumber() : message.lastGetPVPResult;
        if (message.lastWeekRec != null && message.hasOwnProperty("lastWeekRec"))
            if (typeof message.lastWeekRec === "number")
                object.lastWeekRec = options.longs === String ? String(message.lastWeekRec) : message.lastWeekRec;
            else
                object.lastWeekRec = options.longs === String ? $util.Long.prototype.toString.call(message.lastWeekRec) : options.longs === Number ? new $util.LongBits(message.lastWeekRec.low >>> 0, message.lastWeekRec.high >>> 0).toNumber() : message.lastWeekRec;
        if (message.totalTime != null && message.hasOwnProperty("totalTime"))
            object.totalTime = message.totalTime;
        return object;
    };
    TimeRecord.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TimeRecord;
})();
$root.NumberRecord = (function() {
    function NumberRecord(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    NumberRecord.prototype.elo = 0;
    NumberRecord.prototype.normWin = 0;
    NumberRecord.prototype.totalSignIn = 0;
    NumberRecord.prototype.weekTotalSign = 0;
    NumberRecord.prototype.weekGoldGet = 0;
    NumberRecord.prototype.weekExpGet = 0;
    NumberRecord.prototype.changeName = 0;
    NumberRecord.create = function create(properties) {
        return new NumberRecord(properties);
    };
    NumberRecord.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.elo != null && message.hasOwnProperty("elo"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elo);
        if (message.normWin != null && message.hasOwnProperty("normWin"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.normWin);
        if (message.totalSignIn != null && message.hasOwnProperty("totalSignIn"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.totalSignIn);
        if (message.weekTotalSign != null && message.hasOwnProperty("weekTotalSign"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.weekTotalSign);
        if (message.weekGoldGet != null && message.hasOwnProperty("weekGoldGet"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.weekGoldGet);
        if (message.weekExpGet != null && message.hasOwnProperty("weekExpGet"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.weekExpGet);
        if (message.changeName != null && message.hasOwnProperty("changeName"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.changeName);
        return writer;
    };
    NumberRecord.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    NumberRecord.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NumberRecord();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.elo = reader.int32();
                break;
            case 2:
                message.normWin = reader.int32();
                break;
            case 3:
                message.totalSignIn = reader.int32();
                break;
            case 4:
                message.weekTotalSign = reader.int32();
                break;
            case 5:
                message.weekGoldGet = reader.int32();
                break;
            case 6:
                message.weekExpGet = reader.int32();
                break;
            case 7:
                message.changeName = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    NumberRecord.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    NumberRecord.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.elo != null && message.hasOwnProperty("elo"))
            if (!$util.isInteger(message.elo))
                return "elo: integer expected";
        if (message.normWin != null && message.hasOwnProperty("normWin"))
            if (!$util.isInteger(message.normWin))
                return "normWin: integer expected";
        if (message.totalSignIn != null && message.hasOwnProperty("totalSignIn"))
            if (!$util.isInteger(message.totalSignIn))
                return "totalSignIn: integer expected";
        if (message.weekTotalSign != null && message.hasOwnProperty("weekTotalSign"))
            if (!$util.isInteger(message.weekTotalSign))
                return "weekTotalSign: integer expected";
        if (message.weekGoldGet != null && message.hasOwnProperty("weekGoldGet"))
            if (!$util.isInteger(message.weekGoldGet))
                return "weekGoldGet: integer expected";
        if (message.weekExpGet != null && message.hasOwnProperty("weekExpGet"))
            if (!$util.isInteger(message.weekExpGet))
                return "weekExpGet: integer expected";
        if (message.changeName != null && message.hasOwnProperty("changeName"))
            if (!$util.isInteger(message.changeName))
                return "changeName: integer expected";
        return null;
    };
    NumberRecord.fromObject = function fromObject(object) {
        if (object instanceof $root.NumberRecord)
            return object;
        var message = new $root.NumberRecord();
        if (object.elo != null)
            message.elo = object.elo | 0;
        if (object.normWin != null)
            message.normWin = object.normWin | 0;
        if (object.totalSignIn != null)
            message.totalSignIn = object.totalSignIn | 0;
        if (object.weekTotalSign != null)
            message.weekTotalSign = object.weekTotalSign | 0;
        if (object.weekGoldGet != null)
            message.weekGoldGet = object.weekGoldGet | 0;
        if (object.weekExpGet != null)
            message.weekExpGet = object.weekExpGet | 0;
        if (object.changeName != null)
            message.changeName = object.changeName | 0;
        return message;
    };
    NumberRecord.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.elo = 0;
            object.normWin = 0;
            object.totalSignIn = 0;
            object.weekTotalSign = 0;
            object.weekGoldGet = 0;
            object.weekExpGet = 0;
            object.changeName = 0;
        }
        if (message.elo != null && message.hasOwnProperty("elo"))
            object.elo = message.elo;
        if (message.normWin != null && message.hasOwnProperty("normWin"))
            object.normWin = message.normWin;
        if (message.totalSignIn != null && message.hasOwnProperty("totalSignIn"))
            object.totalSignIn = message.totalSignIn;
        if (message.weekTotalSign != null && message.hasOwnProperty("weekTotalSign"))
            object.weekTotalSign = message.weekTotalSign;
        if (message.weekGoldGet != null && message.hasOwnProperty("weekGoldGet"))
            object.weekGoldGet = message.weekGoldGet;
        if (message.weekExpGet != null && message.hasOwnProperty("weekExpGet"))
            object.weekExpGet = message.weekExpGet;
        if (message.changeName != null && message.hasOwnProperty("changeName"))
            object.changeName = message.changeName;
        return object;
    };
    NumberRecord.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return NumberRecord;
})();
$root.WXInfo = (function() {
    function WXInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    WXInfo.prototype.avatarUrl = "";
    WXInfo.prototype.city = "";
    WXInfo.prototype.gender = 0;
    WXInfo.prototype.openId = "";
    WXInfo.prototype.language = "";
    WXInfo.prototype.nickName = "";
    WXInfo.prototype.province = "";
    WXInfo.prototype.unionId = "";
    WXInfo.prototype.country = "";
    WXInfo.prototype.sessionId = "";
    WXInfo.prototype.sign = "";
    WXInfo.create = function create(properties) {
        return new WXInfo(properties);
    };
    WXInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.avatarUrl);
        if (message.city != null && message.hasOwnProperty("city"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.city);
        if (message.gender != null && message.hasOwnProperty("gender"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gender);
        if (message.openId != null && message.hasOwnProperty("openId"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.openId);
        if (message.language != null && message.hasOwnProperty("language"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.language);
        if (message.nickName != null && message.hasOwnProperty("nickName"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.nickName);
        if (message.province != null && message.hasOwnProperty("province"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.province);
        if (message.unionId != null && message.hasOwnProperty("unionId"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.unionId);
        if (message.country != null && message.hasOwnProperty("country"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.country);
        if (message.sessionId != null && message.hasOwnProperty("sessionId"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.sessionId);
        if (message.sign != null && message.hasOwnProperty("sign"))
            writer.uint32(/* id 11, wireType 2 =*/90).string(message.sign);
        return writer;
    };
    WXInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    WXInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WXInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.avatarUrl = reader.string();
                break;
            case 2:
                message.city = reader.string();
                break;
            case 3:
                message.gender = reader.int32();
                break;
            case 4:
                message.openId = reader.string();
                break;
            case 5:
                message.language = reader.string();
                break;
            case 6:
                message.nickName = reader.string();
                break;
            case 7:
                message.province = reader.string();
                break;
            case 8:
                message.unionId = reader.string();
                break;
            case 9:
                message.country = reader.string();
                break;
            case 10:
                message.sessionId = reader.string();
                break;
            case 11:
                message.sign = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    WXInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    WXInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
            if (!$util.isString(message.avatarUrl))
                return "avatarUrl: string expected";
        if (message.city != null && message.hasOwnProperty("city"))
            if (!$util.isString(message.city))
                return "city: string expected";
        if (message.gender != null && message.hasOwnProperty("gender"))
            if (!$util.isInteger(message.gender))
                return "gender: integer expected";
        if (message.openId != null && message.hasOwnProperty("openId"))
            if (!$util.isString(message.openId))
                return "openId: string expected";
        if (message.language != null && message.hasOwnProperty("language"))
            if (!$util.isString(message.language))
                return "language: string expected";
        if (message.nickName != null && message.hasOwnProperty("nickName"))
            if (!$util.isString(message.nickName))
                return "nickName: string expected";
        if (message.province != null && message.hasOwnProperty("province"))
            if (!$util.isString(message.province))
                return "province: string expected";
        if (message.unionId != null && message.hasOwnProperty("unionId"))
            if (!$util.isString(message.unionId))
                return "unionId: string expected";
        if (message.country != null && message.hasOwnProperty("country"))
            if (!$util.isString(message.country))
                return "country: string expected";
        if (message.sessionId != null && message.hasOwnProperty("sessionId"))
            if (!$util.isString(message.sessionId))
                return "sessionId: string expected";
        if (message.sign != null && message.hasOwnProperty("sign"))
            if (!$util.isString(message.sign))
                return "sign: string expected";
        return null;
    };
    WXInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.WXInfo)
            return object;
        var message = new $root.WXInfo();
        if (object.avatarUrl != null)
            message.avatarUrl = String(object.avatarUrl);
        if (object.city != null)
            message.city = String(object.city);
        if (object.gender != null)
            message.gender = object.gender | 0;
        if (object.openId != null)
            message.openId = String(object.openId);
        if (object.language != null)
            message.language = String(object.language);
        if (object.nickName != null)
            message.nickName = String(object.nickName);
        if (object.province != null)
            message.province = String(object.province);
        if (object.unionId != null)
            message.unionId = String(object.unionId);
        if (object.country != null)
            message.country = String(object.country);
        if (object.sessionId != null)
            message.sessionId = String(object.sessionId);
        if (object.sign != null)
            message.sign = String(object.sign);
        return message;
    };
    WXInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.avatarUrl = "";
            object.city = "";
            object.gender = 0;
            object.openId = "";
            object.language = "";
            object.nickName = "";
            object.province = "";
            object.unionId = "";
            object.country = "";
            object.sessionId = "";
            object.sign = "";
        }
        if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
            object.avatarUrl = message.avatarUrl;
        if (message.city != null && message.hasOwnProperty("city"))
            object.city = message.city;
        if (message.gender != null && message.hasOwnProperty("gender"))
            object.gender = message.gender;
        if (message.openId != null && message.hasOwnProperty("openId"))
            object.openId = message.openId;
        if (message.language != null && message.hasOwnProperty("language"))
            object.language = message.language;
        if (message.nickName != null && message.hasOwnProperty("nickName"))
            object.nickName = message.nickName;
        if (message.province != null && message.hasOwnProperty("province"))
            object.province = message.province;
        if (message.unionId != null && message.hasOwnProperty("unionId"))
            object.unionId = message.unionId;
        if (message.country != null && message.hasOwnProperty("country"))
            object.country = message.country;
        if (message.sessionId != null && message.hasOwnProperty("sessionId"))
            object.sessionId = message.sessionId;
        if (message.sign != null && message.hasOwnProperty("sign"))
            object.sign = message.sign;
        return object;
    };
    WXInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return WXInfo;
})();
$root.GamerMain = (function() {
    function GamerMain(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerMain.prototype.id = 0;
    GamerMain.prototype.uid = "";
    GamerMain.prototype.lsid = 0;
    GamerMain.prototype.psid = 0;
    GamerMain.prototype.state = 0;
    GamerMain.prototype.name = "";
    GamerMain.prototype.level = 0;
    GamerMain.prototype.session = "";
    GamerMain.prototype.create = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerMain.prototype.lastLogin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerMain.prototype.lastLogout = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerMain.prototype.typeId = 0;
    GamerMain.prototype.icon = 0;
    GamerMain.prototype.diamond = 0;
    GamerMain.prototype.exp = 0;
    GamerMain.prototype.pvpSession = "";
    GamerMain.prototype.avatar = "";
    GamerMain.prototype.energy = 0;
    GamerMain.prototype.isNewbie = false;
    GamerMain.prototype.guildId = 0;
    GamerMain.create = function create(properties) {
        return new GamerMain(properties);
    };
    GamerMain.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.uid);
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.lsid);
        if (message.psid != null && message.hasOwnProperty("psid"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.psid);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.state);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.name);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.level);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.session);
        if (message.create != null && message.hasOwnProperty("create"))
            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.create);
        if (message.lastLogin != null && message.hasOwnProperty("lastLogin"))
            writer.uint32(/* id 10, wireType 0 =*/80).int64(message.lastLogin);
        if (message.lastLogout != null && message.hasOwnProperty("lastLogout"))
            writer.uint32(/* id 11, wireType 0 =*/88).int64(message.lastLogout);
        if (message.typeId != null && message.hasOwnProperty("typeId"))
            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.typeId);
        if (message.icon != null && message.hasOwnProperty("icon"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.icon);
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.diamond);
        if (message.exp != null && message.hasOwnProperty("exp"))
            writer.uint32(/* id 15, wireType 0 =*/120).int32(message.exp);
        if (message.pvpSession != null && message.hasOwnProperty("pvpSession"))
            writer.uint32(/* id 16, wireType 2 =*/130).string(message.pvpSession);
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            writer.uint32(/* id 17, wireType 2 =*/138).string(message.avatar);
        if (message.energy != null && message.hasOwnProperty("energy"))
            writer.uint32(/* id 18, wireType 0 =*/144).int32(message.energy);
        if (message.isNewbie != null && message.hasOwnProperty("isNewbie"))
            writer.uint32(/* id 19, wireType 0 =*/152).bool(message.isNewbie);
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            writer.uint32(/* id 20, wireType 0 =*/160).int32(message.guildId);
        return writer;
    };
    GamerMain.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerMain.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerMain();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.uid = reader.string();
                break;
            case 3:
                message.lsid = reader.int32();
                break;
            case 4:
                message.psid = reader.int32();
                break;
            case 5:
                message.state = reader.int32();
                break;
            case 6:
                message.name = reader.string();
                break;
            case 7:
                message.level = reader.int32();
                break;
            case 8:
                message.session = reader.string();
                break;
            case 9:
                message.create = reader.int64();
                break;
            case 10:
                message.lastLogin = reader.int64();
                break;
            case 11:
                message.lastLogout = reader.int64();
                break;
            case 12:
                message.typeId = reader.int32();
                break;
            case 13:
                message.icon = reader.int32();
                break;
            case 14:
                message.diamond = reader.int32();
                break;
            case 15:
                message.exp = reader.int32();
                break;
            case 16:
                message.pvpSession = reader.string();
                break;
            case 17:
                message.avatar = reader.string();
                break;
            case 18:
                message.energy = reader.int32();
                break;
            case 19:
                message.isNewbie = reader.bool();
                break;
            case 20:
                message.guildId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerMain.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerMain.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isString(message.uid))
                return "uid: string expected";
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            if (!$util.isInteger(message.lsid))
                return "lsid: integer expected";
        if (message.psid != null && message.hasOwnProperty("psid"))
            if (!$util.isInteger(message.psid))
                return "psid: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (!$util.isInteger(message.state))
                return "state: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        if (message.create != null && message.hasOwnProperty("create"))
            if (!$util.isInteger(message.create) && !(message.create && $util.isInteger(message.create.low) && $util.isInteger(message.create.high)))
                return "create: integer|Long expected";
        if (message.lastLogin != null && message.hasOwnProperty("lastLogin"))
            if (!$util.isInteger(message.lastLogin) && !(message.lastLogin && $util.isInteger(message.lastLogin.low) && $util.isInteger(message.lastLogin.high)))
                return "lastLogin: integer|Long expected";
        if (message.lastLogout != null && message.hasOwnProperty("lastLogout"))
            if (!$util.isInteger(message.lastLogout) && !(message.lastLogout && $util.isInteger(message.lastLogout.low) && $util.isInteger(message.lastLogout.high)))
                return "lastLogout: integer|Long expected";
        if (message.typeId != null && message.hasOwnProperty("typeId"))
            if (!$util.isInteger(message.typeId))
                return "typeId: integer expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isInteger(message.icon))
                return "icon: integer expected";
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            if (!$util.isInteger(message.diamond))
                return "diamond: integer expected";
        if (message.exp != null && message.hasOwnProperty("exp"))
            if (!$util.isInteger(message.exp))
                return "exp: integer expected";
        if (message.pvpSession != null && message.hasOwnProperty("pvpSession"))
            if (!$util.isString(message.pvpSession))
                return "pvpSession: string expected";
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            if (!$util.isString(message.avatar))
                return "avatar: string expected";
        if (message.energy != null && message.hasOwnProperty("energy"))
            if (!$util.isInteger(message.energy))
                return "energy: integer expected";
        if (message.isNewbie != null && message.hasOwnProperty("isNewbie"))
            if (typeof message.isNewbie !== "boolean")
                return "isNewbie: boolean expected";
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            if (!$util.isInteger(message.guildId))
                return "guildId: integer expected";
        return null;
    };
    GamerMain.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerMain)
            return object;
        var message = new $root.GamerMain();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.uid != null)
            message.uid = String(object.uid);
        if (object.lsid != null)
            message.lsid = object.lsid | 0;
        if (object.psid != null)
            message.psid = object.psid | 0;
        if (object.state != null)
            message.state = object.state | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.level != null)
            message.level = object.level | 0;
        if (object.session != null)
            message.session = String(object.session);
        if (object.create != null)
            if ($util.Long)
                (message.create = $util.Long.fromValue(object.create)).unsigned = false;
            else if (typeof object.create === "string")
                message.create = parseInt(object.create, 10);
            else if (typeof object.create === "number")
                message.create = object.create;
            else if (typeof object.create === "object")
                message.create = new $util.LongBits(object.create.low >>> 0, object.create.high >>> 0).toNumber();
        if (object.lastLogin != null)
            if ($util.Long)
                (message.lastLogin = $util.Long.fromValue(object.lastLogin)).unsigned = false;
            else if (typeof object.lastLogin === "string")
                message.lastLogin = parseInt(object.lastLogin, 10);
            else if (typeof object.lastLogin === "number")
                message.lastLogin = object.lastLogin;
            else if (typeof object.lastLogin === "object")
                message.lastLogin = new $util.LongBits(object.lastLogin.low >>> 0, object.lastLogin.high >>> 0).toNumber();
        if (object.lastLogout != null)
            if ($util.Long)
                (message.lastLogout = $util.Long.fromValue(object.lastLogout)).unsigned = false;
            else if (typeof object.lastLogout === "string")
                message.lastLogout = parseInt(object.lastLogout, 10);
            else if (typeof object.lastLogout === "number")
                message.lastLogout = object.lastLogout;
            else if (typeof object.lastLogout === "object")
                message.lastLogout = new $util.LongBits(object.lastLogout.low >>> 0, object.lastLogout.high >>> 0).toNumber();
        if (object.typeId != null)
            message.typeId = object.typeId | 0;
        if (object.icon != null)
            message.icon = object.icon | 0;
        if (object.diamond != null)
            message.diamond = object.diamond | 0;
        if (object.exp != null)
            message.exp = object.exp | 0;
        if (object.pvpSession != null)
            message.pvpSession = String(object.pvpSession);
        if (object.avatar != null)
            message.avatar = String(object.avatar);
        if (object.energy != null)
            message.energy = object.energy | 0;
        if (object.isNewbie != null)
            message.isNewbie = Boolean(object.isNewbie);
        if (object.guildId != null)
            message.guildId = object.guildId | 0;
        return message;
    };
    GamerMain.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.uid = "";
            object.lsid = 0;
            object.psid = 0;
            object.state = 0;
            object.name = "";
            object.level = 0;
            object.session = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.create = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.create = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastLogin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastLogin = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastLogout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastLogout = options.longs === String ? "0" : 0;
            object.typeId = 0;
            object.icon = 0;
            object.diamond = 0;
            object.exp = 0;
            object.pvpSession = "";
            object.avatar = "";
            object.energy = 0;
            object.isNewbie = false;
            object.guildId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.uid != null && message.hasOwnProperty("uid"))
            object.uid = message.uid;
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            object.lsid = message.lsid;
        if (message.psid != null && message.hasOwnProperty("psid"))
            object.psid = message.psid;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        if (message.create != null && message.hasOwnProperty("create"))
            if (typeof message.create === "number")
                object.create = options.longs === String ? String(message.create) : message.create;
            else
                object.create = options.longs === String ? $util.Long.prototype.toString.call(message.create) : options.longs === Number ? new $util.LongBits(message.create.low >>> 0, message.create.high >>> 0).toNumber() : message.create;
        if (message.lastLogin != null && message.hasOwnProperty("lastLogin"))
            if (typeof message.lastLogin === "number")
                object.lastLogin = options.longs === String ? String(message.lastLogin) : message.lastLogin;
            else
                object.lastLogin = options.longs === String ? $util.Long.prototype.toString.call(message.lastLogin) : options.longs === Number ? new $util.LongBits(message.lastLogin.low >>> 0, message.lastLogin.high >>> 0).toNumber() : message.lastLogin;
        if (message.lastLogout != null && message.hasOwnProperty("lastLogout"))
            if (typeof message.lastLogout === "number")
                object.lastLogout = options.longs === String ? String(message.lastLogout) : message.lastLogout;
            else
                object.lastLogout = options.longs === String ? $util.Long.prototype.toString.call(message.lastLogout) : options.longs === Number ? new $util.LongBits(message.lastLogout.low >>> 0, message.lastLogout.high >>> 0).toNumber() : message.lastLogout;
        if (message.typeId != null && message.hasOwnProperty("typeId"))
            object.typeId = message.typeId;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            object.diamond = message.diamond;
        if (message.exp != null && message.hasOwnProperty("exp"))
            object.exp = message.exp;
        if (message.pvpSession != null && message.hasOwnProperty("pvpSession"))
            object.pvpSession = message.pvpSession;
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            object.avatar = message.avatar;
        if (message.energy != null && message.hasOwnProperty("energy"))
            object.energy = message.energy;
        if (message.isNewbie != null && message.hasOwnProperty("isNewbie"))
            object.isNewbie = message.isNewbie;
        if (message.guildId != null && message.hasOwnProperty("guildId"))
            object.guildId = message.guildId;
        return object;
    };
    GamerMain.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerMain;
})();
$root.GamerMini = (function() {
    function GamerMini(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerMini.prototype.id = 0;
    GamerMini.prototype.name = "";
    GamerMini.prototype.level = 0;
    GamerMini.prototype.lsid = 0;
    GamerMini.prototype.state = 0;
    GamerMini.prototype.avatar = "";
    GamerMini.prototype.channel = "";
    GamerMini.create = function create(properties) {
        return new GamerMini(properties);
    };
    GamerMini.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.level);
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.lsid);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.state);
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.avatar);
        if (message.channel != null && message.hasOwnProperty("channel"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.channel);
        return writer;
    };
    GamerMini.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerMini.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerMini();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.level = reader.int32();
                break;
            case 4:
                message.lsid = reader.int32();
                break;
            case 5:
                message.state = reader.int32();
                break;
            case 6:
                message.avatar = reader.string();
                break;
            case 7:
                message.channel = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerMini.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerMini.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            if (!$util.isInteger(message.lsid))
                return "lsid: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (!$util.isInteger(message.state))
                return "state: integer expected";
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            if (!$util.isString(message.avatar))
                return "avatar: string expected";
        if (message.channel != null && message.hasOwnProperty("channel"))
            if (!$util.isString(message.channel))
                return "channel: string expected";
        return null;
    };
    GamerMini.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerMini)
            return object;
        var message = new $root.GamerMini();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.level != null)
            message.level = object.level | 0;
        if (object.lsid != null)
            message.lsid = object.lsid | 0;
        if (object.state != null)
            message.state = object.state | 0;
        if (object.avatar != null)
            message.avatar = String(object.avatar);
        if (object.channel != null)
            message.channel = String(object.channel);
        return message;
    };
    GamerMini.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.name = "";
            object.level = 0;
            object.lsid = 0;
            object.state = 0;
            object.avatar = "";
            object.channel = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            object.lsid = message.lsid;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            object.avatar = message.avatar;
        if (message.channel != null && message.hasOwnProperty("channel"))
            object.channel = message.channel;
        return object;
    };
    GamerMini.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerMini;
})();
$root.GamerFriendRequest = (function() {
    function GamerFriendRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerFriendRequest.prototype.id = 0;
    GamerFriendRequest.prototype.msg = "";
    GamerFriendRequest.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerFriendRequest.prototype.gamerInfo = null;
    GamerFriendRequest.create = function create(properties) {
        return new GamerFriendRequest(properties);
    };
    GamerFriendRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.msg);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.time);
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            $root.GamerMini.encode(message.gamerInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    GamerFriendRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerFriendRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerFriendRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.msg = reader.string();
                break;
            case 3:
                message.time = reader.int64();
                break;
            case 5:
                message.gamerInfo = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerFriendRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerFriendRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo")) {
            var error = $root.GamerMini.verify(message.gamerInfo);
            if (error)
                return "gamerInfo." + error;
        }
        return null;
    };
    GamerFriendRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerFriendRequest)
            return object;
        var message = new $root.GamerFriendRequest();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.gamerInfo != null) {
            if (typeof object.gamerInfo !== "object")
                throw TypeError(".GamerFriendRequest.gamerInfo: object expected");
            message.gamerInfo = $root.GamerMini.fromObject(object.gamerInfo);
        }
        return message;
    };
    GamerFriendRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.msg = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.gamerInfo = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            object.gamerInfo = $root.GamerMini.toObject(message.gamerInfo, options);
        return object;
    };
    GamerFriendRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerFriendRequest;
})();
$root.GamerBlack = (function() {
    function GamerBlack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerBlack.prototype.id = 0;
    GamerBlack.create = function create(properties) {
        return new GamerBlack(properties);
    };
    GamerBlack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerBlack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerBlack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerBlack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerBlack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerBlack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerBlack.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerBlack)
            return object;
        var message = new $root.GamerBlack();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerBlack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerBlack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerBlack;
})();
$root.GamerFriend = (function() {
    function GamerFriend(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerFriend.prototype.id = 0;
    GamerFriend.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerFriend.prototype.gamerInfo = null;
    GamerFriend.create = function create(properties) {
        return new GamerFriend(properties);
    };
    GamerFriend.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            $root.GamerMini.encode(message.gamerInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    GamerFriend.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerFriend.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerFriend();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.time = reader.int64();
                break;
            case 5:
                message.gamerInfo = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerFriend.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerFriend.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo")) {
            var error = $root.GamerMini.verify(message.gamerInfo);
            if (error)
                return "gamerInfo." + error;
        }
        return null;
    };
    GamerFriend.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerFriend)
            return object;
        var message = new $root.GamerFriend();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.gamerInfo != null) {
            if (typeof object.gamerInfo !== "object")
                throw TypeError(".GamerFriend.gamerInfo: object expected");
            message.gamerInfo = $root.GamerMini.fromObject(object.gamerInfo);
        }
        return message;
    };
    GamerFriend.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.gamerInfo = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            object.gamerInfo = $root.GamerMini.toObject(message.gamerInfo, options);
        return object;
    };
    GamerFriend.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerFriend;
})();
$root.ChatData = (function() {
    function ChatData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ChatData.prototype.from = 0;
    ChatData.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    ChatData.prototype.msg = "";
    ChatData.prototype.channel = 0;
    ChatData.prototype.gamerInfo = null;
    ChatData.create = function create(properties) {
        return new ChatData(properties);
    };
    ChatData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.from != null && message.hasOwnProperty("from"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.from);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        if (message.channel != null && message.hasOwnProperty("channel"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.channel);
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            $root.GamerMini.encode(message.gamerInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    ChatData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ChatData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ChatData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.from = reader.int32();
                break;
            case 2:
                message.time = reader.int64();
                break;
            case 3:
                message.msg = reader.string();
                break;
            case 4:
                message.channel = reader.int32();
                break;
            case 5:
                message.gamerInfo = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ChatData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ChatData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.from != null && message.hasOwnProperty("from"))
            if (!$util.isInteger(message.from))
                return "from: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        if (message.channel != null && message.hasOwnProperty("channel"))
            switch (message.channel) {
            default:
                return "channel: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo")) {
            var error = $root.GamerMini.verify(message.gamerInfo);
            if (error)
                return "gamerInfo." + error;
        }
        return null;
    };
    ChatData.fromObject = function fromObject(object) {
        if (object instanceof $root.ChatData)
            return object;
        var message = new $root.ChatData();
        if (object.from != null)
            message.from = object.from | 0;
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.msg != null)
            message.msg = String(object.msg);
        switch (object.channel) {
        case "GamerChat":
        case 0:
            message.channel = 0;
            break;
        case "WorldChat":
        case 1:
            message.channel = 1;
            break;
        case "GuildChat":
        case 2:
            message.channel = 2;
            break;
        case "TeamChat":
        case 3:
            message.channel = 3;
            break;
        }
        if (object.gamerInfo != null) {
            if (typeof object.gamerInfo !== "object")
                throw TypeError(".ChatData.gamerInfo: object expected");
            message.gamerInfo = $root.GamerMini.fromObject(object.gamerInfo);
        }
        return message;
    };
    ChatData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.from = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.msg = "";
            object.channel = options.enums === String ? "GamerChat" : 0;
            object.gamerInfo = null;
        }
        if (message.from != null && message.hasOwnProperty("from"))
            object.from = message.from;
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        if (message.channel != null && message.hasOwnProperty("channel"))
            object.channel = options.enums === String ? $root.ChatChannel[message.channel] : message.channel;
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            object.gamerInfo = $root.GamerMini.toObject(message.gamerInfo, options);
        return object;
    };
    ChatData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ChatData;
})();
$root.Mail = (function() {
    function Mail(properties) {
        this.attachments = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Mail.prototype.id = "";
    Mail.prototype.mailType = 0;
    Mail.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Mail.prototype.theme = "";
    Mail.prototype.msg = "";
    Mail.prototype.attachments = $util.emptyArray;
    Mail.prototype.state = 0;
    Mail.prototype.serverId = 0;
    Mail.prototype.senderId = 0;
    Mail.prototype.level = 0;
    Mail.prototype.endTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Mail.prototype.isDel = 0;
    Mail.prototype.cfgId = 0;
    Mail.prototype.save = false;
    Mail.prototype.gamerInfo = null;
    Mail.create = function create(properties) {
        return new Mail(properties);
    };
    Mail.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
        if (message.mailType != null && message.hasOwnProperty("mailType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mailType);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.time);
        if (message.theme != null && message.hasOwnProperty("theme"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.theme);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.msg);
        if (message.attachments != null && message.attachments.length)
            for (var i = 0; i < message.attachments.length; ++i)
                $root.GameItem.encode(message.attachments[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.state);
        if (message.serverId != null && message.hasOwnProperty("serverId"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.serverId);
        if (message.senderId != null && message.hasOwnProperty("senderId"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.senderId);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.level);
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            writer.uint32(/* id 12, wireType 0 =*/96).int64(message.endTime);
        if (message.isDel != null && message.hasOwnProperty("isDel"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.isDel);
        if (message.cfgId != null && message.hasOwnProperty("cfgId"))
            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.cfgId);
        if (message.save != null && message.hasOwnProperty("save"))
            writer.uint32(/* id 15, wireType 0 =*/120).bool(message.save);
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            $root.GamerMini.encode(message.gamerInfo, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
        return writer;
    };
    Mail.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Mail.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Mail();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.string();
                break;
            case 2:
                message.mailType = reader.int32();
                break;
            case 3:
                message.time = reader.int64();
                break;
            case 4:
                message.theme = reader.string();
                break;
            case 5:
                message.msg = reader.string();
                break;
            case 6:
                if (!(message.attachments && message.attachments.length))
                    message.attachments = [];
                message.attachments.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            case 7:
                message.state = reader.int32();
                break;
            case 9:
                message.serverId = reader.int32();
                break;
            case 10:
                message.senderId = reader.int32();
                break;
            case 11:
                message.level = reader.int32();
                break;
            case 12:
                message.endTime = reader.int64();
                break;
            case 13:
                message.isDel = reader.int32();
                break;
            case 14:
                message.cfgId = reader.int32();
                break;
            case 15:
                message.save = reader.bool();
                break;
            case 16:
                message.gamerInfo = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Mail.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Mail.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isString(message.id))
                return "id: string expected";
        if (message.mailType != null && message.hasOwnProperty("mailType"))
            switch (message.mailType) {
            default:
                return "mailType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.theme != null && message.hasOwnProperty("theme"))
            if (!$util.isString(message.theme))
                return "theme: string expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        if (message.attachments != null && message.hasOwnProperty("attachments")) {
            if (!Array.isArray(message.attachments))
                return "attachments: array expected";
            for (var i = 0; i < message.attachments.length; ++i) {
                var error = $root.GameItem.verify(message.attachments[i]);
                if (error)
                    return "attachments." + error;
            }
        }
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.serverId != null && message.hasOwnProperty("serverId"))
            if (!$util.isInteger(message.serverId))
                return "serverId: integer expected";
        if (message.senderId != null && message.hasOwnProperty("senderId"))
            if (!$util.isInteger(message.senderId))
                return "senderId: integer expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))
                return "endTime: integer|Long expected";
        if (message.isDel != null && message.hasOwnProperty("isDel"))
            if (!$util.isInteger(message.isDel))
                return "isDel: integer expected";
        if (message.cfgId != null && message.hasOwnProperty("cfgId"))
            if (!$util.isInteger(message.cfgId))
                return "cfgId: integer expected";
        if (message.save != null && message.hasOwnProperty("save"))
            if (typeof message.save !== "boolean")
                return "save: boolean expected";
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo")) {
            var error = $root.GamerMini.verify(message.gamerInfo);
            if (error)
                return "gamerInfo." + error;
        }
        return null;
    };
    Mail.fromObject = function fromObject(object) {
        if (object instanceof $root.Mail)
            return object;
        var message = new $root.Mail();
        if (object.id != null)
            message.id = String(object.id);
        switch (object.mailType) {
        case "ActivityMail":
        case 0:
            message.mailType = 0;
            break;
        case "SysMail":
        case 1:
            message.mailType = 1;
            break;
        case "AnnouncementMail":
        case 2:
            message.mailType = 2;
            break;
        case "GamerMail":
        case 3:
            message.mailType = 3;
            break;
        }
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.theme != null)
            message.theme = String(object.theme);
        if (object.msg != null)
            message.msg = String(object.msg);
        if (object.attachments) {
            if (!Array.isArray(object.attachments))
                throw TypeError(".Mail.attachments: array expected");
            message.attachments = [];
            for (var i = 0; i < object.attachments.length; ++i) {
                if (typeof object.attachments[i] !== "object")
                    throw TypeError(".Mail.attachments: object expected");
                message.attachments[i] = $root.GameItem.fromObject(object.attachments[i]);
            }
        }
        switch (object.state) {
        case "MailUnRead":
        case 0:
            message.state = 0;
            break;
        case "MailRead":
        case 1:
            message.state = 1;
            break;
        case "MailReceived":
        case 2:
            message.state = 2;
            break;
        }
        if (object.serverId != null)
            message.serverId = object.serverId | 0;
        if (object.senderId != null)
            message.senderId = object.senderId | 0;
        if (object.level != null)
            message.level = object.level | 0;
        if (object.endTime != null)
            if ($util.Long)
                (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = false;
            else if (typeof object.endTime === "string")
                message.endTime = parseInt(object.endTime, 10);
            else if (typeof object.endTime === "number")
                message.endTime = object.endTime;
            else if (typeof object.endTime === "object")
                message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber();
        if (object.isDel != null)
            message.isDel = object.isDel | 0;
        if (object.cfgId != null)
            message.cfgId = object.cfgId | 0;
        if (object.save != null)
            message.save = Boolean(object.save);
        if (object.gamerInfo != null) {
            if (typeof object.gamerInfo !== "object")
                throw TypeError(".Mail.gamerInfo: object expected");
            message.gamerInfo = $root.GamerMini.fromObject(object.gamerInfo);
        }
        return message;
    };
    Mail.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.attachments = [];
        if (options.defaults) {
            object.id = "";
            object.mailType = options.enums === String ? "ActivityMail" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.theme = "";
            object.msg = "";
            object.state = options.enums === String ? "MailUnRead" : 0;
            object.serverId = 0;
            object.senderId = 0;
            object.level = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.endTime = options.longs === String ? "0" : 0;
            object.isDel = 0;
            object.cfgId = 0;
            object.save = false;
            object.gamerInfo = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.mailType != null && message.hasOwnProperty("mailType"))
            object.mailType = options.enums === String ? $root.MailType[message.mailType] : message.mailType;
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.theme != null && message.hasOwnProperty("theme"))
            object.theme = message.theme;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        if (message.attachments && message.attachments.length) {
            object.attachments = [];
            for (var j = 0; j < message.attachments.length; ++j)
                object.attachments[j] = $root.GameItem.toObject(message.attachments[j], options);
        }
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.MailState[message.state] : message.state;
        if (message.serverId != null && message.hasOwnProperty("serverId"))
            object.serverId = message.serverId;
        if (message.senderId != null && message.hasOwnProperty("senderId"))
            object.senderId = message.senderId;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (typeof message.endTime === "number")
                object.endTime = options.longs === String ? String(message.endTime) : message.endTime;
            else
                object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber() : message.endTime;
        if (message.isDel != null && message.hasOwnProperty("isDel"))
            object.isDel = message.isDel;
        if (message.cfgId != null && message.hasOwnProperty("cfgId"))
            object.cfgId = message.cfgId;
        if (message.save != null && message.hasOwnProperty("save"))
            object.save = message.save;
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            object.gamerInfo = $root.GamerMini.toObject(message.gamerInfo, options);
        return object;
    };
    Mail.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Mail;
})();
$root.GamerMatch = (function() {
    function GamerMatch(properties) {
        this.heroList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerMatch.prototype.mini = null;
    GamerMatch.prototype.ai = false;
    GamerMatch.prototype.teamId = 0;
    GamerMatch.prototype.danInfo = null;
    GamerMatch.prototype.heroList = $util.emptyArray;
    GamerMatch.prototype.secretLand = null;
    GamerMatch.prototype.IsHelper = false;
    GamerMatch.create = function create(properties) {
        return new GamerMatch(properties);
    };
    GamerMatch.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.mini != null && message.hasOwnProperty("mini"))
            $root.GamerMini.encode(message.mini, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.ai != null && message.hasOwnProperty("ai"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.ai);
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.teamId);
        if (message.danInfo != null && message.hasOwnProperty("danInfo"))
            $root.DanInfo.encode(message.danInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.heroList != null && message.heroList.length)
            for (var i = 0; i < message.heroList.length; ++i)
                $root.GamerHero.encode(message.heroList[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            $root.GamerSecretLand.encode(message.secretLand, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.IsHelper != null && message.hasOwnProperty("IsHelper"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.IsHelper);
        return writer;
    };
    GamerMatch.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerMatch.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerMatch();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.mini = $root.GamerMini.decode(reader, reader.uint32());
                break;
            case 2:
                message.ai = reader.bool();
                break;
            case 3:
                message.teamId = reader.int32();
                break;
            case 4:
                message.danInfo = $root.DanInfo.decode(reader, reader.uint32());
                break;
            case 5:
                if (!(message.heroList && message.heroList.length))
                    message.heroList = [];
                message.heroList.push($root.GamerHero.decode(reader, reader.uint32()));
                break;
            case 6:
                message.secretLand = $root.GamerSecretLand.decode(reader, reader.uint32());
                break;
            case 7:
                message.IsHelper = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerMatch.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerMatch.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.mini != null && message.hasOwnProperty("mini")) {
            var error = $root.GamerMini.verify(message.mini);
            if (error)
                return "mini." + error;
        }
        if (message.ai != null && message.hasOwnProperty("ai"))
            if (typeof message.ai !== "boolean")
                return "ai: boolean expected";
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            if (!$util.isInteger(message.teamId))
                return "teamId: integer expected";
        if (message.danInfo != null && message.hasOwnProperty("danInfo")) {
            var error = $root.DanInfo.verify(message.danInfo);
            if (error)
                return "danInfo." + error;
        }
        if (message.heroList != null && message.hasOwnProperty("heroList")) {
            if (!Array.isArray(message.heroList))
                return "heroList: array expected";
            for (var i = 0; i < message.heroList.length; ++i) {
                var error = $root.GamerHero.verify(message.heroList[i]);
                if (error)
                    return "heroList." + error;
            }
        }
        if (message.secretLand != null && message.hasOwnProperty("secretLand")) {
            var error = $root.GamerSecretLand.verify(message.secretLand);
            if (error)
                return "secretLand." + error;
        }
        if (message.IsHelper != null && message.hasOwnProperty("IsHelper"))
            if (typeof message.IsHelper !== "boolean")
                return "IsHelper: boolean expected";
        return null;
    };
    GamerMatch.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerMatch)
            return object;
        var message = new $root.GamerMatch();
        if (object.mini != null) {
            if (typeof object.mini !== "object")
                throw TypeError(".GamerMatch.mini: object expected");
            message.mini = $root.GamerMini.fromObject(object.mini);
        }
        if (object.ai != null)
            message.ai = Boolean(object.ai);
        if (object.teamId != null)
            message.teamId = object.teamId | 0;
        if (object.danInfo != null) {
            if (typeof object.danInfo !== "object")
                throw TypeError(".GamerMatch.danInfo: object expected");
            message.danInfo = $root.DanInfo.fromObject(object.danInfo);
        }
        if (object.heroList) {
            if (!Array.isArray(object.heroList))
                throw TypeError(".GamerMatch.heroList: array expected");
            message.heroList = [];
            for (var i = 0; i < object.heroList.length; ++i) {
                if (typeof object.heroList[i] !== "object")
                    throw TypeError(".GamerMatch.heroList: object expected");
                message.heroList[i] = $root.GamerHero.fromObject(object.heroList[i]);
            }
        }
        if (object.secretLand != null) {
            if (typeof object.secretLand !== "object")
                throw TypeError(".GamerMatch.secretLand: object expected");
            message.secretLand = $root.GamerSecretLand.fromObject(object.secretLand);
        }
        if (object.IsHelper != null)
            message.IsHelper = Boolean(object.IsHelper);
        return message;
    };
    GamerMatch.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.heroList = [];
        if (options.defaults) {
            object.mini = null;
            object.ai = false;
            object.teamId = 0;
            object.danInfo = null;
            object.secretLand = null;
            object.IsHelper = false;
        }
        if (message.mini != null && message.hasOwnProperty("mini"))
            object.mini = $root.GamerMini.toObject(message.mini, options);
        if (message.ai != null && message.hasOwnProperty("ai"))
            object.ai = message.ai;
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            object.teamId = message.teamId;
        if (message.danInfo != null && message.hasOwnProperty("danInfo"))
            object.danInfo = $root.DanInfo.toObject(message.danInfo, options);
        if (message.heroList && message.heroList.length) {
            object.heroList = [];
            for (var j = 0; j < message.heroList.length; ++j)
                object.heroList[j] = $root.GamerHero.toObject(message.heroList[j], options);
        }
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            object.secretLand = $root.GamerSecretLand.toObject(message.secretLand, options);
        if (message.IsHelper != null && message.hasOwnProperty("IsHelper"))
            object.IsHelper = message.IsHelper;
        return object;
    };
    GamerMatch.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerMatch;
})();
$root.MatchInfo = (function() {
    function MatchInfo(properties) {
        this.gamers = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    MatchInfo.prototype.session = "";
    MatchInfo.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    MatchInfo.prototype.addr = "";
    MatchInfo.prototype.frameDelta = 0;
    MatchInfo.prototype.minFrameDelta = 0;
    MatchInfo.prototype.matchTime = 0;
    MatchInfo.prototype.inputDelta = 0;
    MatchInfo.prototype.pvpType = 0;
    MatchInfo.prototype.threadRecv = false;
    MatchInfo.prototype.checkPointId = 0;
    MatchInfo.prototype.SingleReliveTimes = 0;
    MatchInfo.prototype.TeamReliveTimes = 0;
    MatchInfo.prototype.LeaderGid = 0;
    MatchInfo.prototype.gamers = $util.emptyArray;
    MatchInfo.create = function create(properties) {
        return new MatchInfo(properties);
    };
    MatchInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
        if (message.addr != null && message.hasOwnProperty("addr"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.addr);
        if (message.frameDelta != null && message.hasOwnProperty("frameDelta"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.frameDelta);
        if (message.minFrameDelta != null && message.hasOwnProperty("minFrameDelta"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.minFrameDelta);
        if (message.matchTime != null && message.hasOwnProperty("matchTime"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.matchTime);
        if (message.inputDelta != null && message.hasOwnProperty("inputDelta"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.inputDelta);
        if (message.pvpType != null && message.hasOwnProperty("pvpType"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.pvpType);
        if (message.threadRecv != null && message.hasOwnProperty("threadRecv"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.threadRecv);
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.checkPointId);
        if (message.SingleReliveTimes != null && message.hasOwnProperty("SingleReliveTimes"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.SingleReliveTimes);
        if (message.TeamReliveTimes != null && message.hasOwnProperty("TeamReliveTimes"))
            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.TeamReliveTimes);
        if (message.LeaderGid != null && message.hasOwnProperty("LeaderGid"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.LeaderGid);
        if (message.gamers != null && message.gamers.length)
            for (var i = 0; i < message.gamers.length; ++i)
                $root.GamerMatch.encode(message.gamers[i], writer.uint32(/* id 100, wireType 2 =*/802).fork()).ldelim();
        return writer;
    };
    MatchInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    MatchInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MatchInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.session = reader.string();
                break;
            case 2:
                message.time = reader.int64();
                break;
            case 3:
                message.addr = reader.string();
                break;
            case 4:
                message.frameDelta = reader.int32();
                break;
            case 5:
                message.minFrameDelta = reader.int32();
                break;
            case 6:
                message.matchTime = reader.int32();
                break;
            case 7:
                message.inputDelta = reader.int32();
                break;
            case 8:
                message.pvpType = reader.int32();
                break;
            case 9:
                message.threadRecv = reader.bool();
                break;
            case 10:
                message.checkPointId = reader.int32();
                break;
            case 11:
                message.SingleReliveTimes = reader.int32();
                break;
            case 12:
                message.TeamReliveTimes = reader.int32();
                break;
            case 13:
                message.LeaderGid = reader.int32();
                break;
            case 100:
                if (!(message.gamers && message.gamers.length))
                    message.gamers = [];
                message.gamers.push($root.GamerMatch.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    MatchInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    MatchInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.addr != null && message.hasOwnProperty("addr"))
            if (!$util.isString(message.addr))
                return "addr: string expected";
        if (message.frameDelta != null && message.hasOwnProperty("frameDelta"))
            if (!$util.isInteger(message.frameDelta))
                return "frameDelta: integer expected";
        if (message.minFrameDelta != null && message.hasOwnProperty("minFrameDelta"))
            if (!$util.isInteger(message.minFrameDelta))
                return "minFrameDelta: integer expected";
        if (message.matchTime != null && message.hasOwnProperty("matchTime"))
            if (!$util.isInteger(message.matchTime))
                return "matchTime: integer expected";
        if (message.inputDelta != null && message.hasOwnProperty("inputDelta"))
            if (!$util.isInteger(message.inputDelta))
                return "inputDelta: integer expected";
        if (message.pvpType != null && message.hasOwnProperty("pvpType"))
            switch (message.pvpType) {
            default:
                return "pvpType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
                break;
            }
        if (message.threadRecv != null && message.hasOwnProperty("threadRecv"))
            if (typeof message.threadRecv !== "boolean")
                return "threadRecv: boolean expected";
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            if (!$util.isInteger(message.checkPointId))
                return "checkPointId: integer expected";
        if (message.SingleReliveTimes != null && message.hasOwnProperty("SingleReliveTimes"))
            if (!$util.isInteger(message.SingleReliveTimes))
                return "SingleReliveTimes: integer expected";
        if (message.TeamReliveTimes != null && message.hasOwnProperty("TeamReliveTimes"))
            if (!$util.isInteger(message.TeamReliveTimes))
                return "TeamReliveTimes: integer expected";
        if (message.LeaderGid != null && message.hasOwnProperty("LeaderGid"))
            if (!$util.isInteger(message.LeaderGid))
                return "LeaderGid: integer expected";
        if (message.gamers != null && message.hasOwnProperty("gamers")) {
            if (!Array.isArray(message.gamers))
                return "gamers: array expected";
            for (var i = 0; i < message.gamers.length; ++i) {
                var error = $root.GamerMatch.verify(message.gamers[i]);
                if (error)
                    return "gamers." + error;
            }
        }
        return null;
    };
    MatchInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.MatchInfo)
            return object;
        var message = new $root.MatchInfo();
        if (object.session != null)
            message.session = String(object.session);
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.addr != null)
            message.addr = String(object.addr);
        if (object.frameDelta != null)
            message.frameDelta = object.frameDelta | 0;
        if (object.minFrameDelta != null)
            message.minFrameDelta = object.minFrameDelta | 0;
        if (object.matchTime != null)
            message.matchTime = object.matchTime | 0;
        if (object.inputDelta != null)
            message.inputDelta = object.inputDelta | 0;
        switch (object.pvpType) {
        case "MINVALID":
        case 0:
            message.pvpType = 0;
            break;
        case "PVE_M1":
        case 1:
            message.pvpType = 1;
            break;
        case "PVE_M2":
        case 2:
            message.pvpType = 2;
            break;
        case "PVE_M3":
        case 3:
            message.pvpType = 3;
            break;
        case "PVE_M4":
        case 4:
            message.pvpType = 4;
            break;
        case "PVP_M1V1":
        case 100:
            message.pvpType = 100;
            break;
        case "PVP_M2V2":
        case 101:
            message.pvpType = 101;
            break;
        case "PVP_M3V3":
        case 102:
            message.pvpType = 102;
            break;
        case "PVP_M4V4":
        case 103:
            message.pvpType = 103;
            break;
        case "PVP_M5V5":
        case 104:
            message.pvpType = 104;
            break;
        }
        if (object.threadRecv != null)
            message.threadRecv = Boolean(object.threadRecv);
        if (object.checkPointId != null)
            message.checkPointId = object.checkPointId | 0;
        if (object.SingleReliveTimes != null)
            message.SingleReliveTimes = object.SingleReliveTimes | 0;
        if (object.TeamReliveTimes != null)
            message.TeamReliveTimes = object.TeamReliveTimes | 0;
        if (object.LeaderGid != null)
            message.LeaderGid = object.LeaderGid | 0;
        if (object.gamers) {
            if (!Array.isArray(object.gamers))
                throw TypeError(".MatchInfo.gamers: array expected");
            message.gamers = [];
            for (var i = 0; i < object.gamers.length; ++i) {
                if (typeof object.gamers[i] !== "object")
                    throw TypeError(".MatchInfo.gamers: object expected");
                message.gamers[i] = $root.GamerMatch.fromObject(object.gamers[i]);
            }
        }
        return message;
    };
    MatchInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.gamers = [];
        if (options.defaults) {
            object.session = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.addr = "";
            object.frameDelta = 0;
            object.minFrameDelta = 0;
            object.matchTime = 0;
            object.inputDelta = 0;
            object.pvpType = options.enums === String ? "MINVALID" : 0;
            object.threadRecv = false;
            object.checkPointId = 0;
            object.SingleReliveTimes = 0;
            object.TeamReliveTimes = 0;
            object.LeaderGid = 0;
        }
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.addr != null && message.hasOwnProperty("addr"))
            object.addr = message.addr;
        if (message.frameDelta != null && message.hasOwnProperty("frameDelta"))
            object.frameDelta = message.frameDelta;
        if (message.minFrameDelta != null && message.hasOwnProperty("minFrameDelta"))
            object.minFrameDelta = message.minFrameDelta;
        if (message.matchTime != null && message.hasOwnProperty("matchTime"))
            object.matchTime = message.matchTime;
        if (message.inputDelta != null && message.hasOwnProperty("inputDelta"))
            object.inputDelta = message.inputDelta;
        if (message.pvpType != null && message.hasOwnProperty("pvpType"))
            object.pvpType = options.enums === String ? $root.PVPType[message.pvpType] : message.pvpType;
        if (message.threadRecv != null && message.hasOwnProperty("threadRecv"))
            object.threadRecv = message.threadRecv;
        if (message.checkPointId != null && message.hasOwnProperty("checkPointId"))
            object.checkPointId = message.checkPointId;
        if (message.SingleReliveTimes != null && message.hasOwnProperty("SingleReliveTimes"))
            object.SingleReliveTimes = message.SingleReliveTimes;
        if (message.TeamReliveTimes != null && message.hasOwnProperty("TeamReliveTimes"))
            object.TeamReliveTimes = message.TeamReliveTimes;
        if (message.LeaderGid != null && message.hasOwnProperty("LeaderGid"))
            object.LeaderGid = message.LeaderGid;
        if (message.gamers && message.gamers.length) {
            object.gamers = [];
            for (var j = 0; j < message.gamers.length; ++j)
                object.gamers[j] = $root.GamerMatch.toObject(message.gamers[j], options);
        }
        return object;
    };
    MatchInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return MatchInfo;
})();
$root.PVPLoading = (function() {
    function PVPLoading(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PVPLoading.prototype.id = 0;
    PVPLoading.prototype.per = 0;
    PVPLoading.create = function create(properties) {
        return new PVPLoading(properties);
    };
    PVPLoading.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.per != null && message.hasOwnProperty("per"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.per);
        return writer;
    };
    PVPLoading.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PVPLoading.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PVPLoading();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.per = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PVPLoading.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PVPLoading.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.per != null && message.hasOwnProperty("per"))
            if (!$util.isInteger(message.per))
                return "per: integer expected";
        return null;
    };
    PVPLoading.fromObject = function fromObject(object) {
        if (object instanceof $root.PVPLoading)
            return object;
        var message = new $root.PVPLoading();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.per != null)
            message.per = object.per | 0;
        return message;
    };
    PVPLoading.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.per = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.per != null && message.hasOwnProperty("per"))
            object.per = message.per;
        return object;
    };
    PVPLoading.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PVPLoading;
})();
$root.PVPInput = (function() {
    function PVPInput(properties) {
        this.cmdParamList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PVPInput.prototype.id = 0;
    PVPInput.prototype.yaw = 0;
    PVPInput.prototype.btn = 0;
    PVPInput.prototype.pos = 0;
    PVPInput.prototype.talk = 0;
    PVPInput.prototype.frame = 0;
    PVPInput.prototype.x = 0;
    PVPInput.prototype.y = 0;
    PVPInput.prototype.cmd = 0;
    PVPInput.prototype.cmdParamList = $util.emptyArray;
    PVPInput.create = function create(properties) {
        return new PVPInput(properties);
    };
    PVPInput.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.yaw != null && message.hasOwnProperty("yaw"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.yaw);
        if (message.btn != null && message.hasOwnProperty("btn"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.btn);
        if (message.pos != null && message.hasOwnProperty("pos"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pos);
        if (message.talk != null && message.hasOwnProperty("talk"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.talk);
        if (message.frame != null && message.hasOwnProperty("frame"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.frame);
        if (message.x != null && message.hasOwnProperty("x"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.x);
        if (message.y != null && message.hasOwnProperty("y"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.y);
        if (message.cmd != null && message.hasOwnProperty("cmd"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.cmd);
        if (message.cmdParamList != null && message.cmdParamList.length) {
            writer.uint32(/* id 10, wireType 2 =*/82).fork();
            for (var i = 0; i < message.cmdParamList.length; ++i)
                writer.int32(message.cmdParamList[i]);
            writer.ldelim();
        }
        return writer;
    };
    PVPInput.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PVPInput.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PVPInput();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.yaw = reader.int32();
                break;
            case 3:
                message.btn = reader.int32();
                break;
            case 4:
                message.pos = reader.int32();
                break;
            case 5:
                message.talk = reader.int32();
                break;
            case 6:
                message.frame = reader.int32();
                break;
            case 7:
                message.x = reader.int32();
                break;
            case 8:
                message.y = reader.int32();
                break;
            case 9:
                message.cmd = reader.int32();
                break;
            case 10:
                if (!(message.cmdParamList && message.cmdParamList.length))
                    message.cmdParamList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cmdParamList.push(reader.int32());
                } else
                    message.cmdParamList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PVPInput.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PVPInput.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.yaw != null && message.hasOwnProperty("yaw"))
            if (!$util.isInteger(message.yaw))
                return "yaw: integer expected";
        if (message.btn != null && message.hasOwnProperty("btn"))
            if (!$util.isInteger(message.btn))
                return "btn: integer expected";
        if (message.pos != null && message.hasOwnProperty("pos"))
            if (!$util.isInteger(message.pos))
                return "pos: integer expected";
        if (message.talk != null && message.hasOwnProperty("talk"))
            if (!$util.isInteger(message.talk))
                return "talk: integer expected";
        if (message.frame != null && message.hasOwnProperty("frame"))
            if (!$util.isInteger(message.frame))
                return "frame: integer expected";
        if (message.x != null && message.hasOwnProperty("x"))
            if (!$util.isInteger(message.x))
                return "x: integer expected";
        if (message.y != null && message.hasOwnProperty("y"))
            if (!$util.isInteger(message.y))
                return "y: integer expected";
        if (message.cmd != null && message.hasOwnProperty("cmd"))
            if (!$util.isInteger(message.cmd))
                return "cmd: integer expected";
        if (message.cmdParamList != null && message.hasOwnProperty("cmdParamList")) {
            if (!Array.isArray(message.cmdParamList))
                return "cmdParamList: array expected";
            for (var i = 0; i < message.cmdParamList.length; ++i)
                if (!$util.isInteger(message.cmdParamList[i]))
                    return "cmdParamList: integer[] expected";
        }
        return null;
    };
    PVPInput.fromObject = function fromObject(object) {
        if (object instanceof $root.PVPInput)
            return object;
        var message = new $root.PVPInput();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.yaw != null)
            message.yaw = object.yaw | 0;
        if (object.btn != null)
            message.btn = object.btn | 0;
        if (object.pos != null)
            message.pos = object.pos | 0;
        if (object.talk != null)
            message.talk = object.talk | 0;
        if (object.frame != null)
            message.frame = object.frame | 0;
        if (object.x != null)
            message.x = object.x | 0;
        if (object.y != null)
            message.y = object.y | 0;
        if (object.cmd != null)
            message.cmd = object.cmd | 0;
        if (object.cmdParamList) {
            if (!Array.isArray(object.cmdParamList))
                throw TypeError(".PVPInput.cmdParamList: array expected");
            message.cmdParamList = [];
            for (var i = 0; i < object.cmdParamList.length; ++i)
                message.cmdParamList[i] = object.cmdParamList[i] | 0;
        }
        return message;
    };
    PVPInput.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.cmdParamList = [];
        if (options.defaults) {
            object.id = 0;
            object.yaw = 0;
            object.btn = 0;
            object.pos = 0;
            object.talk = 0;
            object.frame = 0;
            object.x = 0;
            object.y = 0;
            object.cmd = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.yaw != null && message.hasOwnProperty("yaw"))
            object.yaw = message.yaw;
        if (message.btn != null && message.hasOwnProperty("btn"))
            object.btn = message.btn;
        if (message.pos != null && message.hasOwnProperty("pos"))
            object.pos = message.pos;
        if (message.talk != null && message.hasOwnProperty("talk"))
            object.talk = message.talk;
        if (message.frame != null && message.hasOwnProperty("frame"))
            object.frame = message.frame;
        if (message.x != null && message.hasOwnProperty("x"))
            object.x = message.x;
        if (message.y != null && message.hasOwnProperty("y"))
            object.y = message.y;
        if (message.cmd != null && message.hasOwnProperty("cmd"))
            object.cmd = message.cmd;
        if (message.cmdParamList && message.cmdParamList.length) {
            object.cmdParamList = [];
            for (var j = 0; j < message.cmdParamList.length; ++j)
                object.cmdParamList[j] = message.cmdParamList[j];
        }
        return object;
    };
    PVPInput.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PVPInput;
})();
$root.PVPFrame = (function() {
    function PVPFrame(properties) {
        this.inputs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PVPFrame.prototype.delta = 0;
    PVPFrame.prototype.frame = 0;
    PVPFrame.prototype.end = false;
    PVPFrame.prototype.inputs = $util.emptyArray;
    PVPFrame.create = function create(properties) {
        return new PVPFrame(properties);
    };
    PVPFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.delta != null && message.hasOwnProperty("delta"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.delta);
        if (message.frame != null && message.hasOwnProperty("frame"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.frame);
        if (message.end != null && message.hasOwnProperty("end"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.end);
        if (message.inputs != null && message.inputs.length)
            for (var i = 0; i < message.inputs.length; ++i)
                $root.PVPInput.encode(message.inputs[i], writer.uint32(/* id 100, wireType 2 =*/802).fork()).ldelim();
        return writer;
    };
    PVPFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PVPFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PVPFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.delta = reader.int32();
                break;
            case 2:
                message.frame = reader.int32();
                break;
            case 3:
                message.end = reader.bool();
                break;
            case 100:
                if (!(message.inputs && message.inputs.length))
                    message.inputs = [];
                message.inputs.push($root.PVPInput.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PVPFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PVPFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.delta != null && message.hasOwnProperty("delta"))
            if (!$util.isInteger(message.delta))
                return "delta: integer expected";
        if (message.frame != null && message.hasOwnProperty("frame"))
            if (!$util.isInteger(message.frame))
                return "frame: integer expected";
        if (message.end != null && message.hasOwnProperty("end"))
            if (typeof message.end !== "boolean")
                return "end: boolean expected";
        if (message.inputs != null && message.hasOwnProperty("inputs")) {
            if (!Array.isArray(message.inputs))
                return "inputs: array expected";
            for (var i = 0; i < message.inputs.length; ++i) {
                var error = $root.PVPInput.verify(message.inputs[i]);
                if (error)
                    return "inputs." + error;
            }
        }
        return null;
    };
    PVPFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.PVPFrame)
            return object;
        var message = new $root.PVPFrame();
        if (object.delta != null)
            message.delta = object.delta | 0;
        if (object.frame != null)
            message.frame = object.frame | 0;
        if (object.end != null)
            message.end = Boolean(object.end);
        if (object.inputs) {
            if (!Array.isArray(object.inputs))
                throw TypeError(".PVPFrame.inputs: array expected");
            message.inputs = [];
            for (var i = 0; i < object.inputs.length; ++i) {
                if (typeof object.inputs[i] !== "object")
                    throw TypeError(".PVPFrame.inputs: object expected");
                message.inputs[i] = $root.PVPInput.fromObject(object.inputs[i]);
            }
        }
        return message;
    };
    PVPFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.inputs = [];
        if (options.defaults) {
            object.delta = 0;
            object.frame = 0;
            object.end = false;
        }
        if (message.delta != null && message.hasOwnProperty("delta"))
            object.delta = message.delta;
        if (message.frame != null && message.hasOwnProperty("frame"))
            object.frame = message.frame;
        if (message.end != null && message.hasOwnProperty("end"))
            object.end = message.end;
        if (message.inputs && message.inputs.length) {
            object.inputs = [];
            for (var j = 0; j < message.inputs.length; ++j)
                object.inputs[j] = $root.PVPInput.toObject(message.inputs[j], options);
        }
        return object;
    };
    PVPFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PVPFrame;
})();
$root.PVPFrames = (function() {
    function PVPFrames(properties) {
        this.frames = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PVPFrames.prototype.frames = $util.emptyArray;
    PVPFrames.create = function create(properties) {
        return new PVPFrames(properties);
    };
    PVPFrames.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.frames != null && message.frames.length)
            for (var i = 0; i < message.frames.length; ++i)
                $root.PVPFrame.encode(message.frames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };
    PVPFrames.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PVPFrames.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PVPFrames();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.frames && message.frames.length))
                    message.frames = [];
                message.frames.push($root.PVPFrame.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PVPFrames.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PVPFrames.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.frames != null && message.hasOwnProperty("frames")) {
            if (!Array.isArray(message.frames))
                return "frames: array expected";
            for (var i = 0; i < message.frames.length; ++i) {
                var error = $root.PVPFrame.verify(message.frames[i]);
                if (error)
                    return "frames." + error;
            }
        }
        return null;
    };
    PVPFrames.fromObject = function fromObject(object) {
        if (object instanceof $root.PVPFrames)
            return object;
        var message = new $root.PVPFrames();
        if (object.frames) {
            if (!Array.isArray(object.frames))
                throw TypeError(".PVPFrames.frames: array expected");
            message.frames = [];
            for (var i = 0; i < object.frames.length; ++i) {
                if (typeof object.frames[i] !== "object")
                    throw TypeError(".PVPFrames.frames: object expected");
                message.frames[i] = $root.PVPFrame.fromObject(object.frames[i]);
            }
        }
        return message;
    };
    PVPFrames.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.frames = [];
        if (message.frames && message.frames.length) {
            object.frames = [];
            for (var j = 0; j < message.frames.length; ++j)
                object.frames[j] = $root.PVPFrame.toObject(message.frames[j], options);
        }
        return object;
    };
    PVPFrames.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PVPFrames;
})();
$root.HeroStatus = (function() {
    function HeroStatus(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    HeroStatus.prototype.id = 0;
    HeroStatus.prototype.maxHp = 0;
    HeroStatus.prototype.remainHp = 0;
    HeroStatus.create = function create(properties) {
        return new HeroStatus(properties);
    };
    HeroStatus.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.maxHp != null && message.hasOwnProperty("maxHp"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.maxHp);
        if (message.remainHp != null && message.hasOwnProperty("remainHp"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.remainHp);
        return writer;
    };
    HeroStatus.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    HeroStatus.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HeroStatus();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.maxHp = reader.int32();
                break;
            case 3:
                message.remainHp = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    HeroStatus.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    HeroStatus.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.maxHp != null && message.hasOwnProperty("maxHp"))
            if (!$util.isInteger(message.maxHp))
                return "maxHp: integer expected";
        if (message.remainHp != null && message.hasOwnProperty("remainHp"))
            if (!$util.isInteger(message.remainHp))
                return "remainHp: integer expected";
        return null;
    };
    HeroStatus.fromObject = function fromObject(object) {
        if (object instanceof $root.HeroStatus)
            return object;
        var message = new $root.HeroStatus();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.maxHp != null)
            message.maxHp = object.maxHp | 0;
        if (object.remainHp != null)
            message.remainHp = object.remainHp | 0;
        return message;
    };
    HeroStatus.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.maxHp = 0;
            object.remainHp = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.maxHp != null && message.hasOwnProperty("maxHp"))
            object.maxHp = message.maxHp;
        if (message.remainHp != null && message.hasOwnProperty("remainHp"))
            object.remainHp = message.remainHp;
        return object;
    };
    HeroStatus.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HeroStatus;
})();
$root.GamerResult = (function() {
    function GamerResult(properties) {
        this.heroList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerResult.prototype.id = 0;
    GamerResult.prototype.battleResult = 0;
    GamerResult.prototype.heroList = $util.emptyArray;
    GamerResult.prototype.kill = 0;
    GamerResult.prototype.maxComboNum = 0;
    GamerResult.prototype.starNum = 0;
    GamerResult.prototype.reliveTimes = 0;
    GamerResult.prototype.offlineTime = 0;
    GamerResult.create = function create(properties) {
        return new GamerResult(properties);
    };
    GamerResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.battleResult != null && message.hasOwnProperty("battleResult"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.battleResult);
        if (message.heroList != null && message.heroList.length)
            for (var i = 0; i < message.heroList.length; ++i)
                $root.HeroStatus.encode(message.heroList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.kill != null && message.hasOwnProperty("kill"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.kill);
        if (message.maxComboNum != null && message.hasOwnProperty("maxComboNum"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.maxComboNum);
        if (message.starNum != null && message.hasOwnProperty("starNum"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.starNum);
        if (message.reliveTimes != null && message.hasOwnProperty("reliveTimes"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.reliveTimes);
        if (message.offlineTime != null && message.hasOwnProperty("offlineTime"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.offlineTime);
        return writer;
    };
    GamerResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.battleResult = reader.int32();
                break;
            case 3:
                if (!(message.heroList && message.heroList.length))
                    message.heroList = [];
                message.heroList.push($root.HeroStatus.decode(reader, reader.uint32()));
                break;
            case 4:
                message.kill = reader.int32();
                break;
            case 5:
                message.maxComboNum = reader.int32();
                break;
            case 6:
                message.starNum = reader.int32();
                break;
            case 7:
                message.reliveTimes = reader.int32();
                break;
            case 8:
                message.offlineTime = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.battleResult != null && message.hasOwnProperty("battleResult"))
            switch (message.battleResult) {
            default:
                return "battleResult: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        if (message.heroList != null && message.hasOwnProperty("heroList")) {
            if (!Array.isArray(message.heroList))
                return "heroList: array expected";
            for (var i = 0; i < message.heroList.length; ++i) {
                var error = $root.HeroStatus.verify(message.heroList[i]);
                if (error)
                    return "heroList." + error;
            }
        }
        if (message.kill != null && message.hasOwnProperty("kill"))
            if (!$util.isInteger(message.kill))
                return "kill: integer expected";
        if (message.maxComboNum != null && message.hasOwnProperty("maxComboNum"))
            if (!$util.isInteger(message.maxComboNum))
                return "maxComboNum: integer expected";
        if (message.starNum != null && message.hasOwnProperty("starNum"))
            if (!$util.isInteger(message.starNum))
                return "starNum: integer expected";
        if (message.reliveTimes != null && message.hasOwnProperty("reliveTimes"))
            if (!$util.isInteger(message.reliveTimes))
                return "reliveTimes: integer expected";
        if (message.offlineTime != null && message.hasOwnProperty("offlineTime"))
            if (!$util.isInteger(message.offlineTime))
                return "offlineTime: integer expected";
        return null;
    };
    GamerResult.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerResult)
            return object;
        var message = new $root.GamerResult();
        if (object.id != null)
            message.id = object.id | 0;
        switch (object.battleResult) {
        case "Invalid":
        case 0:
            message.battleResult = 0;
            break;
        case "TotalWin":
        case 1:
            message.battleResult = 1;
            break;
        case "NarrowlyWin":
        case 2:
            message.battleResult = 2;
            break;
        case "Draw":
        case 3:
            message.battleResult = 3;
            break;
        case "NarrowlyLoss":
        case 4:
            message.battleResult = 4;
            break;
        case "TotalLoss":
        case 5:
            message.battleResult = 5;
            break;
        case "Exit":
        case 6:
            message.battleResult = 6;
            break;
        }
        if (object.heroList) {
            if (!Array.isArray(object.heroList))
                throw TypeError(".GamerResult.heroList: array expected");
            message.heroList = [];
            for (var i = 0; i < object.heroList.length; ++i) {
                if (typeof object.heroList[i] !== "object")
                    throw TypeError(".GamerResult.heroList: object expected");
                message.heroList[i] = $root.HeroStatus.fromObject(object.heroList[i]);
            }
        }
        if (object.kill != null)
            message.kill = object.kill | 0;
        if (object.maxComboNum != null)
            message.maxComboNum = object.maxComboNum | 0;
        if (object.starNum != null)
            message.starNum = object.starNum | 0;
        if (object.reliveTimes != null)
            message.reliveTimes = object.reliveTimes | 0;
        if (object.offlineTime != null)
            message.offlineTime = object.offlineTime | 0;
        return message;
    };
    GamerResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.heroList = [];
        if (options.defaults) {
            object.id = 0;
            object.battleResult = options.enums === String ? "Invalid" : 0;
            object.kill = 0;
            object.maxComboNum = 0;
            object.starNum = 0;
            object.reliveTimes = 0;
            object.offlineTime = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.battleResult != null && message.hasOwnProperty("battleResult"))
            object.battleResult = options.enums === String ? $root.BattleResultType[message.battleResult] : message.battleResult;
        if (message.heroList && message.heroList.length) {
            object.heroList = [];
            for (var j = 0; j < message.heroList.length; ++j)
                object.heroList[j] = $root.HeroStatus.toObject(message.heroList[j], options);
        }
        if (message.kill != null && message.hasOwnProperty("kill"))
            object.kill = message.kill;
        if (message.maxComboNum != null && message.hasOwnProperty("maxComboNum"))
            object.maxComboNum = message.maxComboNum;
        if (message.starNum != null && message.hasOwnProperty("starNum"))
            object.starNum = message.starNum;
        if (message.reliveTimes != null && message.hasOwnProperty("reliveTimes"))
            object.reliveTimes = message.reliveTimes;
        if (message.offlineTime != null && message.hasOwnProperty("offlineTime"))
            object.offlineTime = message.offlineTime;
        return object;
    };
    GamerResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerResult;
})();
$root.PVPResult = (function() {
    function PVPResult(properties) {
        this.gameResultList = [];
        this.frames = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PVPResult.prototype.gameResultList = $util.emptyArray;
    PVPResult.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    PVPResult.prototype.matchInfo = null;
    PVPResult.prototype.frames = $util.emptyArray;
    PVPResult.prototype.md5 = "";
    PVPResult.create = function create(properties) {
        return new PVPResult(properties);
    };
    PVPResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gameResultList != null && message.gameResultList.length)
            for (var i = 0; i < message.gameResultList.length; ++i)
                $root.GamerResult.encode(message.gameResultList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            $root.MatchInfo.encode(message.matchInfo, writer.uint32(/* id 101, wireType 2 =*/810).fork()).ldelim();
        if (message.frames != null && message.frames.length)
            for (var i = 0; i < message.frames.length; ++i)
                $root.PVPFrame.encode(message.frames[i], writer.uint32(/* id 102, wireType 2 =*/818).fork()).ldelim();
        if (message.md5 != null && message.hasOwnProperty("md5"))
            writer.uint32(/* id 103, wireType 2 =*/826).string(message.md5);
        return writer;
    };
    PVPResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PVPResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PVPResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.gameResultList && message.gameResultList.length))
                    message.gameResultList = [];
                message.gameResultList.push($root.GamerResult.decode(reader, reader.uint32()));
                break;
            case 2:
                message.time = reader.int64();
                break;
            case 101:
                message.matchInfo = $root.MatchInfo.decode(reader, reader.uint32());
                break;
            case 102:
                if (!(message.frames && message.frames.length))
                    message.frames = [];
                message.frames.push($root.PVPFrame.decode(reader, reader.uint32()));
                break;
            case 103:
                message.md5 = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PVPResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PVPResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gameResultList != null && message.hasOwnProperty("gameResultList")) {
            if (!Array.isArray(message.gameResultList))
                return "gameResultList: array expected";
            for (var i = 0; i < message.gameResultList.length; ++i) {
                var error = $root.GamerResult.verify(message.gameResultList[i]);
                if (error)
                    return "gameResultList." + error;
            }
        }
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo")) {
            var error = $root.MatchInfo.verify(message.matchInfo);
            if (error)
                return "matchInfo." + error;
        }
        if (message.frames != null && message.hasOwnProperty("frames")) {
            if (!Array.isArray(message.frames))
                return "frames: array expected";
            for (var i = 0; i < message.frames.length; ++i) {
                var error = $root.PVPFrame.verify(message.frames[i]);
                if (error)
                    return "frames." + error;
            }
        }
        if (message.md5 != null && message.hasOwnProperty("md5"))
            if (!$util.isString(message.md5))
                return "md5: string expected";
        return null;
    };
    PVPResult.fromObject = function fromObject(object) {
        if (object instanceof $root.PVPResult)
            return object;
        var message = new $root.PVPResult();
        if (object.gameResultList) {
            if (!Array.isArray(object.gameResultList))
                throw TypeError(".PVPResult.gameResultList: array expected");
            message.gameResultList = [];
            for (var i = 0; i < object.gameResultList.length; ++i) {
                if (typeof object.gameResultList[i] !== "object")
                    throw TypeError(".PVPResult.gameResultList: object expected");
                message.gameResultList[i] = $root.GamerResult.fromObject(object.gameResultList[i]);
            }
        }
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.matchInfo != null) {
            if (typeof object.matchInfo !== "object")
                throw TypeError(".PVPResult.matchInfo: object expected");
            message.matchInfo = $root.MatchInfo.fromObject(object.matchInfo);
        }
        if (object.frames) {
            if (!Array.isArray(object.frames))
                throw TypeError(".PVPResult.frames: array expected");
            message.frames = [];
            for (var i = 0; i < object.frames.length; ++i) {
                if (typeof object.frames[i] !== "object")
                    throw TypeError(".PVPResult.frames: object expected");
                message.frames[i] = $root.PVPFrame.fromObject(object.frames[i]);
            }
        }
        if (object.md5 != null)
            message.md5 = String(object.md5);
        return message;
    };
    PVPResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.gameResultList = [];
            object.frames = [];
        }
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.matchInfo = null;
            object.md5 = "";
        }
        if (message.gameResultList && message.gameResultList.length) {
            object.gameResultList = [];
            for (var j = 0; j < message.gameResultList.length; ++j)
                object.gameResultList[j] = $root.GamerResult.toObject(message.gameResultList[j], options);
        }
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            object.matchInfo = $root.MatchInfo.toObject(message.matchInfo, options);
        if (message.frames && message.frames.length) {
            object.frames = [];
            for (var j = 0; j < message.frames.length; ++j)
                object.frames[j] = $root.PVPFrame.toObject(message.frames[j], options);
        }
        if (message.md5 != null && message.hasOwnProperty("md5"))
            object.md5 = message.md5;
        return object;
    };
    PVPResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PVPResult;
})();
$root.RankLength = (function() {
    function RankLength(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    RankLength.prototype.id = 0;
    RankLength.prototype.length = 0;
    RankLength.prototype.rank = 0;
    RankLength.prototype.mini = null;
    RankLength.create = function create(properties) {
        return new RankLength(properties);
    };
    RankLength.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.length != null && message.hasOwnProperty("length"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.length);
        if (message.rank != null && message.hasOwnProperty("rank"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.rank);
        if (message.mini != null && message.hasOwnProperty("mini"))
            $root.GamerMini.encode(message.mini, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    RankLength.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    RankLength.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RankLength();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.length = reader.int32();
                break;
            case 3:
                message.rank = reader.int32();
                break;
            case 4:
                message.mini = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    RankLength.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    RankLength.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.length != null && message.hasOwnProperty("length"))
            if (!$util.isInteger(message.length))
                return "length: integer expected";
        if (message.rank != null && message.hasOwnProperty("rank"))
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
        if (message.mini != null && message.hasOwnProperty("mini")) {
            var error = $root.GamerMini.verify(message.mini);
            if (error)
                return "mini." + error;
        }
        return null;
    };
    RankLength.fromObject = function fromObject(object) {
        if (object instanceof $root.RankLength)
            return object;
        var message = new $root.RankLength();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.length != null)
            message.length = object.length | 0;
        if (object.rank != null)
            message.rank = object.rank | 0;
        if (object.mini != null) {
            if (typeof object.mini !== "object")
                throw TypeError(".RankLength.mini: object expected");
            message.mini = $root.GamerMini.fromObject(object.mini);
        }
        return message;
    };
    RankLength.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.length = 0;
            object.rank = 0;
            object.mini = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.length != null && message.hasOwnProperty("length"))
            object.length = message.length;
        if (message.rank != null && message.hasOwnProperty("rank"))
            object.rank = message.rank;
        if (message.mini != null && message.hasOwnProperty("mini"))
            object.mini = $root.GamerMini.toObject(message.mini, options);
        return object;
    };
    RankLength.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return RankLength;
})();
$root.Gashapon = (function() {
    function Gashapon(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Gashapon.prototype.id = 0;
    Gashapon.prototype.extractNum = 0;
    Gashapon.prototype.freeNum = 0;
    Gashapon.prototype.nextFreeTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Gashapon.prototype.startTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Gashapon.prototype.endTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Gashapon.prototype.guaranteedNum = 0;
    Gashapon.prototype.trigger = 0;
    Gashapon.prototype.lastTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Gashapon.prototype.todayExtractNum = 0;
    Gashapon.create = function create(properties) {
        return new Gashapon(properties);
    };
    Gashapon.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.extractNum != null && message.hasOwnProperty("extractNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.extractNum);
        if (message.freeNum != null && message.hasOwnProperty("freeNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.freeNum);
        if (message.nextFreeTime != null && message.hasOwnProperty("nextFreeTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.nextFreeTime);
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.startTime);
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.endTime);
        if (message.guaranteedNum != null && message.hasOwnProperty("guaranteedNum"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.guaranteedNum);
        if (message.trigger != null && message.hasOwnProperty("trigger"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.trigger);
        if (message.lastTime != null && message.hasOwnProperty("lastTime"))
            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.lastTime);
        if (message.todayExtractNum != null && message.hasOwnProperty("todayExtractNum"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.todayExtractNum);
        return writer;
    };
    Gashapon.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Gashapon.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Gashapon();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.extractNum = reader.int32();
                break;
            case 3:
                message.freeNum = reader.int32();
                break;
            case 4:
                message.nextFreeTime = reader.int64();
                break;
            case 5:
                message.startTime = reader.int64();
                break;
            case 6:
                message.endTime = reader.int64();
                break;
            case 7:
                message.guaranteedNum = reader.int32();
                break;
            case 8:
                message.trigger = reader.int32();
                break;
            case 9:
                message.lastTime = reader.int64();
                break;
            case 10:
                message.todayExtractNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Gashapon.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Gashapon.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.extractNum != null && message.hasOwnProperty("extractNum"))
            if (!$util.isInteger(message.extractNum))
                return "extractNum: integer expected";
        if (message.freeNum != null && message.hasOwnProperty("freeNum"))
            if (!$util.isInteger(message.freeNum))
                return "freeNum: integer expected";
        if (message.nextFreeTime != null && message.hasOwnProperty("nextFreeTime"))
            if (!$util.isInteger(message.nextFreeTime) && !(message.nextFreeTime && $util.isInteger(message.nextFreeTime.low) && $util.isInteger(message.nextFreeTime.high)))
                return "nextFreeTime: integer|Long expected";
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))
                return "startTime: integer|Long expected";
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))
                return "endTime: integer|Long expected";
        if (message.guaranteedNum != null && message.hasOwnProperty("guaranteedNum"))
            if (!$util.isInteger(message.guaranteedNum))
                return "guaranteedNum: integer expected";
        if (message.trigger != null && message.hasOwnProperty("trigger"))
            if (!$util.isInteger(message.trigger))
                return "trigger: integer expected";
        if (message.lastTime != null && message.hasOwnProperty("lastTime"))
            if (!$util.isInteger(message.lastTime) && !(message.lastTime && $util.isInteger(message.lastTime.low) && $util.isInteger(message.lastTime.high)))
                return "lastTime: integer|Long expected";
        if (message.todayExtractNum != null && message.hasOwnProperty("todayExtractNum"))
            if (!$util.isInteger(message.todayExtractNum))
                return "todayExtractNum: integer expected";
        return null;
    };
    Gashapon.fromObject = function fromObject(object) {
        if (object instanceof $root.Gashapon)
            return object;
        var message = new $root.Gashapon();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.extractNum != null)
            message.extractNum = object.extractNum | 0;
        if (object.freeNum != null)
            message.freeNum = object.freeNum | 0;
        if (object.nextFreeTime != null)
            if ($util.Long)
                (message.nextFreeTime = $util.Long.fromValue(object.nextFreeTime)).unsigned = false;
            else if (typeof object.nextFreeTime === "string")
                message.nextFreeTime = parseInt(object.nextFreeTime, 10);
            else if (typeof object.nextFreeTime === "number")
                message.nextFreeTime = object.nextFreeTime;
            else if (typeof object.nextFreeTime === "object")
                message.nextFreeTime = new $util.LongBits(object.nextFreeTime.low >>> 0, object.nextFreeTime.high >>> 0).toNumber();
        if (object.startTime != null)
            if ($util.Long)
                (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = false;
            else if (typeof object.startTime === "string")
                message.startTime = parseInt(object.startTime, 10);
            else if (typeof object.startTime === "number")
                message.startTime = object.startTime;
            else if (typeof object.startTime === "object")
                message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber();
        if (object.endTime != null)
            if ($util.Long)
                (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = false;
            else if (typeof object.endTime === "string")
                message.endTime = parseInt(object.endTime, 10);
            else if (typeof object.endTime === "number")
                message.endTime = object.endTime;
            else if (typeof object.endTime === "object")
                message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber();
        if (object.guaranteedNum != null)
            message.guaranteedNum = object.guaranteedNum | 0;
        if (object.trigger != null)
            message.trigger = object.trigger | 0;
        if (object.lastTime != null)
            if ($util.Long)
                (message.lastTime = $util.Long.fromValue(object.lastTime)).unsigned = false;
            else if (typeof object.lastTime === "string")
                message.lastTime = parseInt(object.lastTime, 10);
            else if (typeof object.lastTime === "number")
                message.lastTime = object.lastTime;
            else if (typeof object.lastTime === "object")
                message.lastTime = new $util.LongBits(object.lastTime.low >>> 0, object.lastTime.high >>> 0).toNumber();
        if (object.todayExtractNum != null)
            message.todayExtractNum = object.todayExtractNum | 0;
        return message;
    };
    Gashapon.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.extractNum = 0;
            object.freeNum = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.nextFreeTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.nextFreeTime = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.startTime = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.endTime = options.longs === String ? "0" : 0;
            object.guaranteedNum = 0;
            object.trigger = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastTime = options.longs === String ? "0" : 0;
            object.todayExtractNum = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.extractNum != null && message.hasOwnProperty("extractNum"))
            object.extractNum = message.extractNum;
        if (message.freeNum != null && message.hasOwnProperty("freeNum"))
            object.freeNum = message.freeNum;
        if (message.nextFreeTime != null && message.hasOwnProperty("nextFreeTime"))
            if (typeof message.nextFreeTime === "number")
                object.nextFreeTime = options.longs === String ? String(message.nextFreeTime) : message.nextFreeTime;
            else
                object.nextFreeTime = options.longs === String ? $util.Long.prototype.toString.call(message.nextFreeTime) : options.longs === Number ? new $util.LongBits(message.nextFreeTime.low >>> 0, message.nextFreeTime.high >>> 0).toNumber() : message.nextFreeTime;
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (typeof message.startTime === "number")
                object.startTime = options.longs === String ? String(message.startTime) : message.startTime;
            else
                object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber() : message.startTime;
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (typeof message.endTime === "number")
                object.endTime = options.longs === String ? String(message.endTime) : message.endTime;
            else
                object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber() : message.endTime;
        if (message.guaranteedNum != null && message.hasOwnProperty("guaranteedNum"))
            object.guaranteedNum = message.guaranteedNum;
        if (message.trigger != null && message.hasOwnProperty("trigger"))
            object.trigger = message.trigger;
        if (message.lastTime != null && message.hasOwnProperty("lastTime"))
            if (typeof message.lastTime === "number")
                object.lastTime = options.longs === String ? String(message.lastTime) : message.lastTime;
            else
                object.lastTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastTime) : options.longs === Number ? new $util.LongBits(message.lastTime.low >>> 0, message.lastTime.high >>> 0).toNumber() : message.lastTime;
        if (message.todayExtractNum != null && message.hasOwnProperty("todayExtractNum"))
            object.todayExtractNum = message.todayExtractNum;
        return object;
    };
    Gashapon.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Gashapon;
})();
$root.Times = (function() {
    function Times(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Times.prototype.id = 0;
    Times.prototype.times = 0;
    Times.create = function create(properties) {
        return new Times(properties);
    };
    Times.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.times != null && message.hasOwnProperty("times"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.times);
        return writer;
    };
    Times.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Times.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Times();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.times = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Times.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Times.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.times != null && message.hasOwnProperty("times"))
            if (!$util.isInteger(message.times))
                return "times: integer expected";
        return null;
    };
    Times.fromObject = function fromObject(object) {
        if (object instanceof $root.Times)
            return object;
        var message = new $root.Times();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.times != null)
            message.times = object.times | 0;
        return message;
    };
    Times.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.times = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.times != null && message.hasOwnProperty("times"))
            object.times = message.times;
        return object;
    };
    Times.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Times;
})();
$root.FatigueInfo = (function() {
    function FatigueInfo(properties) {
        this.buyTimes = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    FatigueInfo.prototype.fatigueNum = 0;
    FatigueInfo.prototype.maxFatigueNum = 0;
    FatigueInfo.prototype.lastUpdateTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    FatigueInfo.prototype.buyTimes = $util.emptyArray;
    FatigueInfo.prototype.lastBuyTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    FatigueInfo.prototype.welfareStatus = 0;
    FatigueInfo.prototype.lastGetWelfareTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    FatigueInfo.create = function create(properties) {
        return new FatigueInfo(properties);
    };
    FatigueInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.fatigueNum != null && message.hasOwnProperty("fatigueNum"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.fatigueNum);
        if (message.maxFatigueNum != null && message.hasOwnProperty("maxFatigueNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.maxFatigueNum);
        if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.lastUpdateTime);
        if (message.buyTimes != null && message.buyTimes.length)
            for (var i = 0; i < message.buyTimes.length; ++i)
                $root.Times.encode(message.buyTimes[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.lastBuyTime != null && message.hasOwnProperty("lastBuyTime"))
            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.lastBuyTime);
        if (message.welfareStatus != null && message.hasOwnProperty("welfareStatus"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.welfareStatus);
        if (message.lastGetWelfareTime != null && message.hasOwnProperty("lastGetWelfareTime"))
            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.lastGetWelfareTime);
        return writer;
    };
    FatigueInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    FatigueInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FatigueInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.fatigueNum = reader.int32();
                break;
            case 2:
                message.maxFatigueNum = reader.int32();
                break;
            case 3:
                message.lastUpdateTime = reader.int64();
                break;
            case 4:
                if (!(message.buyTimes && message.buyTimes.length))
                    message.buyTimes = [];
                message.buyTimes.push($root.Times.decode(reader, reader.uint32()));
                break;
            case 5:
                message.lastBuyTime = reader.int64();
                break;
            case 6:
                message.welfareStatus = reader.int32();
                break;
            case 7:
                message.lastGetWelfareTime = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    FatigueInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    FatigueInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.fatigueNum != null && message.hasOwnProperty("fatigueNum"))
            if (!$util.isInteger(message.fatigueNum))
                return "fatigueNum: integer expected";
        if (message.maxFatigueNum != null && message.hasOwnProperty("maxFatigueNum"))
            if (!$util.isInteger(message.maxFatigueNum))
                return "maxFatigueNum: integer expected";
        if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime"))
            if (!$util.isInteger(message.lastUpdateTime) && !(message.lastUpdateTime && $util.isInteger(message.lastUpdateTime.low) && $util.isInteger(message.lastUpdateTime.high)))
                return "lastUpdateTime: integer|Long expected";
        if (message.buyTimes != null && message.hasOwnProperty("buyTimes")) {
            if (!Array.isArray(message.buyTimes))
                return "buyTimes: array expected";
            for (var i = 0; i < message.buyTimes.length; ++i) {
                var error = $root.Times.verify(message.buyTimes[i]);
                if (error)
                    return "buyTimes." + error;
            }
        }
        if (message.lastBuyTime != null && message.hasOwnProperty("lastBuyTime"))
            if (!$util.isInteger(message.lastBuyTime) && !(message.lastBuyTime && $util.isInteger(message.lastBuyTime.low) && $util.isInteger(message.lastBuyTime.high)))
                return "lastBuyTime: integer|Long expected";
        if (message.welfareStatus != null && message.hasOwnProperty("welfareStatus"))
            if (!$util.isInteger(message.welfareStatus))
                return "welfareStatus: integer expected";
        if (message.lastGetWelfareTime != null && message.hasOwnProperty("lastGetWelfareTime"))
            if (!$util.isInteger(message.lastGetWelfareTime) && !(message.lastGetWelfareTime && $util.isInteger(message.lastGetWelfareTime.low) && $util.isInteger(message.lastGetWelfareTime.high)))
                return "lastGetWelfareTime: integer|Long expected";
        return null;
    };
    FatigueInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.FatigueInfo)
            return object;
        var message = new $root.FatigueInfo();
        if (object.fatigueNum != null)
            message.fatigueNum = object.fatigueNum | 0;
        if (object.maxFatigueNum != null)
            message.maxFatigueNum = object.maxFatigueNum | 0;
        if (object.lastUpdateTime != null)
            if ($util.Long)
                (message.lastUpdateTime = $util.Long.fromValue(object.lastUpdateTime)).unsigned = false;
            else if (typeof object.lastUpdateTime === "string")
                message.lastUpdateTime = parseInt(object.lastUpdateTime, 10);
            else if (typeof object.lastUpdateTime === "number")
                message.lastUpdateTime = object.lastUpdateTime;
            else if (typeof object.lastUpdateTime === "object")
                message.lastUpdateTime = new $util.LongBits(object.lastUpdateTime.low >>> 0, object.lastUpdateTime.high >>> 0).toNumber();
        if (object.buyTimes) {
            if (!Array.isArray(object.buyTimes))
                throw TypeError(".FatigueInfo.buyTimes: array expected");
            message.buyTimes = [];
            for (var i = 0; i < object.buyTimes.length; ++i) {
                if (typeof object.buyTimes[i] !== "object")
                    throw TypeError(".FatigueInfo.buyTimes: object expected");
                message.buyTimes[i] = $root.Times.fromObject(object.buyTimes[i]);
            }
        }
        if (object.lastBuyTime != null)
            if ($util.Long)
                (message.lastBuyTime = $util.Long.fromValue(object.lastBuyTime)).unsigned = false;
            else if (typeof object.lastBuyTime === "string")
                message.lastBuyTime = parseInt(object.lastBuyTime, 10);
            else if (typeof object.lastBuyTime === "number")
                message.lastBuyTime = object.lastBuyTime;
            else if (typeof object.lastBuyTime === "object")
                message.lastBuyTime = new $util.LongBits(object.lastBuyTime.low >>> 0, object.lastBuyTime.high >>> 0).toNumber();
        if (object.welfareStatus != null)
            message.welfareStatus = object.welfareStatus | 0;
        if (object.lastGetWelfareTime != null)
            if ($util.Long)
                (message.lastGetWelfareTime = $util.Long.fromValue(object.lastGetWelfareTime)).unsigned = false;
            else if (typeof object.lastGetWelfareTime === "string")
                message.lastGetWelfareTime = parseInt(object.lastGetWelfareTime, 10);
            else if (typeof object.lastGetWelfareTime === "number")
                message.lastGetWelfareTime = object.lastGetWelfareTime;
            else if (typeof object.lastGetWelfareTime === "object")
                message.lastGetWelfareTime = new $util.LongBits(object.lastGetWelfareTime.low >>> 0, object.lastGetWelfareTime.high >>> 0).toNumber();
        return message;
    };
    FatigueInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.buyTimes = [];
        if (options.defaults) {
            object.fatigueNum = 0;
            object.maxFatigueNum = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastUpdateTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastUpdateTime = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastBuyTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastBuyTime = options.longs === String ? "0" : 0;
            object.welfareStatus = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastGetWelfareTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastGetWelfareTime = options.longs === String ? "0" : 0;
        }
        if (message.fatigueNum != null && message.hasOwnProperty("fatigueNum"))
            object.fatigueNum = message.fatigueNum;
        if (message.maxFatigueNum != null && message.hasOwnProperty("maxFatigueNum"))
            object.maxFatigueNum = message.maxFatigueNum;
        if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime"))
            if (typeof message.lastUpdateTime === "number")
                object.lastUpdateTime = options.longs === String ? String(message.lastUpdateTime) : message.lastUpdateTime;
            else
                object.lastUpdateTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastUpdateTime) : options.longs === Number ? new $util.LongBits(message.lastUpdateTime.low >>> 0, message.lastUpdateTime.high >>> 0).toNumber() : message.lastUpdateTime;
        if (message.buyTimes && message.buyTimes.length) {
            object.buyTimes = [];
            for (var j = 0; j < message.buyTimes.length; ++j)
                object.buyTimes[j] = $root.Times.toObject(message.buyTimes[j], options);
        }
        if (message.lastBuyTime != null && message.hasOwnProperty("lastBuyTime"))
            if (typeof message.lastBuyTime === "number")
                object.lastBuyTime = options.longs === String ? String(message.lastBuyTime) : message.lastBuyTime;
            else
                object.lastBuyTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastBuyTime) : options.longs === Number ? new $util.LongBits(message.lastBuyTime.low >>> 0, message.lastBuyTime.high >>> 0).toNumber() : message.lastBuyTime;
        if (message.welfareStatus != null && message.hasOwnProperty("welfareStatus"))
            object.welfareStatus = message.welfareStatus;
        if (message.lastGetWelfareTime != null && message.hasOwnProperty("lastGetWelfareTime"))
            if (typeof message.lastGetWelfareTime === "number")
                object.lastGetWelfareTime = options.longs === String ? String(message.lastGetWelfareTime) : message.lastGetWelfareTime;
            else
                object.lastGetWelfareTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastGetWelfareTime) : options.longs === Number ? new $util.LongBits(message.lastGetWelfareTime.low >>> 0, message.lastGetWelfareTime.high >>> 0).toNumber() : message.lastGetWelfareTime;
        return object;
    };
    FatigueInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return FatigueInfo;
})();
$root.CountActivity = (function() {
    function CountActivity(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CountActivity.prototype.id = 0;
    CountActivity.prototype.currentDay = 0;
    CountActivity.prototype.alreadyGetDay = 0;
    CountActivity.create = function create(properties) {
        return new CountActivity(properties);
    };
    CountActivity.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.currentDay != null && message.hasOwnProperty("currentDay"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.currentDay);
        if (message.alreadyGetDay != null && message.hasOwnProperty("alreadyGetDay"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.alreadyGetDay);
        return writer;
    };
    CountActivity.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CountActivity.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CountActivity();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.currentDay = reader.int32();
                break;
            case 3:
                message.alreadyGetDay = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CountActivity.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CountActivity.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.currentDay != null && message.hasOwnProperty("currentDay"))
            if (!$util.isInteger(message.currentDay))
                return "currentDay: integer expected";
        if (message.alreadyGetDay != null && message.hasOwnProperty("alreadyGetDay"))
            if (!$util.isInteger(message.alreadyGetDay))
                return "alreadyGetDay: integer expected";
        return null;
    };
    CountActivity.fromObject = function fromObject(object) {
        if (object instanceof $root.CountActivity)
            return object;
        var message = new $root.CountActivity();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.currentDay != null)
            message.currentDay = object.currentDay | 0;
        if (object.alreadyGetDay != null)
            message.alreadyGetDay = object.alreadyGetDay | 0;
        return message;
    };
    CountActivity.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.currentDay = 0;
            object.alreadyGetDay = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.currentDay != null && message.hasOwnProperty("currentDay"))
            object.currentDay = message.currentDay;
        if (message.alreadyGetDay != null && message.hasOwnProperty("alreadyGetDay"))
            object.alreadyGetDay = message.alreadyGetDay;
        return object;
    };
    CountActivity.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CountActivity;
})();
$root.GuildMember = (function() {
    function GuildMember(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GuildMember.prototype.gid = 0;
    GuildMember.prototype.contribution = 0;
    GuildMember.prototype.power = 0;
    GuildMember.prototype.position = 0;
    GuildMember.prototype.isOnline = false;
    GuildMember.prototype.mini = null;
    GuildMember.create = function create(properties) {
        return new GuildMember(properties);
    };
    GuildMember.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gid != null && message.hasOwnProperty("gid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gid);
        if (message.contribution != null && message.hasOwnProperty("contribution"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.contribution);
        if (message.power != null && message.hasOwnProperty("power"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.power);
        if (message.position != null && message.hasOwnProperty("position"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.position);
        if (message.isOnline != null && message.hasOwnProperty("isOnline"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isOnline);
        if (message.mini != null && message.hasOwnProperty("mini"))
            $root.GamerMini.encode(message.mini, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        return writer;
    };
    GuildMember.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GuildMember.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GuildMember();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gid = reader.int32();
                break;
            case 2:
                message.contribution = reader.int32();
                break;
            case 3:
                message.power = reader.int32();
                break;
            case 4:
                message.position = reader.int32();
                break;
            case 5:
                message.isOnline = reader.bool();
                break;
            case 6:
                message.mini = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GuildMember.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GuildMember.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gid != null && message.hasOwnProperty("gid"))
            if (!$util.isInteger(message.gid))
                return "gid: integer expected";
        if (message.contribution != null && message.hasOwnProperty("contribution"))
            if (!$util.isInteger(message.contribution))
                return "contribution: integer expected";
        if (message.power != null && message.hasOwnProperty("power"))
            if (!$util.isInteger(message.power))
                return "power: integer expected";
        if (message.position != null && message.hasOwnProperty("position"))
            if (!$util.isInteger(message.position))
                return "position: integer expected";
        if (message.isOnline != null && message.hasOwnProperty("isOnline"))
            if (typeof message.isOnline !== "boolean")
                return "isOnline: boolean expected";
        if (message.mini != null && message.hasOwnProperty("mini")) {
            var error = $root.GamerMini.verify(message.mini);
            if (error)
                return "mini." + error;
        }
        return null;
    };
    GuildMember.fromObject = function fromObject(object) {
        if (object instanceof $root.GuildMember)
            return object;
        var message = new $root.GuildMember();
        if (object.gid != null)
            message.gid = object.gid | 0;
        if (object.contribution != null)
            message.contribution = object.contribution | 0;
        if (object.power != null)
            message.power = object.power | 0;
        if (object.position != null)
            message.position = object.position | 0;
        if (object.isOnline != null)
            message.isOnline = Boolean(object.isOnline);
        if (object.mini != null) {
            if (typeof object.mini !== "object")
                throw TypeError(".GuildMember.mini: object expected");
            message.mini = $root.GamerMini.fromObject(object.mini);
        }
        return message;
    };
    GuildMember.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.gid = 0;
            object.contribution = 0;
            object.power = 0;
            object.position = 0;
            object.isOnline = false;
            object.mini = null;
        }
        if (message.gid != null && message.hasOwnProperty("gid"))
            object.gid = message.gid;
        if (message.contribution != null && message.hasOwnProperty("contribution"))
            object.contribution = message.contribution;
        if (message.power != null && message.hasOwnProperty("power"))
            object.power = message.power;
        if (message.position != null && message.hasOwnProperty("position"))
            object.position = message.position;
        if (message.isOnline != null && message.hasOwnProperty("isOnline"))
            object.isOnline = message.isOnline;
        if (message.mini != null && message.hasOwnProperty("mini"))
            object.mini = $root.GamerMini.toObject(message.mini, options);
        return object;
    };
    GuildMember.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GuildMember;
})();
$root.Guild = (function() {
    function Guild(properties) {
        this.mems = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Guild.prototype.id = 0;
    Guild.prototype.name = "";
    Guild.prototype.level = 0;
    Guild.prototype.experience = 0;
    Guild.prototype.memberNum = 0;
    Guild.prototype.mems = $util.emptyArray;
    Guild.prototype.announcement = "";
    Guild.prototype.lsid = 0;
    Guild.prototype.createdTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Guild.prototype.ownerId = 0;
    Guild.prototype.maxMemberNum = 0;
    Guild.prototype.onlineMemNum = 0;
    Guild.prototype.psid = 0;
    Guild.create = function create(properties) {
        return new Guild(properties);
    };
    Guild.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.level);
        if (message.experience != null && message.hasOwnProperty("experience"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.experience);
        if (message.memberNum != null && message.hasOwnProperty("memberNum"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.memberNum);
        if (message.mems != null && message.mems.length)
            for (var i = 0; i < message.mems.length; ++i)
                $root.GuildMember.encode(message.mems[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.announcement != null && message.hasOwnProperty("announcement"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.announcement);
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.lsid);
        if (message.createdTime != null && message.hasOwnProperty("createdTime"))
            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.createdTime);
        if (message.ownerId != null && message.hasOwnProperty("ownerId"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.ownerId);
        if (message.maxMemberNum != null && message.hasOwnProperty("maxMemberNum"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.maxMemberNum);
        if (message.onlineMemNum != null && message.hasOwnProperty("onlineMemNum"))
            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.onlineMemNum);
        if (message.psid != null && message.hasOwnProperty("psid"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.psid);
        return writer;
    };
    Guild.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Guild.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Guild();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.level = reader.int32();
                break;
            case 4:
                message.experience = reader.int32();
                break;
            case 5:
                message.memberNum = reader.int32();
                break;
            case 6:
                if (!(message.mems && message.mems.length))
                    message.mems = [];
                message.mems.push($root.GuildMember.decode(reader, reader.uint32()));
                break;
            case 7:
                message.announcement = reader.string();
                break;
            case 8:
                message.lsid = reader.int32();
                break;
            case 9:
                message.createdTime = reader.int64();
                break;
            case 10:
                message.ownerId = reader.int32();
                break;
            case 11:
                message.maxMemberNum = reader.int32();
                break;
            case 12:
                message.onlineMemNum = reader.int32();
                break;
            case 13:
                message.psid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Guild.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Guild.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.experience != null && message.hasOwnProperty("experience"))
            if (!$util.isInteger(message.experience))
                return "experience: integer expected";
        if (message.memberNum != null && message.hasOwnProperty("memberNum"))
            if (!$util.isInteger(message.memberNum))
                return "memberNum: integer expected";
        if (message.mems != null && message.hasOwnProperty("mems")) {
            if (!Array.isArray(message.mems))
                return "mems: array expected";
            for (var i = 0; i < message.mems.length; ++i) {
                var error = $root.GuildMember.verify(message.mems[i]);
                if (error)
                    return "mems." + error;
            }
        }
        if (message.announcement != null && message.hasOwnProperty("announcement"))
            if (!$util.isString(message.announcement))
                return "announcement: string expected";
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            if (!$util.isInteger(message.lsid))
                return "lsid: integer expected";
        if (message.createdTime != null && message.hasOwnProperty("createdTime"))
            if (!$util.isInteger(message.createdTime) && !(message.createdTime && $util.isInteger(message.createdTime.low) && $util.isInteger(message.createdTime.high)))
                return "createdTime: integer|Long expected";
        if (message.ownerId != null && message.hasOwnProperty("ownerId"))
            if (!$util.isInteger(message.ownerId))
                return "ownerId: integer expected";
        if (message.maxMemberNum != null && message.hasOwnProperty("maxMemberNum"))
            if (!$util.isInteger(message.maxMemberNum))
                return "maxMemberNum: integer expected";
        if (message.onlineMemNum != null && message.hasOwnProperty("onlineMemNum"))
            if (!$util.isInteger(message.onlineMemNum))
                return "onlineMemNum: integer expected";
        if (message.psid != null && message.hasOwnProperty("psid"))
            if (!$util.isInteger(message.psid))
                return "psid: integer expected";
        return null;
    };
    Guild.fromObject = function fromObject(object) {
        if (object instanceof $root.Guild)
            return object;
        var message = new $root.Guild();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.level != null)
            message.level = object.level | 0;
        if (object.experience != null)
            message.experience = object.experience | 0;
        if (object.memberNum != null)
            message.memberNum = object.memberNum | 0;
        if (object.mems) {
            if (!Array.isArray(object.mems))
                throw TypeError(".Guild.mems: array expected");
            message.mems = [];
            for (var i = 0; i < object.mems.length; ++i) {
                if (typeof object.mems[i] !== "object")
                    throw TypeError(".Guild.mems: object expected");
                message.mems[i] = $root.GuildMember.fromObject(object.mems[i]);
            }
        }
        if (object.announcement != null)
            message.announcement = String(object.announcement);
        if (object.lsid != null)
            message.lsid = object.lsid | 0;
        if (object.createdTime != null)
            if ($util.Long)
                (message.createdTime = $util.Long.fromValue(object.createdTime)).unsigned = false;
            else if (typeof object.createdTime === "string")
                message.createdTime = parseInt(object.createdTime, 10);
            else if (typeof object.createdTime === "number")
                message.createdTime = object.createdTime;
            else if (typeof object.createdTime === "object")
                message.createdTime = new $util.LongBits(object.createdTime.low >>> 0, object.createdTime.high >>> 0).toNumber();
        if (object.ownerId != null)
            message.ownerId = object.ownerId | 0;
        if (object.maxMemberNum != null)
            message.maxMemberNum = object.maxMemberNum | 0;
        if (object.onlineMemNum != null)
            message.onlineMemNum = object.onlineMemNum | 0;
        if (object.psid != null)
            message.psid = object.psid | 0;
        return message;
    };
    Guild.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.mems = [];
        if (options.defaults) {
            object.id = 0;
            object.name = "";
            object.level = 0;
            object.experience = 0;
            object.memberNum = 0;
            object.announcement = "";
            object.lsid = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.createdTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.createdTime = options.longs === String ? "0" : 0;
            object.ownerId = 0;
            object.maxMemberNum = 0;
            object.onlineMemNum = 0;
            object.psid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.experience != null && message.hasOwnProperty("experience"))
            object.experience = message.experience;
        if (message.memberNum != null && message.hasOwnProperty("memberNum"))
            object.memberNum = message.memberNum;
        if (message.mems && message.mems.length) {
            object.mems = [];
            for (var j = 0; j < message.mems.length; ++j)
                object.mems[j] = $root.GuildMember.toObject(message.mems[j], options);
        }
        if (message.announcement != null && message.hasOwnProperty("announcement"))
            object.announcement = message.announcement;
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            object.lsid = message.lsid;
        if (message.createdTime != null && message.hasOwnProperty("createdTime"))
            if (typeof message.createdTime === "number")
                object.createdTime = options.longs === String ? String(message.createdTime) : message.createdTime;
            else
                object.createdTime = options.longs === String ? $util.Long.prototype.toString.call(message.createdTime) : options.longs === Number ? new $util.LongBits(message.createdTime.low >>> 0, message.createdTime.high >>> 0).toNumber() : message.createdTime;
        if (message.ownerId != null && message.hasOwnProperty("ownerId"))
            object.ownerId = message.ownerId;
        if (message.maxMemberNum != null && message.hasOwnProperty("maxMemberNum"))
            object.maxMemberNum = message.maxMemberNum;
        if (message.onlineMemNum != null && message.hasOwnProperty("onlineMemNum"))
            object.onlineMemNum = message.onlineMemNum;
        if (message.psid != null && message.hasOwnProperty("psid"))
            object.psid = message.psid;
        return object;
    };
    Guild.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Guild;
})();
$root.CarryProp = (function() {
    function CarryProp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CarryProp.prototype.id = 0;
    CarryProp.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    CarryProp.prototype.propTableId = 0;
    CarryProp.prototype.level = 0;
    CarryProp.prototype.module = 0;
    CarryProp.create = function create(properties) {
        return new CarryProp(properties);
    };
    CarryProp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.value != null && message.hasOwnProperty("value"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.value);
        if (message.propTableId != null && message.hasOwnProperty("propTableId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.propTableId);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.level);
        if (message.module != null && message.hasOwnProperty("module"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.module);
        return writer;
    };
    CarryProp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CarryProp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CarryProp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.value = reader.uint64();
                break;
            case 3:
                message.propTableId = reader.int32();
                break;
            case 4:
                message.level = reader.int32();
                break;
            case 5:
                message.module = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CarryProp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CarryProp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                return "value: integer|Long expected";
        if (message.propTableId != null && message.hasOwnProperty("propTableId"))
            if (!$util.isInteger(message.propTableId))
                return "propTableId: integer expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.module != null && message.hasOwnProperty("module"))
            switch (message.module) {
            default:
                return "module: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        return null;
    };
    CarryProp.fromObject = function fromObject(object) {
        if (object instanceof $root.CarryProp)
            return object;
        var message = new $root.CarryProp();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.value != null)
            if ($util.Long)
                (message.value = $util.Long.fromValue(object.value)).unsigned = true;
            else if (typeof object.value === "string")
                message.value = parseInt(object.value, 10);
            else if (typeof object.value === "number")
                message.value = object.value;
            else if (typeof object.value === "object")
                message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber(true);
        if (object.propTableId != null)
            message.propTableId = object.propTableId | 0;
        if (object.level != null)
            message.level = object.level | 0;
        switch (object.module) {
        case "AllModule":
        case 0:
            message.module = 0;
            break;
        case "HeroModule":
        case 1:
            message.module = 1;
            break;
        case "DraugModule":
        case 2:
            message.module = 2;
            break;
        case "RubyModule":
        case 3:
            message.module = 3;
            break;
        case "EquipmentModule":
        case 4:
            message.module = 4;
            break;
        }
        return message;
    };
    CarryProp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.value = options.longs === String ? "0" : 0;
            object.propTableId = 0;
            object.level = 0;
            object.module = options.enums === String ? "AllModule" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.value != null && message.hasOwnProperty("value"))
            if (typeof message.value === "number")
                object.value = options.longs === String ? String(message.value) : message.value;
            else
                object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber(true) : message.value;
        if (message.propTableId != null && message.hasOwnProperty("propTableId"))
            object.propTableId = message.propTableId;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.module != null && message.hasOwnProperty("module"))
            object.module = options.enums === String ? $root.PropEffectModule[message.module] : message.module;
        return object;
    };
    CarryProp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CarryProp;
})();
$root.Draug = (function() {
    function Draug(properties) {
        this.propList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Draug.prototype.uid = 0;
    Draug.prototype.id = 0;
    Draug.prototype.name = "";
    Draug.prototype.exp = 0;
    Draug.prototype.level = 0;
    Draug.prototype.pos = 0;
    Draug.prototype.quality = 0;
    Draug.prototype.isLock = false;
    Draug.prototype.mainProp = null;
    Draug.prototype.propList = $util.emptyArray;
    Draug.prototype.AddRatePos = 0;
    Draug.create = function create(properties) {
        return new Draug(properties);
    };
    Draug.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.exp != null && message.hasOwnProperty("exp"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.exp);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.level);
        if (message.pos != null && message.hasOwnProperty("pos"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.pos);
        if (message.quality != null && message.hasOwnProperty("quality"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.quality);
        if (message.isLock != null && message.hasOwnProperty("isLock"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.isLock);
        if (message.mainProp != null && message.hasOwnProperty("mainProp"))
            $root.CarryProp.encode(message.mainProp, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.propList != null && message.propList.length)
            for (var i = 0; i < message.propList.length; ++i)
                $root.CarryProp.encode(message.propList[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.AddRatePos != null && message.hasOwnProperty("AddRatePos"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.AddRatePos);
        return writer;
    };
    Draug.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Draug.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Draug();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.int32();
                break;
            case 2:
                message.id = reader.int32();
                break;
            case 3:
                message.name = reader.string();
                break;
            case 4:
                message.exp = reader.int32();
                break;
            case 5:
                message.level = reader.int32();
                break;
            case 6:
                message.pos = reader.int32();
                break;
            case 7:
                message.quality = reader.int32();
                break;
            case 8:
                message.isLock = reader.bool();
                break;
            case 9:
                message.mainProp = $root.CarryProp.decode(reader, reader.uint32());
                break;
            case 10:
                if (!(message.propList && message.propList.length))
                    message.propList = [];
                message.propList.push($root.CarryProp.decode(reader, reader.uint32()));
                break;
            case 11:
                message.AddRatePos = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Draug.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Draug.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid))
                return "uid: integer expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.exp != null && message.hasOwnProperty("exp"))
            if (!$util.isInteger(message.exp))
                return "exp: integer expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.pos != null && message.hasOwnProperty("pos"))
            if (!$util.isInteger(message.pos))
                return "pos: integer expected";
        if (message.quality != null && message.hasOwnProperty("quality"))
            switch (message.quality) {
            default:
                return "quality: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.isLock != null && message.hasOwnProperty("isLock"))
            if (typeof message.isLock !== "boolean")
                return "isLock: boolean expected";
        if (message.mainProp != null && message.hasOwnProperty("mainProp")) {
            var error = $root.CarryProp.verify(message.mainProp);
            if (error)
                return "mainProp." + error;
        }
        if (message.propList != null && message.hasOwnProperty("propList")) {
            if (!Array.isArray(message.propList))
                return "propList: array expected";
            for (var i = 0; i < message.propList.length; ++i) {
                var error = $root.CarryProp.verify(message.propList[i]);
                if (error)
                    return "propList." + error;
            }
        }
        if (message.AddRatePos != null && message.hasOwnProperty("AddRatePos"))
            if (!$util.isInteger(message.AddRatePos))
                return "AddRatePos: integer expected";
        return null;
    };
    Draug.fromObject = function fromObject(object) {
        if (object instanceof $root.Draug)
            return object;
        var message = new $root.Draug();
        if (object.uid != null)
            message.uid = object.uid | 0;
        if (object.id != null)
            message.id = object.id | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.exp != null)
            message.exp = object.exp | 0;
        if (object.level != null)
            message.level = object.level | 0;
        if (object.pos != null)
            message.pos = object.pos | 0;
        switch (object.quality) {
        case "QualityType_None":
        case 0:
            message.quality = 0;
            break;
        case "white":
        case 1:
            message.quality = 1;
            break;
        case "green":
        case 2:
            message.quality = 2;
            break;
        case "blue":
        case 3:
            message.quality = 3;
            break;
        case "purple":
        case 4:
            message.quality = 4;
            break;
        case "orange":
        case 5:
            message.quality = 5;
            break;
        }
        if (object.isLock != null)
            message.isLock = Boolean(object.isLock);
        if (object.mainProp != null) {
            if (typeof object.mainProp !== "object")
                throw TypeError(".Draug.mainProp: object expected");
            message.mainProp = $root.CarryProp.fromObject(object.mainProp);
        }
        if (object.propList) {
            if (!Array.isArray(object.propList))
                throw TypeError(".Draug.propList: array expected");
            message.propList = [];
            for (var i = 0; i < object.propList.length; ++i) {
                if (typeof object.propList[i] !== "object")
                    throw TypeError(".Draug.propList: object expected");
                message.propList[i] = $root.CarryProp.fromObject(object.propList[i]);
            }
        }
        if (object.AddRatePos != null)
            message.AddRatePos = object.AddRatePos | 0;
        return message;
    };
    Draug.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.propList = [];
        if (options.defaults) {
            object.uid = 0;
            object.id = 0;
            object.name = "";
            object.exp = 0;
            object.level = 0;
            object.pos = 0;
            object.quality = options.enums === String ? "QualityType_None" : 0;
            object.isLock = false;
            object.mainProp = null;
            object.AddRatePos = 0;
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            object.uid = message.uid;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.exp != null && message.hasOwnProperty("exp"))
            object.exp = message.exp;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.pos != null && message.hasOwnProperty("pos"))
            object.pos = message.pos;
        if (message.quality != null && message.hasOwnProperty("quality"))
            object.quality = options.enums === String ? $root.QualityType[message.quality] : message.quality;
        if (message.isLock != null && message.hasOwnProperty("isLock"))
            object.isLock = message.isLock;
        if (message.mainProp != null && message.hasOwnProperty("mainProp"))
            object.mainProp = $root.CarryProp.toObject(message.mainProp, options);
        if (message.propList && message.propList.length) {
            object.propList = [];
            for (var j = 0; j < message.propList.length; ++j)
                object.propList[j] = $root.CarryProp.toObject(message.propList[j], options);
        }
        if (message.AddRatePos != null && message.hasOwnProperty("AddRatePos"))
            object.AddRatePos = message.AddRatePos;
        return object;
    };
    Draug.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Draug;
})();
$root.HeroGroupPos = (function() {
    function HeroGroupPos(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    HeroGroupPos.prototype.pos = 0;
    HeroGroupPos.prototype.heroId = 0;
    HeroGroupPos.prototype.skillId = 0;
    HeroGroupPos.create = function create(properties) {
        return new HeroGroupPos(properties);
    };
    HeroGroupPos.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.pos != null && message.hasOwnProperty("pos"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.pos);
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.heroId);
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.skillId);
        return writer;
    };
    HeroGroupPos.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    HeroGroupPos.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HeroGroupPos();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.pos = reader.int32();
                break;
            case 3:
                message.heroId = reader.int32();
                break;
            case 4:
                message.skillId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    HeroGroupPos.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    HeroGroupPos.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.pos != null && message.hasOwnProperty("pos"))
            if (!$util.isInteger(message.pos))
                return "pos: integer expected";
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            if (!$util.isInteger(message.heroId))
                return "heroId: integer expected";
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            if (!$util.isInteger(message.skillId))
                return "skillId: integer expected";
        return null;
    };
    HeroGroupPos.fromObject = function fromObject(object) {
        if (object instanceof $root.HeroGroupPos)
            return object;
        var message = new $root.HeroGroupPos();
        if (object.pos != null)
            message.pos = object.pos | 0;
        if (object.heroId != null)
            message.heroId = object.heroId | 0;
        if (object.skillId != null)
            message.skillId = object.skillId | 0;
        return message;
    };
    HeroGroupPos.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.pos = 0;
            object.heroId = 0;
            object.skillId = 0;
        }
        if (message.pos != null && message.hasOwnProperty("pos"))
            object.pos = message.pos;
        if (message.heroId != null && message.hasOwnProperty("heroId"))
            object.heroId = message.heroId;
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            object.skillId = message.skillId;
        return object;
    };
    HeroGroupPos.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HeroGroupPos;
})();
$root.HeroGroup = (function() {
    function HeroGroup(properties) {
        this.posList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    HeroGroup.prototype.id = 0;
    HeroGroup.prototype.name = "";
    HeroGroup.prototype.posList = $util.emptyArray;
    HeroGroup.create = function create(properties) {
        return new HeroGroup(properties);
    };
    HeroGroup.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.posList != null && message.posList.length)
            for (var i = 0; i < message.posList.length; ++i)
                $root.HeroGroupPos.encode(message.posList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    HeroGroup.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    HeroGroup.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HeroGroup();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                if (!(message.posList && message.posList.length))
                    message.posList = [];
                message.posList.push($root.HeroGroupPos.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    HeroGroup.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    HeroGroup.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.posList != null && message.hasOwnProperty("posList")) {
            if (!Array.isArray(message.posList))
                return "posList: array expected";
            for (var i = 0; i < message.posList.length; ++i) {
                var error = $root.HeroGroupPos.verify(message.posList[i]);
                if (error)
                    return "posList." + error;
            }
        }
        return null;
    };
    HeroGroup.fromObject = function fromObject(object) {
        if (object instanceof $root.HeroGroup)
            return object;
        var message = new $root.HeroGroup();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.posList) {
            if (!Array.isArray(object.posList))
                throw TypeError(".HeroGroup.posList: array expected");
            message.posList = [];
            for (var i = 0; i < object.posList.length; ++i) {
                if (typeof object.posList[i] !== "object")
                    throw TypeError(".HeroGroup.posList: object expected");
                message.posList[i] = $root.HeroGroupPos.fromObject(object.posList[i]);
            }
        }
        return message;
    };
    HeroGroup.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.posList = [];
        if (options.defaults) {
            object.id = 0;
            object.name = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.posList && message.posList.length) {
            object.posList = [];
            for (var j = 0; j < message.posList.length; ++j)
                object.posList[j] = $root.HeroGroupPos.toObject(message.posList[j], options);
        }
        return object;
    };
    HeroGroup.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HeroGroup;
})();
$root.SeasonsList = (function() {
    function SeasonsList(properties) {
        this.seasonIds = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SeasonsList.prototype.seasonIds = $util.emptyArray;
    SeasonsList.create = function create(properties) {
        return new SeasonsList(properties);
    };
    SeasonsList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seasonIds != null && message.seasonIds.length) {
            writer.uint32(/* id 1, wireType 2 =*/10).fork();
            for (var i = 0; i < message.seasonIds.length; ++i)
                writer.int32(message.seasonIds[i]);
            writer.ldelim();
        }
        return writer;
    };
    SeasonsList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SeasonsList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SeasonsList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.seasonIds && message.seasonIds.length))
                    message.seasonIds = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.seasonIds.push(reader.int32());
                } else
                    message.seasonIds.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SeasonsList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SeasonsList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seasonIds != null && message.hasOwnProperty("seasonIds")) {
            if (!Array.isArray(message.seasonIds))
                return "seasonIds: array expected";
            for (var i = 0; i < message.seasonIds.length; ++i)
                if (!$util.isInteger(message.seasonIds[i]))
                    return "seasonIds: integer[] expected";
        }
        return null;
    };
    SeasonsList.fromObject = function fromObject(object) {
        if (object instanceof $root.SeasonsList)
            return object;
        var message = new $root.SeasonsList();
        if (object.seasonIds) {
            if (!Array.isArray(object.seasonIds))
                throw TypeError(".SeasonsList.seasonIds: array expected");
            message.seasonIds = [];
            for (var i = 0; i < object.seasonIds.length; ++i)
                message.seasonIds[i] = object.seasonIds[i] | 0;
        }
        return message;
    };
    SeasonsList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.seasonIds = [];
        if (message.seasonIds && message.seasonIds.length) {
            object.seasonIds = [];
            for (var j = 0; j < message.seasonIds.length; ++j)
                object.seasonIds[j] = message.seasonIds[j];
        }
        return object;
    };
    SeasonsList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SeasonsList;
})();
$root.Equip = (function() {
    function Equip(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Equip.prototype.level = 0;
    Equip.prototype.star = 0;
    Equip.prototype.exp = 0;
    Equip.prototype.onWho = 0;
    Equip.prototype.pos = 0;
    Equip.prototype.quality = 0;
    Equip.prototype.levelProp = null;
    Equip.prototype.starProp = null;
    Equip.create = function create(properties) {
        return new Equip(properties);
    };
    Equip.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.level);
        if (message.star != null && message.hasOwnProperty("star"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.star);
        if (message.exp != null && message.hasOwnProperty("exp"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.exp);
        if (message.onWho != null && message.hasOwnProperty("onWho"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.onWho);
        if (message.pos != null && message.hasOwnProperty("pos"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.pos);
        if (message.quality != null && message.hasOwnProperty("quality"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.quality);
        if (message.levelProp != null && message.hasOwnProperty("levelProp"))
            $root.CarryProp.encode(message.levelProp, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.starProp != null && message.hasOwnProperty("starProp"))
            $root.CarryProp.encode(message.starProp, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        return writer;
    };
    Equip.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Equip.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Equip();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 3:
                message.level = reader.int32();
                break;
            case 4:
                message.star = reader.int32();
                break;
            case 5:
                message.exp = reader.int32();
                break;
            case 6:
                message.onWho = reader.int32();
                break;
            case 7:
                message.pos = reader.int32();
                break;
            case 8:
                message.quality = reader.int32();
                break;
            case 9:
                message.levelProp = $root.CarryProp.decode(reader, reader.uint32());
                break;
            case 10:
                message.starProp = $root.CarryProp.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Equip.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Equip.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.star != null && message.hasOwnProperty("star"))
            if (!$util.isInteger(message.star))
                return "star: integer expected";
        if (message.exp != null && message.hasOwnProperty("exp"))
            if (!$util.isInteger(message.exp))
                return "exp: integer expected";
        if (message.onWho != null && message.hasOwnProperty("onWho"))
            if (!$util.isInteger(message.onWho))
                return "onWho: integer expected";
        if (message.pos != null && message.hasOwnProperty("pos"))
            if (!$util.isInteger(message.pos))
                return "pos: integer expected";
        if (message.quality != null && message.hasOwnProperty("quality"))
            switch (message.quality) {
            default:
                return "quality: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.levelProp != null && message.hasOwnProperty("levelProp")) {
            var error = $root.CarryProp.verify(message.levelProp);
            if (error)
                return "levelProp." + error;
        }
        if (message.starProp != null && message.hasOwnProperty("starProp")) {
            var error = $root.CarryProp.verify(message.starProp);
            if (error)
                return "starProp." + error;
        }
        return null;
    };
    Equip.fromObject = function fromObject(object) {
        if (object instanceof $root.Equip)
            return object;
        var message = new $root.Equip();
        if (object.level != null)
            message.level = object.level | 0;
        if (object.star != null)
            message.star = object.star | 0;
        if (object.exp != null)
            message.exp = object.exp | 0;
        if (object.onWho != null)
            message.onWho = object.onWho | 0;
        if (object.pos != null)
            message.pos = object.pos | 0;
        switch (object.quality) {
        case "QualityType_None":
        case 0:
            message.quality = 0;
            break;
        case "white":
        case 1:
            message.quality = 1;
            break;
        case "green":
        case 2:
            message.quality = 2;
            break;
        case "blue":
        case 3:
            message.quality = 3;
            break;
        case "purple":
        case 4:
            message.quality = 4;
            break;
        case "orange":
        case 5:
            message.quality = 5;
            break;
        }
        if (object.levelProp != null) {
            if (typeof object.levelProp !== "object")
                throw TypeError(".Equip.levelProp: object expected");
            message.levelProp = $root.CarryProp.fromObject(object.levelProp);
        }
        if (object.starProp != null) {
            if (typeof object.starProp !== "object")
                throw TypeError(".Equip.starProp: object expected");
            message.starProp = $root.CarryProp.fromObject(object.starProp);
        }
        return message;
    };
    Equip.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.level = 0;
            object.star = 0;
            object.exp = 0;
            object.onWho = 0;
            object.pos = 0;
            object.quality = options.enums === String ? "QualityType_None" : 0;
            object.levelProp = null;
            object.starProp = null;
        }
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.star != null && message.hasOwnProperty("star"))
            object.star = message.star;
        if (message.exp != null && message.hasOwnProperty("exp"))
            object.exp = message.exp;
        if (message.onWho != null && message.hasOwnProperty("onWho"))
            object.onWho = message.onWho;
        if (message.pos != null && message.hasOwnProperty("pos"))
            object.pos = message.pos;
        if (message.quality != null && message.hasOwnProperty("quality"))
            object.quality = options.enums === String ? $root.QualityType[message.quality] : message.quality;
        if (message.levelProp != null && message.hasOwnProperty("levelProp"))
            object.levelProp = $root.CarryProp.toObject(message.levelProp, options);
        if (message.starProp != null && message.hasOwnProperty("starProp"))
            object.starProp = $root.CarryProp.toObject(message.starProp, options);
        return object;
    };
    Equip.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Equip;
})();
$root.RedSpot = (function() {
    function RedSpot(properties) {
        this.subSpotList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    RedSpot.prototype.name = "";
    RedSpot.prototype.num = 0;
    RedSpot.prototype.subSpotList = $util.emptyArray;
    RedSpot.create = function create(properties) {
        return new RedSpot(properties);
    };
    RedSpot.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
        if (message.num != null && message.hasOwnProperty("num"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
        if (message.subSpotList != null && message.subSpotList.length)
            for (var i = 0; i < message.subSpotList.length; ++i)
                $root.RedSpot.encode(message.subSpotList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    RedSpot.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    RedSpot.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RedSpot();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.name = reader.string();
                break;
            case 2:
                message.num = reader.int32();
                break;
            case 3:
                if (!(message.subSpotList && message.subSpotList.length))
                    message.subSpotList = [];
                message.subSpotList.push($root.RedSpot.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    RedSpot.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    RedSpot.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.num != null && message.hasOwnProperty("num"))
            if (!$util.isInteger(message.num))
                return "num: integer expected";
        if (message.subSpotList != null && message.hasOwnProperty("subSpotList")) {
            if (!Array.isArray(message.subSpotList))
                return "subSpotList: array expected";
            for (var i = 0; i < message.subSpotList.length; ++i) {
                var error = $root.RedSpot.verify(message.subSpotList[i]);
                if (error)
                    return "subSpotList." + error;
            }
        }
        return null;
    };
    RedSpot.fromObject = function fromObject(object) {
        if (object instanceof $root.RedSpot)
            return object;
        var message = new $root.RedSpot();
        if (object.name != null)
            message.name = String(object.name);
        if (object.num != null)
            message.num = object.num | 0;
        if (object.subSpotList) {
            if (!Array.isArray(object.subSpotList))
                throw TypeError(".RedSpot.subSpotList: array expected");
            message.subSpotList = [];
            for (var i = 0; i < object.subSpotList.length; ++i) {
                if (typeof object.subSpotList[i] !== "object")
                    throw TypeError(".RedSpot.subSpotList: object expected");
                message.subSpotList[i] = $root.RedSpot.fromObject(object.subSpotList[i]);
            }
        }
        return message;
    };
    RedSpot.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.subSpotList = [];
        if (options.defaults) {
            object.name = "";
            object.num = 0;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.num != null && message.hasOwnProperty("num"))
            object.num = message.num;
        if (message.subSpotList && message.subSpotList.length) {
            object.subSpotList = [];
            for (var j = 0; j < message.subSpotList.length; ++j)
                object.subSpotList[j] = $root.RedSpot.toObject(message.subSpotList[j], options);
        }
        return object;
    };
    RedSpot.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return RedSpot;
})();
$root.SysOpenInfo = (function() {
    function SysOpenInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SysOpenInfo.prototype.sysId = 0;
    SysOpenInfo.prototype.timeStamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    SysOpenInfo.create = function create(properties) {
        return new SysOpenInfo(properties);
    };
    SysOpenInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.sysId != null && message.hasOwnProperty("sysId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sysId);
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timeStamp);
        return writer;
    };
    SysOpenInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SysOpenInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SysOpenInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.sysId = reader.int32();
                break;
            case 2:
                message.timeStamp = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SysOpenInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SysOpenInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.sysId != null && message.hasOwnProperty("sysId"))
            if (!$util.isInteger(message.sysId))
                return "sysId: integer expected";
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (!$util.isInteger(message.timeStamp) && !(message.timeStamp && $util.isInteger(message.timeStamp.low) && $util.isInteger(message.timeStamp.high)))
                return "timeStamp: integer|Long expected";
        return null;
    };
    SysOpenInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.SysOpenInfo)
            return object;
        var message = new $root.SysOpenInfo();
        if (object.sysId != null)
            message.sysId = object.sysId | 0;
        if (object.timeStamp != null)
            if ($util.Long)
                (message.timeStamp = $util.Long.fromValue(object.timeStamp)).unsigned = false;
            else if (typeof object.timeStamp === "string")
                message.timeStamp = parseInt(object.timeStamp, 10);
            else if (typeof object.timeStamp === "number")
                message.timeStamp = object.timeStamp;
            else if (typeof object.timeStamp === "object")
                message.timeStamp = new $util.LongBits(object.timeStamp.low >>> 0, object.timeStamp.high >>> 0).toNumber();
        return message;
    };
    SysOpenInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.sysId = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timeStamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timeStamp = options.longs === String ? "0" : 0;
        }
        if (message.sysId != null && message.hasOwnProperty("sysId"))
            object.sysId = message.sysId;
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (typeof message.timeStamp === "number")
                object.timeStamp = options.longs === String ? String(message.timeStamp) : message.timeStamp;
            else
                object.timeStamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeStamp) : options.longs === Number ? new $util.LongBits(message.timeStamp.low >>> 0, message.timeStamp.high >>> 0).toNumber() : message.timeStamp;
        return object;
    };
    SysOpenInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SysOpenInfo;
})();
$root.InviteMessage = (function() {
    function InviteMessage(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    InviteMessage.prototype.gid = 0;
    InviteMessage.prototype.timeStamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    InviteMessage.prototype.inviterGid = 0;
    InviteMessage.prototype.type = 0;
    InviteMessage.create = function create(properties) {
        return new InviteMessage(properties);
    };
    InviteMessage.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gid != null && message.hasOwnProperty("gid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gid);
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timeStamp);
        if (message.inviterGid != null && message.hasOwnProperty("inviterGid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.inviterGid);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
        return writer;
    };
    InviteMessage.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    InviteMessage.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.InviteMessage();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gid = reader.int32();
                break;
            case 2:
                message.timeStamp = reader.int64();
                break;
            case 3:
                message.inviterGid = reader.int32();
                break;
            case 4:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    InviteMessage.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    InviteMessage.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gid != null && message.hasOwnProperty("gid"))
            if (!$util.isInteger(message.gid))
                return "gid: integer expected";
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (!$util.isInteger(message.timeStamp) && !(message.timeStamp && $util.isInteger(message.timeStamp.low) && $util.isInteger(message.timeStamp.high)))
                return "timeStamp: integer|Long expected";
        if (message.inviterGid != null && message.hasOwnProperty("inviterGid"))
            if (!$util.isInteger(message.inviterGid))
                return "inviterGid: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        return null;
    };
    InviteMessage.fromObject = function fromObject(object) {
        if (object instanceof $root.InviteMessage)
            return object;
        var message = new $root.InviteMessage();
        if (object.gid != null)
            message.gid = object.gid | 0;
        if (object.timeStamp != null)
            if ($util.Long)
                (message.timeStamp = $util.Long.fromValue(object.timeStamp)).unsigned = false;
            else if (typeof object.timeStamp === "string")
                message.timeStamp = parseInt(object.timeStamp, 10);
            else if (typeof object.timeStamp === "number")
                message.timeStamp = object.timeStamp;
            else if (typeof object.timeStamp === "object")
                message.timeStamp = new $util.LongBits(object.timeStamp.low >>> 0, object.timeStamp.high >>> 0).toNumber();
        if (object.inviterGid != null)
            message.inviterGid = object.inviterGid | 0;
        if (object.type != null)
            message.type = object.type | 0;
        return message;
    };
    InviteMessage.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.gid = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timeStamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timeStamp = options.longs === String ? "0" : 0;
            object.inviterGid = 0;
            object.type = 0;
        }
        if (message.gid != null && message.hasOwnProperty("gid"))
            object.gid = message.gid;
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (typeof message.timeStamp === "number")
                object.timeStamp = options.longs === String ? String(message.timeStamp) : message.timeStamp;
            else
                object.timeStamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeStamp) : options.longs === Number ? new $util.LongBits(message.timeStamp.low >>> 0, message.timeStamp.high >>> 0).toNumber() : message.timeStamp;
        if (message.inviterGid != null && message.hasOwnProperty("inviterGid"))
            object.inviterGid = message.inviterGid;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        return object;
    };
    InviteMessage.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return InviteMessage;
})();
$root.Teamer = (function() {
    function Teamer(properties) {
        this.lastInviteList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Teamer.prototype.gamer = null;
    Teamer.prototype.hero = null;
    Teamer.prototype.isHelper = false;
    Teamer.prototype.isReady = false;
    Teamer.prototype.danInfo = null;
    Teamer.prototype.lastInviteList = $util.emptyArray;
    Teamer.prototype.secretLand = null;
    Teamer.create = function create(properties) {
        return new Teamer(properties);
    };
    Teamer.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gamer != null && message.hasOwnProperty("gamer"))
            $root.GamerMini.encode(message.gamer, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.hero != null && message.hasOwnProperty("hero"))
            $root.GamerHero.encode(message.hero, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.isHelper != null && message.hasOwnProperty("isHelper"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isHelper);
        if (message.isReady != null && message.hasOwnProperty("isReady"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isReady);
        if (message.danInfo != null && message.hasOwnProperty("danInfo"))
            $root.DanInfo.encode(message.danInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.lastInviteList != null && message.lastInviteList.length)
            for (var i = 0; i < message.lastInviteList.length; ++i)
                $root.InviteMessage.encode(message.lastInviteList[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            $root.GamerSecretLand.encode(message.secretLand, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        return writer;
    };
    Teamer.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Teamer.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Teamer();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gamer = $root.GamerMini.decode(reader, reader.uint32());
                break;
            case 2:
                message.hero = $root.GamerHero.decode(reader, reader.uint32());
                break;
            case 3:
                message.isHelper = reader.bool();
                break;
            case 4:
                message.isReady = reader.bool();
                break;
            case 5:
                message.danInfo = $root.DanInfo.decode(reader, reader.uint32());
                break;
            case 6:
                if (!(message.lastInviteList && message.lastInviteList.length))
                    message.lastInviteList = [];
                message.lastInviteList.push($root.InviteMessage.decode(reader, reader.uint32()));
                break;
            case 7:
                message.secretLand = $root.GamerSecretLand.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Teamer.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Teamer.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gamer != null && message.hasOwnProperty("gamer")) {
            var error = $root.GamerMini.verify(message.gamer);
            if (error)
                return "gamer." + error;
        }
        if (message.hero != null && message.hasOwnProperty("hero")) {
            var error = $root.GamerHero.verify(message.hero);
            if (error)
                return "hero." + error;
        }
        if (message.isHelper != null && message.hasOwnProperty("isHelper"))
            if (typeof message.isHelper !== "boolean")
                return "isHelper: boolean expected";
        if (message.isReady != null && message.hasOwnProperty("isReady"))
            if (typeof message.isReady !== "boolean")
                return "isReady: boolean expected";
        if (message.danInfo != null && message.hasOwnProperty("danInfo")) {
            var error = $root.DanInfo.verify(message.danInfo);
            if (error)
                return "danInfo." + error;
        }
        if (message.lastInviteList != null && message.hasOwnProperty("lastInviteList")) {
            if (!Array.isArray(message.lastInviteList))
                return "lastInviteList: array expected";
            for (var i = 0; i < message.lastInviteList.length; ++i) {
                var error = $root.InviteMessage.verify(message.lastInviteList[i]);
                if (error)
                    return "lastInviteList." + error;
            }
        }
        if (message.secretLand != null && message.hasOwnProperty("secretLand")) {
            var error = $root.GamerSecretLand.verify(message.secretLand);
            if (error)
                return "secretLand." + error;
        }
        return null;
    };
    Teamer.fromObject = function fromObject(object) {
        if (object instanceof $root.Teamer)
            return object;
        var message = new $root.Teamer();
        if (object.gamer != null) {
            if (typeof object.gamer !== "object")
                throw TypeError(".Teamer.gamer: object expected");
            message.gamer = $root.GamerMini.fromObject(object.gamer);
        }
        if (object.hero != null) {
            if (typeof object.hero !== "object")
                throw TypeError(".Teamer.hero: object expected");
            message.hero = $root.GamerHero.fromObject(object.hero);
        }
        if (object.isHelper != null)
            message.isHelper = Boolean(object.isHelper);
        if (object.isReady != null)
            message.isReady = Boolean(object.isReady);
        if (object.danInfo != null) {
            if (typeof object.danInfo !== "object")
                throw TypeError(".Teamer.danInfo: object expected");
            message.danInfo = $root.DanInfo.fromObject(object.danInfo);
        }
        if (object.lastInviteList) {
            if (!Array.isArray(object.lastInviteList))
                throw TypeError(".Teamer.lastInviteList: array expected");
            message.lastInviteList = [];
            for (var i = 0; i < object.lastInviteList.length; ++i) {
                if (typeof object.lastInviteList[i] !== "object")
                    throw TypeError(".Teamer.lastInviteList: object expected");
                message.lastInviteList[i] = $root.InviteMessage.fromObject(object.lastInviteList[i]);
            }
        }
        if (object.secretLand != null) {
            if (typeof object.secretLand !== "object")
                throw TypeError(".Teamer.secretLand: object expected");
            message.secretLand = $root.GamerSecretLand.fromObject(object.secretLand);
        }
        return message;
    };
    Teamer.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.lastInviteList = [];
        if (options.defaults) {
            object.gamer = null;
            object.hero = null;
            object.isHelper = false;
            object.isReady = false;
            object.danInfo = null;
            object.secretLand = null;
        }
        if (message.gamer != null && message.hasOwnProperty("gamer"))
            object.gamer = $root.GamerMini.toObject(message.gamer, options);
        if (message.hero != null && message.hasOwnProperty("hero"))
            object.hero = $root.GamerHero.toObject(message.hero, options);
        if (message.isHelper != null && message.hasOwnProperty("isHelper"))
            object.isHelper = message.isHelper;
        if (message.isReady != null && message.hasOwnProperty("isReady"))
            object.isReady = message.isReady;
        if (message.danInfo != null && message.hasOwnProperty("danInfo"))
            object.danInfo = $root.DanInfo.toObject(message.danInfo, options);
        if (message.lastInviteList && message.lastInviteList.length) {
            object.lastInviteList = [];
            for (var j = 0; j < message.lastInviteList.length; ++j)
                object.lastInviteList[j] = $root.InviteMessage.toObject(message.lastInviteList[j], options);
        }
        if (message.secretLand != null && message.hasOwnProperty("secretLand"))
            object.secretLand = $root.GamerSecretLand.toObject(message.secretLand, options);
        return object;
    };
    Teamer.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Teamer;
})();
$root.Team = (function() {
    function Team(properties) {
        this.memberList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Team.prototype.teamId = 0;
    Team.prototype.aim = 0;
    Team.prototype.leaderGid = 0;
    Team.prototype.lastInviteWolrd = 0;
    Team.prototype.name = "";
    Team.prototype.pvpType = 0;
    Team.prototype.status = 0;
    Team.prototype.memberList = $util.emptyArray;
    Team.create = function create(properties) {
        return new Team(properties);
    };
    Team.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.teamId);
        if (message.aim != null && message.hasOwnProperty("aim"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aim);
        if (message.leaderGid != null && message.hasOwnProperty("leaderGid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.leaderGid);
        if (message.lastInviteWolrd != null && message.hasOwnProperty("lastInviteWolrd"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.lastInviteWolrd);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);
        if (message.pvpType != null && message.hasOwnProperty("pvpType"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.pvpType);
        if (message.status != null && message.hasOwnProperty("status"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.status);
        if (message.memberList != null && message.memberList.length)
            for (var i = 0; i < message.memberList.length; ++i)
                $root.Teamer.encode(message.memberList[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        return writer;
    };
    Team.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Team.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Team();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.teamId = reader.uint32();
                break;
            case 2:
                message.aim = reader.int32();
                break;
            case 3:
                message.leaderGid = reader.int32();
                break;
            case 4:
                message.lastInviteWolrd = reader.int32();
                break;
            case 5:
                message.name = reader.string();
                break;
            case 6:
                message.pvpType = reader.int32();
                break;
            case 7:
                message.status = reader.int32();
                break;
            case 8:
                if (!(message.memberList && message.memberList.length))
                    message.memberList = [];
                message.memberList.push($root.Teamer.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Team.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Team.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            if (!$util.isInteger(message.teamId))
                return "teamId: integer expected";
        if (message.aim != null && message.hasOwnProperty("aim"))
            if (!$util.isInteger(message.aim))
                return "aim: integer expected";
        if (message.leaderGid != null && message.hasOwnProperty("leaderGid"))
            if (!$util.isInteger(message.leaderGid))
                return "leaderGid: integer expected";
        if (message.lastInviteWolrd != null && message.hasOwnProperty("lastInviteWolrd"))
            if (!$util.isInteger(message.lastInviteWolrd))
                return "lastInviteWolrd: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.pvpType != null && message.hasOwnProperty("pvpType"))
            switch (message.pvpType) {
            default:
                return "pvpType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
                break;
            }
        if (message.status != null && message.hasOwnProperty("status"))
            switch (message.status) {
            default:
                return "status: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.memberList != null && message.hasOwnProperty("memberList")) {
            if (!Array.isArray(message.memberList))
                return "memberList: array expected";
            for (var i = 0; i < message.memberList.length; ++i) {
                var error = $root.Teamer.verify(message.memberList[i]);
                if (error)
                    return "memberList." + error;
            }
        }
        return null;
    };
    Team.fromObject = function fromObject(object) {
        if (object instanceof $root.Team)
            return object;
        var message = new $root.Team();
        if (object.teamId != null)
            message.teamId = object.teamId >>> 0;
        if (object.aim != null)
            message.aim = object.aim | 0;
        if (object.leaderGid != null)
            message.leaderGid = object.leaderGid | 0;
        if (object.lastInviteWolrd != null)
            message.lastInviteWolrd = object.lastInviteWolrd | 0;
        if (object.name != null)
            message.name = String(object.name);
        switch (object.pvpType) {
        case "MINVALID":
        case 0:
            message.pvpType = 0;
            break;
        case "PVE_M1":
        case 1:
            message.pvpType = 1;
            break;
        case "PVE_M2":
        case 2:
            message.pvpType = 2;
            break;
        case "PVE_M3":
        case 3:
            message.pvpType = 3;
            break;
        case "PVE_M4":
        case 4:
            message.pvpType = 4;
            break;
        case "PVP_M1V1":
        case 100:
            message.pvpType = 100;
            break;
        case "PVP_M2V2":
        case 101:
            message.pvpType = 101;
            break;
        case "PVP_M3V3":
        case 102:
            message.pvpType = 102;
            break;
        case "PVP_M4V4":
        case 103:
            message.pvpType = 103;
            break;
        case "PVP_M5V5":
        case 104:
            message.pvpType = 104;
            break;
        }
        switch (object.status) {
        case "TeamState_None":
        case 0:
            message.status = 0;
            break;
        case "Normal":
        case 1:
            message.status = 1;
            break;
        case "InMatching":
        case 2:
            message.status = 2;
            break;
        }
        if (object.memberList) {
            if (!Array.isArray(object.memberList))
                throw TypeError(".Team.memberList: array expected");
            message.memberList = [];
            for (var i = 0; i < object.memberList.length; ++i) {
                if (typeof object.memberList[i] !== "object")
                    throw TypeError(".Team.memberList: object expected");
                message.memberList[i] = $root.Teamer.fromObject(object.memberList[i]);
            }
        }
        return message;
    };
    Team.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.memberList = [];
        if (options.defaults) {
            object.teamId = 0;
            object.aim = 0;
            object.leaderGid = 0;
            object.lastInviteWolrd = 0;
            object.name = "";
            object.pvpType = options.enums === String ? "MINVALID" : 0;
            object.status = options.enums === String ? "TeamState_None" : 0;
        }
        if (message.teamId != null && message.hasOwnProperty("teamId"))
            object.teamId = message.teamId;
        if (message.aim != null && message.hasOwnProperty("aim"))
            object.aim = message.aim;
        if (message.leaderGid != null && message.hasOwnProperty("leaderGid"))
            object.leaderGid = message.leaderGid;
        if (message.lastInviteWolrd != null && message.hasOwnProperty("lastInviteWolrd"))
            object.lastInviteWolrd = message.lastInviteWolrd;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.pvpType != null && message.hasOwnProperty("pvpType"))
            object.pvpType = options.enums === String ? $root.PVPType[message.pvpType] : message.pvpType;
        if (message.status != null && message.hasOwnProperty("status"))
            object.status = options.enums === String ? $root.TeamStatus[message.status] : message.status;
        if (message.memberList && message.memberList.length) {
            object.memberList = [];
            for (var j = 0; j < message.memberList.length; ++j)
                object.memberList[j] = $root.Teamer.toObject(message.memberList[j], options);
        }
        return object;
    };
    Team.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Team;
})();
$root.CheckPoint = (function() {
    function CheckPoint(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CheckPoint.prototype.id = 0;
    CheckPoint.prototype.type = 0;
    CheckPoint.prototype.star = 0;
    CheckPoint.prototype.hasFirstReward = false;
    CheckPoint.prototype.challengeTimes = 0;
    CheckPoint.prototype.lastChallengeTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    CheckPoint.create = function create(properties) {
        return new CheckPoint(properties);
    };
    CheckPoint.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.star != null && message.hasOwnProperty("star"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.star);
        if (message.hasFirstReward != null && message.hasOwnProperty("hasFirstReward"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.hasFirstReward);
        if (message.challengeTimes != null && message.hasOwnProperty("challengeTimes"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.challengeTimes);
        if (message.lastChallengeTime != null && message.hasOwnProperty("lastChallengeTime"))
            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.lastChallengeTime);
        return writer;
    };
    CheckPoint.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CheckPoint.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CheckPoint();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.star = reader.int32();
                break;
            case 4:
                message.hasFirstReward = reader.bool();
                break;
            case 5:
                message.challengeTimes = reader.int32();
                break;
            case 6:
                message.lastChallengeTime = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CheckPoint.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CheckPoint.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.star != null && message.hasOwnProperty("star"))
            if (!$util.isInteger(message.star))
                return "star: integer expected";
        if (message.hasFirstReward != null && message.hasOwnProperty("hasFirstReward"))
            if (typeof message.hasFirstReward !== "boolean")
                return "hasFirstReward: boolean expected";
        if (message.challengeTimes != null && message.hasOwnProperty("challengeTimes"))
            if (!$util.isInteger(message.challengeTimes))
                return "challengeTimes: integer expected";
        if (message.lastChallengeTime != null && message.hasOwnProperty("lastChallengeTime"))
            if (!$util.isInteger(message.lastChallengeTime) && !(message.lastChallengeTime && $util.isInteger(message.lastChallengeTime.low) && $util.isInteger(message.lastChallengeTime.high)))
                return "lastChallengeTime: integer|Long expected";
        return null;
    };
    CheckPoint.fromObject = function fromObject(object) {
        if (object instanceof $root.CheckPoint)
            return object;
        var message = new $root.CheckPoint();
        if (object.id != null)
            message.id = object.id | 0;
        switch (object.type) {
        case "CheckPointType_None":
        case 0:
            message.type = 0;
            break;
        case "Story":
        case 1:
            message.type = 1;
            break;
        case "Elite":
        case 2:
            message.type = 2;
            break;
        case "Devil":
        case 3:
            message.type = 3;
            break;
        case "SecretBook":
        case 4:
            message.type = 4;
            break;
        case "SecretLand":
        case 5:
            message.type = 5;
            break;
        }
        if (object.star != null)
            message.star = object.star | 0;
        if (object.hasFirstReward != null)
            message.hasFirstReward = Boolean(object.hasFirstReward);
        if (object.challengeTimes != null)
            message.challengeTimes = object.challengeTimes | 0;
        if (object.lastChallengeTime != null)
            if ($util.Long)
                (message.lastChallengeTime = $util.Long.fromValue(object.lastChallengeTime)).unsigned = false;
            else if (typeof object.lastChallengeTime === "string")
                message.lastChallengeTime = parseInt(object.lastChallengeTime, 10);
            else if (typeof object.lastChallengeTime === "number")
                message.lastChallengeTime = object.lastChallengeTime;
            else if (typeof object.lastChallengeTime === "object")
                message.lastChallengeTime = new $util.LongBits(object.lastChallengeTime.low >>> 0, object.lastChallengeTime.high >>> 0).toNumber();
        return message;
    };
    CheckPoint.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.type = options.enums === String ? "CheckPointType_None" : 0;
            object.star = 0;
            object.hasFirstReward = false;
            object.challengeTimes = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastChallengeTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastChallengeTime = options.longs === String ? "0" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.CheckPointType[message.type] : message.type;
        if (message.star != null && message.hasOwnProperty("star"))
            object.star = message.star;
        if (message.hasFirstReward != null && message.hasOwnProperty("hasFirstReward"))
            object.hasFirstReward = message.hasFirstReward;
        if (message.challengeTimes != null && message.hasOwnProperty("challengeTimes"))
            object.challengeTimes = message.challengeTimes;
        if (message.lastChallengeTime != null && message.hasOwnProperty("lastChallengeTime"))
            if (typeof message.lastChallengeTime === "number")
                object.lastChallengeTime = options.longs === String ? String(message.lastChallengeTime) : message.lastChallengeTime;
            else
                object.lastChallengeTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastChallengeTime) : options.longs === Number ? new $util.LongBits(message.lastChallengeTime.low >>> 0, message.lastChallengeTime.high >>> 0).toNumber() : message.lastChallengeTime;
        return object;
    };
    CheckPoint.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CheckPoint;
})();
$root.Chapter = (function() {
    function Chapter(properties) {
        this.plotChapterGradeIdList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Chapter.prototype.Id = 0;
    Chapter.prototype.plotStar = 0;
    Chapter.prototype.plotChapterGradeIdList = $util.emptyArray;
    Chapter.create = function create(properties) {
        return new Chapter(properties);
    };
    Chapter.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Id != null && message.hasOwnProperty("Id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
        if (message.plotStar != null && message.hasOwnProperty("plotStar"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.plotStar);
        if (message.plotChapterGradeIdList != null && message.plotChapterGradeIdList.length) {
            writer.uint32(/* id 3, wireType 2 =*/26).fork();
            for (var i = 0; i < message.plotChapterGradeIdList.length; ++i)
                writer.int32(message.plotChapterGradeIdList[i]);
            writer.ldelim();
        }
        return writer;
    };
    Chapter.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Chapter.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Chapter();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.Id = reader.int32();
                break;
            case 2:
                message.plotStar = reader.int32();
                break;
            case 3:
                if (!(message.plotChapterGradeIdList && message.plotChapterGradeIdList.length))
                    message.plotChapterGradeIdList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.plotChapterGradeIdList.push(reader.int32());
                } else
                    message.plotChapterGradeIdList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Chapter.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Chapter.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.Id != null && message.hasOwnProperty("Id"))
            if (!$util.isInteger(message.Id))
                return "Id: integer expected";
        if (message.plotStar != null && message.hasOwnProperty("plotStar"))
            if (!$util.isInteger(message.plotStar))
                return "plotStar: integer expected";
        if (message.plotChapterGradeIdList != null && message.hasOwnProperty("plotChapterGradeIdList")) {
            if (!Array.isArray(message.plotChapterGradeIdList))
                return "plotChapterGradeIdList: array expected";
            for (var i = 0; i < message.plotChapterGradeIdList.length; ++i)
                if (!$util.isInteger(message.plotChapterGradeIdList[i]))
                    return "plotChapterGradeIdList: integer[] expected";
        }
        return null;
    };
    Chapter.fromObject = function fromObject(object) {
        if (object instanceof $root.Chapter)
            return object;
        var message = new $root.Chapter();
        if (object.Id != null)
            message.Id = object.Id | 0;
        if (object.plotStar != null)
            message.plotStar = object.plotStar | 0;
        if (object.plotChapterGradeIdList) {
            if (!Array.isArray(object.plotChapterGradeIdList))
                throw TypeError(".Chapter.plotChapterGradeIdList: array expected");
            message.plotChapterGradeIdList = [];
            for (var i = 0; i < object.plotChapterGradeIdList.length; ++i)
                message.plotChapterGradeIdList[i] = object.plotChapterGradeIdList[i] | 0;
        }
        return message;
    };
    Chapter.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.plotChapterGradeIdList = [];
        if (options.defaults) {
            object.Id = 0;
            object.plotStar = 0;
        }
        if (message.Id != null && message.hasOwnProperty("Id"))
            object.Id = message.Id;
        if (message.plotStar != null && message.hasOwnProperty("plotStar"))
            object.plotStar = message.plotStar;
        if (message.plotChapterGradeIdList && message.plotChapterGradeIdList.length) {
            object.plotChapterGradeIdList = [];
            for (var j = 0; j < message.plotChapterGradeIdList.length; ++j)
                object.plotChapterGradeIdList[j] = message.plotChapterGradeIdList[j];
        }
        return object;
    };
    Chapter.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Chapter;
})();
$root.CheckPointData = (function() {
    function CheckPointData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CheckPointData.prototype.eliteTimes = 0;
    CheckPointData.prototype.eliteBuyTimes = 0;
    CheckPointData.prototype.devilTimes = 0;
    CheckPointData.prototype.devilBuyTimes = 0;
    CheckPointData.prototype.secretTimes = 0;
    CheckPointData.prototype.secretBuyTimes = 0;
    CheckPointData.prototype.resetTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    CheckPointData.create = function create(properties) {
        return new CheckPointData(properties);
    };
    CheckPointData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.eliteTimes != null && message.hasOwnProperty("eliteTimes"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eliteTimes);
        if (message.eliteBuyTimes != null && message.hasOwnProperty("eliteBuyTimes"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.eliteBuyTimes);
        if (message.devilTimes != null && message.hasOwnProperty("devilTimes"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.devilTimes);
        if (message.devilBuyTimes != null && message.hasOwnProperty("devilBuyTimes"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.devilBuyTimes);
        if (message.secretTimes != null && message.hasOwnProperty("secretTimes"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.secretTimes);
        if (message.secretBuyTimes != null && message.hasOwnProperty("secretBuyTimes"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.secretBuyTimes);
        if (message.resetTime != null && message.hasOwnProperty("resetTime"))
            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.resetTime);
        return writer;
    };
    CheckPointData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CheckPointData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CheckPointData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.eliteTimes = reader.int32();
                break;
            case 2:
                message.eliteBuyTimes = reader.int32();
                break;
            case 3:
                message.devilTimes = reader.int32();
                break;
            case 4:
                message.devilBuyTimes = reader.int32();
                break;
            case 5:
                message.secretTimes = reader.int32();
                break;
            case 6:
                message.secretBuyTimes = reader.int32();
                break;
            case 7:
                message.resetTime = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CheckPointData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CheckPointData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.eliteTimes != null && message.hasOwnProperty("eliteTimes"))
            if (!$util.isInteger(message.eliteTimes))
                return "eliteTimes: integer expected";
        if (message.eliteBuyTimes != null && message.hasOwnProperty("eliteBuyTimes"))
            if (!$util.isInteger(message.eliteBuyTimes))
                return "eliteBuyTimes: integer expected";
        if (message.devilTimes != null && message.hasOwnProperty("devilTimes"))
            if (!$util.isInteger(message.devilTimes))
                return "devilTimes: integer expected";
        if (message.devilBuyTimes != null && message.hasOwnProperty("devilBuyTimes"))
            if (!$util.isInteger(message.devilBuyTimes))
                return "devilBuyTimes: integer expected";
        if (message.secretTimes != null && message.hasOwnProperty("secretTimes"))
            if (!$util.isInteger(message.secretTimes))
                return "secretTimes: integer expected";
        if (message.secretBuyTimes != null && message.hasOwnProperty("secretBuyTimes"))
            if (!$util.isInteger(message.secretBuyTimes))
                return "secretBuyTimes: integer expected";
        if (message.resetTime != null && message.hasOwnProperty("resetTime"))
            if (!$util.isInteger(message.resetTime) && !(message.resetTime && $util.isInteger(message.resetTime.low) && $util.isInteger(message.resetTime.high)))
                return "resetTime: integer|Long expected";
        return null;
    };
    CheckPointData.fromObject = function fromObject(object) {
        if (object instanceof $root.CheckPointData)
            return object;
        var message = new $root.CheckPointData();
        if (object.eliteTimes != null)
            message.eliteTimes = object.eliteTimes | 0;
        if (object.eliteBuyTimes != null)
            message.eliteBuyTimes = object.eliteBuyTimes | 0;
        if (object.devilTimes != null)
            message.devilTimes = object.devilTimes | 0;
        if (object.devilBuyTimes != null)
            message.devilBuyTimes = object.devilBuyTimes | 0;
        if (object.secretTimes != null)
            message.secretTimes = object.secretTimes | 0;
        if (object.secretBuyTimes != null)
            message.secretBuyTimes = object.secretBuyTimes | 0;
        if (object.resetTime != null)
            if ($util.Long)
                (message.resetTime = $util.Long.fromValue(object.resetTime)).unsigned = false;
            else if (typeof object.resetTime === "string")
                message.resetTime = parseInt(object.resetTime, 10);
            else if (typeof object.resetTime === "number")
                message.resetTime = object.resetTime;
            else if (typeof object.resetTime === "object")
                message.resetTime = new $util.LongBits(object.resetTime.low >>> 0, object.resetTime.high >>> 0).toNumber();
        return message;
    };
    CheckPointData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.eliteTimes = 0;
            object.eliteBuyTimes = 0;
            object.devilTimes = 0;
            object.devilBuyTimes = 0;
            object.secretTimes = 0;
            object.secretBuyTimes = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.resetTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.resetTime = options.longs === String ? "0" : 0;
        }
        if (message.eliteTimes != null && message.hasOwnProperty("eliteTimes"))
            object.eliteTimes = message.eliteTimes;
        if (message.eliteBuyTimes != null && message.hasOwnProperty("eliteBuyTimes"))
            object.eliteBuyTimes = message.eliteBuyTimes;
        if (message.devilTimes != null && message.hasOwnProperty("devilTimes"))
            object.devilTimes = message.devilTimes;
        if (message.devilBuyTimes != null && message.hasOwnProperty("devilBuyTimes"))
            object.devilBuyTimes = message.devilBuyTimes;
        if (message.secretTimes != null && message.hasOwnProperty("secretTimes"))
            object.secretTimes = message.secretTimes;
        if (message.secretBuyTimes != null && message.hasOwnProperty("secretBuyTimes"))
            object.secretBuyTimes = message.secretBuyTimes;
        if (message.resetTime != null && message.hasOwnProperty("resetTime"))
            if (typeof message.resetTime === "number")
                object.resetTime = options.longs === String ? String(message.resetTime) : message.resetTime;
            else
                object.resetTime = options.longs === String ? $util.Long.prototype.toString.call(message.resetTime) : options.longs === Number ? new $util.LongBits(message.resetTime.low >>> 0, message.resetTime.high >>> 0).toNumber() : message.resetTime;
        return object;
    };
    CheckPointData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CheckPointData;
})();
$root.Prop = (function() {
    function Prop(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Prop.prototype.id = 0;
    Prop.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    Prop.create = function create(properties) {
        return new Prop(properties);
    };
    Prop.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.value != null && message.hasOwnProperty("value"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.value);
        return writer;
    };
    Prop.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Prop.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Prop();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.value = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Prop.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Prop.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                return "value: integer|Long expected";
        return null;
    };
    Prop.fromObject = function fromObject(object) {
        if (object instanceof $root.Prop)
            return object;
        var message = new $root.Prop();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.value != null)
            if ($util.Long)
                (message.value = $util.Long.fromValue(object.value)).unsigned = true;
            else if (typeof object.value === "string")
                message.value = parseInt(object.value, 10);
            else if (typeof object.value === "number")
                message.value = object.value;
            else if (typeof object.value === "object")
                message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber(true);
        return message;
    };
    Prop.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.value = options.longs === String ? "0" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.value != null && message.hasOwnProperty("value"))
            if (typeof message.value === "number")
                object.value = options.longs === String ? String(message.value) : message.value;
            else
                object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber(true) : message.value;
        return object;
    };
    Prop.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Prop;
})();
$root.Skill = (function() {
    function Skill(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Skill.prototype.id = 0;
    Skill.prototype.lv = 0;
    Skill.create = function create(properties) {
        return new Skill(properties);
    };
    Skill.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.lv != null && message.hasOwnProperty("lv"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.lv);
        return writer;
    };
    Skill.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Skill.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Skill();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.lv = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Skill.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Skill.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.lv != null && message.hasOwnProperty("lv"))
            if (!$util.isInteger(message.lv))
                return "lv: integer expected";
        return null;
    };
    Skill.fromObject = function fromObject(object) {
        if (object instanceof $root.Skill)
            return object;
        var message = new $root.Skill();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.lv != null)
            message.lv = object.lv | 0;
        return message;
    };
    Skill.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.lv = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.lv != null && message.hasOwnProperty("lv"))
            object.lv = message.lv;
        return object;
    };
    Skill.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Skill;
})();
$root.GamerHero = (function() {
    function GamerHero(properties) {
        this.skillList = [];
        this.equipList = [];
        this.draugList = [];
        this.baseProp = [];
        this.allProp = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerHero.prototype.id = 0;
    GamerHero.prototype.name = "";
    GamerHero.prototype.level = 0;
    GamerHero.prototype.exp = 0;
    GamerHero.prototype.quality = 0;
    GamerHero.prototype.star = 0;
    GamerHero.prototype.inBattle = false;
    GamerHero.prototype.skillList = $util.emptyArray;
    GamerHero.prototype.equipList = $util.emptyArray;
    GamerHero.prototype.draugList = $util.emptyArray;
    GamerHero.prototype.baseProp = $util.emptyArray;
    GamerHero.prototype.allProp = $util.emptyArray;
    GamerHero.prototype.skin = 0;
    GamerHero.prototype.teamSkill = 0;
    GamerHero.prototype.commSkill = 0;
    GamerHero.prototype.isSaw = false;
    GamerHero.create = function create(properties) {
        return new GamerHero(properties);
    };
    GamerHero.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.level);
        if (message.exp != null && message.hasOwnProperty("exp"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.exp);
        if (message.quality != null && message.hasOwnProperty("quality"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.quality);
        if (message.star != null && message.hasOwnProperty("star"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.star);
        if (message.inBattle != null && message.hasOwnProperty("inBattle"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.inBattle);
        if (message.skillList != null && message.skillList.length)
            for (var i = 0; i < message.skillList.length; ++i)
                $root.Skill.encode(message.skillList[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.equipList != null && message.equipList.length)
            for (var i = 0; i < message.equipList.length; ++i)
                $root.GameItem.encode(message.equipList[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.draugList != null && message.draugList.length)
            for (var i = 0; i < message.draugList.length; ++i)
                $root.Draug.encode(message.draugList[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.baseProp != null && message.baseProp.length)
            for (var i = 0; i < message.baseProp.length; ++i)
                $root.Prop.encode(message.baseProp[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.allProp != null && message.allProp.length)
            for (var i = 0; i < message.allProp.length; ++i)
                $root.Prop.encode(message.allProp[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.skin != null && message.hasOwnProperty("skin"))
            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.skin);
        if (message.teamSkill != null && message.hasOwnProperty("teamSkill"))
            writer.uint32(/* id 15, wireType 0 =*/120).int32(message.teamSkill);
        if (message.commSkill != null && message.hasOwnProperty("commSkill"))
            writer.uint32(/* id 16, wireType 0 =*/128).int32(message.commSkill);
        if (message.isSaw != null && message.hasOwnProperty("isSaw"))
            writer.uint32(/* id 17, wireType 0 =*/136).bool(message.isSaw);
        return writer;
    };
    GamerHero.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerHero.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerHero();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.level = reader.int32();
                break;
            case 4:
                message.exp = reader.int32();
                break;
            case 5:
                message.quality = reader.int32();
                break;
            case 6:
                message.star = reader.int32();
                break;
            case 7:
                message.inBattle = reader.bool();
                break;
            case 8:
                if (!(message.skillList && message.skillList.length))
                    message.skillList = [];
                message.skillList.push($root.Skill.decode(reader, reader.uint32()));
                break;
            case 9:
                if (!(message.equipList && message.equipList.length))
                    message.equipList = [];
                message.equipList.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            case 10:
                if (!(message.draugList && message.draugList.length))
                    message.draugList = [];
                message.draugList.push($root.Draug.decode(reader, reader.uint32()));
                break;
            case 12:
                if (!(message.baseProp && message.baseProp.length))
                    message.baseProp = [];
                message.baseProp.push($root.Prop.decode(reader, reader.uint32()));
                break;
            case 13:
                if (!(message.allProp && message.allProp.length))
                    message.allProp = [];
                message.allProp.push($root.Prop.decode(reader, reader.uint32()));
                break;
            case 14:
                message.skin = reader.int32();
                break;
            case 15:
                message.teamSkill = reader.int32();
                break;
            case 16:
                message.commSkill = reader.int32();
                break;
            case 17:
                message.isSaw = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerHero.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerHero.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.exp != null && message.hasOwnProperty("exp"))
            if (!$util.isInteger(message.exp))
                return "exp: integer expected";
        if (message.quality != null && message.hasOwnProperty("quality"))
            if (!$util.isInteger(message.quality))
                return "quality: integer expected";
        if (message.star != null && message.hasOwnProperty("star"))
            if (!$util.isInteger(message.star))
                return "star: integer expected";
        if (message.inBattle != null && message.hasOwnProperty("inBattle"))
            if (typeof message.inBattle !== "boolean")
                return "inBattle: boolean expected";
        if (message.skillList != null && message.hasOwnProperty("skillList")) {
            if (!Array.isArray(message.skillList))
                return "skillList: array expected";
            for (var i = 0; i < message.skillList.length; ++i) {
                var error = $root.Skill.verify(message.skillList[i]);
                if (error)
                    return "skillList." + error;
            }
        }
        if (message.equipList != null && message.hasOwnProperty("equipList")) {
            if (!Array.isArray(message.equipList))
                return "equipList: array expected";
            for (var i = 0; i < message.equipList.length; ++i) {
                var error = $root.GameItem.verify(message.equipList[i]);
                if (error)
                    return "equipList." + error;
            }
        }
        if (message.draugList != null && message.hasOwnProperty("draugList")) {
            if (!Array.isArray(message.draugList))
                return "draugList: array expected";
            for (var i = 0; i < message.draugList.length; ++i) {
                var error = $root.Draug.verify(message.draugList[i]);
                if (error)
                    return "draugList." + error;
            }
        }
        if (message.baseProp != null && message.hasOwnProperty("baseProp")) {
            if (!Array.isArray(message.baseProp))
                return "baseProp: array expected";
            for (var i = 0; i < message.baseProp.length; ++i) {
                var error = $root.Prop.verify(message.baseProp[i]);
                if (error)
                    return "baseProp." + error;
            }
        }
        if (message.allProp != null && message.hasOwnProperty("allProp")) {
            if (!Array.isArray(message.allProp))
                return "allProp: array expected";
            for (var i = 0; i < message.allProp.length; ++i) {
                var error = $root.Prop.verify(message.allProp[i]);
                if (error)
                    return "allProp." + error;
            }
        }
        if (message.skin != null && message.hasOwnProperty("skin"))
            if (!$util.isInteger(message.skin))
                return "skin: integer expected";
        if (message.teamSkill != null && message.hasOwnProperty("teamSkill"))
            if (!$util.isInteger(message.teamSkill))
                return "teamSkill: integer expected";
        if (message.commSkill != null && message.hasOwnProperty("commSkill"))
            if (!$util.isInteger(message.commSkill))
                return "commSkill: integer expected";
        if (message.isSaw != null && message.hasOwnProperty("isSaw"))
            if (typeof message.isSaw !== "boolean")
                return "isSaw: boolean expected";
        return null;
    };
    GamerHero.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerHero)
            return object;
        var message = new $root.GamerHero();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.level != null)
            message.level = object.level | 0;
        if (object.exp != null)
            message.exp = object.exp | 0;
        if (object.quality != null)
            message.quality = object.quality | 0;
        if (object.star != null)
            message.star = object.star | 0;
        if (object.inBattle != null)
            message.inBattle = Boolean(object.inBattle);
        if (object.skillList) {
            if (!Array.isArray(object.skillList))
                throw TypeError(".GamerHero.skillList: array expected");
            message.skillList = [];
            for (var i = 0; i < object.skillList.length; ++i) {
                if (typeof object.skillList[i] !== "object")
                    throw TypeError(".GamerHero.skillList: object expected");
                message.skillList[i] = $root.Skill.fromObject(object.skillList[i]);
            }
        }
        if (object.equipList) {
            if (!Array.isArray(object.equipList))
                throw TypeError(".GamerHero.equipList: array expected");
            message.equipList = [];
            for (var i = 0; i < object.equipList.length; ++i) {
                if (typeof object.equipList[i] !== "object")
                    throw TypeError(".GamerHero.equipList: object expected");
                message.equipList[i] = $root.GameItem.fromObject(object.equipList[i]);
            }
        }
        if (object.draugList) {
            if (!Array.isArray(object.draugList))
                throw TypeError(".GamerHero.draugList: array expected");
            message.draugList = [];
            for (var i = 0; i < object.draugList.length; ++i) {
                if (typeof object.draugList[i] !== "object")
                    throw TypeError(".GamerHero.draugList: object expected");
                message.draugList[i] = $root.Draug.fromObject(object.draugList[i]);
            }
        }
        if (object.baseProp) {
            if (!Array.isArray(object.baseProp))
                throw TypeError(".GamerHero.baseProp: array expected");
            message.baseProp = [];
            for (var i = 0; i < object.baseProp.length; ++i) {
                if (typeof object.baseProp[i] !== "object")
                    throw TypeError(".GamerHero.baseProp: object expected");
                message.baseProp[i] = $root.Prop.fromObject(object.baseProp[i]);
            }
        }
        if (object.allProp) {
            if (!Array.isArray(object.allProp))
                throw TypeError(".GamerHero.allProp: array expected");
            message.allProp = [];
            for (var i = 0; i < object.allProp.length; ++i) {
                if (typeof object.allProp[i] !== "object")
                    throw TypeError(".GamerHero.allProp: object expected");
                message.allProp[i] = $root.Prop.fromObject(object.allProp[i]);
            }
        }
        if (object.skin != null)
            message.skin = object.skin | 0;
        if (object.teamSkill != null)
            message.teamSkill = object.teamSkill | 0;
        if (object.commSkill != null)
            message.commSkill = object.commSkill | 0;
        if (object.isSaw != null)
            message.isSaw = Boolean(object.isSaw);
        return message;
    };
    GamerHero.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.skillList = [];
            object.equipList = [];
            object.draugList = [];
            object.baseProp = [];
            object.allProp = [];
        }
        if (options.defaults) {
            object.id = 0;
            object.name = "";
            object.level = 0;
            object.exp = 0;
            object.quality = 0;
            object.star = 0;
            object.inBattle = false;
            object.skin = 0;
            object.teamSkill = 0;
            object.commSkill = 0;
            object.isSaw = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.exp != null && message.hasOwnProperty("exp"))
            object.exp = message.exp;
        if (message.quality != null && message.hasOwnProperty("quality"))
            object.quality = message.quality;
        if (message.star != null && message.hasOwnProperty("star"))
            object.star = message.star;
        if (message.inBattle != null && message.hasOwnProperty("inBattle"))
            object.inBattle = message.inBattle;
        if (message.skillList && message.skillList.length) {
            object.skillList = [];
            for (var j = 0; j < message.skillList.length; ++j)
                object.skillList[j] = $root.Skill.toObject(message.skillList[j], options);
        }
        if (message.equipList && message.equipList.length) {
            object.equipList = [];
            for (var j = 0; j < message.equipList.length; ++j)
                object.equipList[j] = $root.GameItem.toObject(message.equipList[j], options);
        }
        if (message.draugList && message.draugList.length) {
            object.draugList = [];
            for (var j = 0; j < message.draugList.length; ++j)
                object.draugList[j] = $root.Draug.toObject(message.draugList[j], options);
        }
        if (message.baseProp && message.baseProp.length) {
            object.baseProp = [];
            for (var j = 0; j < message.baseProp.length; ++j)
                object.baseProp[j] = $root.Prop.toObject(message.baseProp[j], options);
        }
        if (message.allProp && message.allProp.length) {
            object.allProp = [];
            for (var j = 0; j < message.allProp.length; ++j)
                object.allProp[j] = $root.Prop.toObject(message.allProp[j], options);
        }
        if (message.skin != null && message.hasOwnProperty("skin"))
            object.skin = message.skin;
        if (message.teamSkill != null && message.hasOwnProperty("teamSkill"))
            object.teamSkill = message.teamSkill;
        if (message.commSkill != null && message.hasOwnProperty("commSkill"))
            object.commSkill = message.commSkill;
        if (message.isSaw != null && message.hasOwnProperty("isSaw"))
            object.isSaw = message.isSaw;
        return object;
    };
    GamerHero.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerHero;
})();
$root.BagType = (function() {
    function BagType(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BagType.prototype.id = 0;
    BagType.prototype.common = 0;
    BagType.prototype.equipment = 0;
    BagType.prototype.heroPieces = 0;
    BagType.create = function create(properties) {
        return new BagType(properties);
    };
    BagType.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.common != null && message.hasOwnProperty("common"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.common);
        if (message.equipment != null && message.hasOwnProperty("equipment"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.equipment);
        if (message.heroPieces != null && message.hasOwnProperty("heroPieces"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.heroPieces);
        return writer;
    };
    BagType.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BagType.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BagType();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.common = reader.int32();
                break;
            case 3:
                message.equipment = reader.int32();
                break;
            case 4:
                message.heroPieces = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BagType.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BagType.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.common != null && message.hasOwnProperty("common"))
            if (!$util.isInteger(message.common))
                return "common: integer expected";
        if (message.equipment != null && message.hasOwnProperty("equipment"))
            if (!$util.isInteger(message.equipment))
                return "equipment: integer expected";
        if (message.heroPieces != null && message.hasOwnProperty("heroPieces"))
            if (!$util.isInteger(message.heroPieces))
                return "heroPieces: integer expected";
        return null;
    };
    BagType.fromObject = function fromObject(object) {
        if (object instanceof $root.BagType)
            return object;
        var message = new $root.BagType();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.common != null)
            message.common = object.common | 0;
        if (object.equipment != null)
            message.equipment = object.equipment | 0;
        if (object.heroPieces != null)
            message.heroPieces = object.heroPieces | 0;
        return message;
    };
    BagType.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.common = 0;
            object.equipment = 0;
            object.heroPieces = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.common != null && message.hasOwnProperty("common"))
            object.common = message.common;
        if (message.equipment != null && message.hasOwnProperty("equipment"))
            object.equipment = message.equipment;
        if (message.heroPieces != null && message.hasOwnProperty("heroPieces"))
            object.heroPieces = message.heroPieces;
        return object;
    };
    BagType.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BagType;
})();
$root.DanInfo = (function() {
    function DanInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DanInfo.prototype.danId = 0;
    DanInfo.prototype.star = 0;
    DanInfo.prototype.rewardPoint = 0;
    DanInfo.prototype.seasonId = 0;
    DanInfo.prototype.BattleTimes = 0;
    DanInfo.prototype.BattleWinTimes = 0;
    DanInfo.prototype.eloPoint = 0;
    DanInfo.prototype.winStreak = 0;
    DanInfo.prototype.loseStreak = 0;
    DanInfo.create = function create(properties) {
        return new DanInfo(properties);
    };
    DanInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.danId != null && message.hasOwnProperty("danId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.danId);
        if (message.star != null && message.hasOwnProperty("star"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.star);
        if (message.rewardPoint != null && message.hasOwnProperty("rewardPoint"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.rewardPoint);
        if (message.seasonId != null && message.hasOwnProperty("seasonId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.seasonId);
        if (message.BattleTimes != null && message.hasOwnProperty("BattleTimes"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.BattleTimes);
        if (message.BattleWinTimes != null && message.hasOwnProperty("BattleWinTimes"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.BattleWinTimes);
        if (message.eloPoint != null && message.hasOwnProperty("eloPoint"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.eloPoint);
        if (message.winStreak != null && message.hasOwnProperty("winStreak"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.winStreak);
        if (message.loseStreak != null && message.hasOwnProperty("loseStreak"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.loseStreak);
        return writer;
    };
    DanInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DanInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DanInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.danId = reader.int32();
                break;
            case 2:
                message.star = reader.int32();
                break;
            case 3:
                message.rewardPoint = reader.int32();
                break;
            case 4:
                message.seasonId = reader.int32();
                break;
            case 5:
                message.BattleTimes = reader.int32();
                break;
            case 6:
                message.BattleWinTimes = reader.int32();
                break;
            case 7:
                message.eloPoint = reader.int32();
                break;
            case 8:
                message.winStreak = reader.int32();
                break;
            case 9:
                message.loseStreak = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DanInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DanInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.danId != null && message.hasOwnProperty("danId"))
            if (!$util.isInteger(message.danId))
                return "danId: integer expected";
        if (message.star != null && message.hasOwnProperty("star"))
            if (!$util.isInteger(message.star))
                return "star: integer expected";
        if (message.rewardPoint != null && message.hasOwnProperty("rewardPoint"))
            if (!$util.isInteger(message.rewardPoint))
                return "rewardPoint: integer expected";
        if (message.seasonId != null && message.hasOwnProperty("seasonId"))
            if (!$util.isInteger(message.seasonId))
                return "seasonId: integer expected";
        if (message.BattleTimes != null && message.hasOwnProperty("BattleTimes"))
            if (!$util.isInteger(message.BattleTimes))
                return "BattleTimes: integer expected";
        if (message.BattleWinTimes != null && message.hasOwnProperty("BattleWinTimes"))
            if (!$util.isInteger(message.BattleWinTimes))
                return "BattleWinTimes: integer expected";
        if (message.eloPoint != null && message.hasOwnProperty("eloPoint"))
            if (!$util.isInteger(message.eloPoint))
                return "eloPoint: integer expected";
        if (message.winStreak != null && message.hasOwnProperty("winStreak"))
            if (!$util.isInteger(message.winStreak))
                return "winStreak: integer expected";
        if (message.loseStreak != null && message.hasOwnProperty("loseStreak"))
            if (!$util.isInteger(message.loseStreak))
                return "loseStreak: integer expected";
        return null;
    };
    DanInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.DanInfo)
            return object;
        var message = new $root.DanInfo();
        if (object.danId != null)
            message.danId = object.danId | 0;
        if (object.star != null)
            message.star = object.star | 0;
        if (object.rewardPoint != null)
            message.rewardPoint = object.rewardPoint | 0;
        if (object.seasonId != null)
            message.seasonId = object.seasonId | 0;
        if (object.BattleTimes != null)
            message.BattleTimes = object.BattleTimes | 0;
        if (object.BattleWinTimes != null)
            message.BattleWinTimes = object.BattleWinTimes | 0;
        if (object.eloPoint != null)
            message.eloPoint = object.eloPoint | 0;
        if (object.winStreak != null)
            message.winStreak = object.winStreak | 0;
        if (object.loseStreak != null)
            message.loseStreak = object.loseStreak | 0;
        return message;
    };
    DanInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.danId = 0;
            object.star = 0;
            object.rewardPoint = 0;
            object.seasonId = 0;
            object.BattleTimes = 0;
            object.BattleWinTimes = 0;
            object.eloPoint = 0;
            object.winStreak = 0;
            object.loseStreak = 0;
        }
        if (message.danId != null && message.hasOwnProperty("danId"))
            object.danId = message.danId;
        if (message.star != null && message.hasOwnProperty("star"))
            object.star = message.star;
        if (message.rewardPoint != null && message.hasOwnProperty("rewardPoint"))
            object.rewardPoint = message.rewardPoint;
        if (message.seasonId != null && message.hasOwnProperty("seasonId"))
            object.seasonId = message.seasonId;
        if (message.BattleTimes != null && message.hasOwnProperty("BattleTimes"))
            object.BattleTimes = message.BattleTimes;
        if (message.BattleWinTimes != null && message.hasOwnProperty("BattleWinTimes"))
            object.BattleWinTimes = message.BattleWinTimes;
        if (message.eloPoint != null && message.hasOwnProperty("eloPoint"))
            object.eloPoint = message.eloPoint;
        if (message.winStreak != null && message.hasOwnProperty("winStreak"))
            object.winStreak = message.winStreak;
        if (message.loseStreak != null && message.hasOwnProperty("loseStreak"))
            object.loseStreak = message.loseStreak;
        return object;
    };
    DanInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DanInfo;
})();
$root.GamerDan = (function() {
    function GamerDan(properties) {
        this.historyDanInfo = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerDan.prototype.curDanInfo = null;
    GamerDan.prototype.historyDanInfo = $util.emptyArray;
    GamerDan.create = function create(properties) {
        return new GamerDan(properties);
    };
    GamerDan.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.curDanInfo != null && message.hasOwnProperty("curDanInfo"))
            $root.DanInfo.encode(message.curDanInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.historyDanInfo != null && message.historyDanInfo.length)
            for (var i = 0; i < message.historyDanInfo.length; ++i)
                $root.DanInfo.encode(message.historyDanInfo[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerDan.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerDan.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerDan();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.curDanInfo = $root.DanInfo.decode(reader, reader.uint32());
                break;
            case 2:
                if (!(message.historyDanInfo && message.historyDanInfo.length))
                    message.historyDanInfo = [];
                message.historyDanInfo.push($root.DanInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerDan.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerDan.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.curDanInfo != null && message.hasOwnProperty("curDanInfo")) {
            var error = $root.DanInfo.verify(message.curDanInfo);
            if (error)
                return "curDanInfo." + error;
        }
        if (message.historyDanInfo != null && message.hasOwnProperty("historyDanInfo")) {
            if (!Array.isArray(message.historyDanInfo))
                return "historyDanInfo: array expected";
            for (var i = 0; i < message.historyDanInfo.length; ++i) {
                var error = $root.DanInfo.verify(message.historyDanInfo[i]);
                if (error)
                    return "historyDanInfo." + error;
            }
        }
        return null;
    };
    GamerDan.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerDan)
            return object;
        var message = new $root.GamerDan();
        if (object.curDanInfo != null) {
            if (typeof object.curDanInfo !== "object")
                throw TypeError(".GamerDan.curDanInfo: object expected");
            message.curDanInfo = $root.DanInfo.fromObject(object.curDanInfo);
        }
        if (object.historyDanInfo) {
            if (!Array.isArray(object.historyDanInfo))
                throw TypeError(".GamerDan.historyDanInfo: array expected");
            message.historyDanInfo = [];
            for (var i = 0; i < object.historyDanInfo.length; ++i) {
                if (typeof object.historyDanInfo[i] !== "object")
                    throw TypeError(".GamerDan.historyDanInfo: object expected");
                message.historyDanInfo[i] = $root.DanInfo.fromObject(object.historyDanInfo[i]);
            }
        }
        return message;
    };
    GamerDan.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.historyDanInfo = [];
        if (options.defaults)
            object.curDanInfo = null;
        if (message.curDanInfo != null && message.hasOwnProperty("curDanInfo"))
            object.curDanInfo = $root.DanInfo.toObject(message.curDanInfo, options);
        if (message.historyDanInfo && message.historyDanInfo.length) {
            object.historyDanInfo = [];
            for (var j = 0; j < message.historyDanInfo.length; ++j)
                object.historyDanInfo[j] = $root.DanInfo.toObject(message.historyDanInfo[j], options);
        }
        return object;
    };
    GamerDan.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerDan;
})();
$root.GamerQuest = (function() {
    function GamerQuest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerQuest.prototype.id = 0;
    GamerQuest.prototype.name = "";
    GamerQuest.prototype.N = 0;
    GamerQuest.prototype.nowCount = 0;
    GamerQuest.prototype.status = 0;
    GamerQuest.prototype.acceptTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerQuest.prototype.preCount = 0;
    GamerQuest.prototype.type = 0;
    GamerQuest.create = function create(properties) {
        return new GamerQuest(properties);
    };
    GamerQuest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.N != null && message.hasOwnProperty("N"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.N);
        if (message.nowCount != null && message.hasOwnProperty("nowCount"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.nowCount);
        if (message.status != null && message.hasOwnProperty("status"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.status);
        if (message.acceptTime != null && message.hasOwnProperty("acceptTime"))
            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.acceptTime);
        if (message.preCount != null && message.hasOwnProperty("preCount"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.preCount);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.type);
        return writer;
    };
    GamerQuest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerQuest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerQuest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.N = reader.int32();
                break;
            case 4:
                message.nowCount = reader.int32();
                break;
            case 5:
                message.status = reader.int32();
                break;
            case 6:
                message.acceptTime = reader.int64();
                break;
            case 7:
                message.preCount = reader.int32();
                break;
            case 8:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerQuest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerQuest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.N != null && message.hasOwnProperty("N"))
            if (!$util.isInteger(message.N))
                return "N: integer expected";
        if (message.nowCount != null && message.hasOwnProperty("nowCount"))
            if (!$util.isInteger(message.nowCount))
                return "nowCount: integer expected";
        if (message.status != null && message.hasOwnProperty("status"))
            switch (message.status) {
            default:
                return "status: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.acceptTime != null && message.hasOwnProperty("acceptTime"))
            if (!$util.isInteger(message.acceptTime) && !(message.acceptTime && $util.isInteger(message.acceptTime.low) && $util.isInteger(message.acceptTime.high)))
                return "acceptTime: integer|Long expected";
        if (message.preCount != null && message.hasOwnProperty("preCount"))
            if (!$util.isInteger(message.preCount))
                return "preCount: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        return null;
    };
    GamerQuest.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerQuest)
            return object;
        var message = new $root.GamerQuest();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.N != null)
            message.N = object.N | 0;
        if (object.nowCount != null)
            message.nowCount = object.nowCount | 0;
        switch (object.status) {
        case "QuestLocked":
        case 0:
            message.status = 0;
            break;
        case "QuestTacked":
        case 1:
            message.status = 1;
            break;
        case "QuestComplete":
        case 2:
            message.status = 2;
            break;
        case "QuestFinished":
        case 3:
            message.status = 3;
            break;
        }
        if (object.acceptTime != null)
            if ($util.Long)
                (message.acceptTime = $util.Long.fromValue(object.acceptTime)).unsigned = false;
            else if (typeof object.acceptTime === "string")
                message.acceptTime = parseInt(object.acceptTime, 10);
            else if (typeof object.acceptTime === "number")
                message.acceptTime = object.acceptTime;
            else if (typeof object.acceptTime === "object")
                message.acceptTime = new $util.LongBits(object.acceptTime.low >>> 0, object.acceptTime.high >>> 0).toNumber();
        if (object.preCount != null)
            message.preCount = object.preCount | 0;
        switch (object.type) {
        case "QuestType_None":
        case 0:
            message.type = 0;
            break;
        case "GrowQuest":
        case 1:
            message.type = 1;
            break;
        case "DailyQuest":
        case 2:
            message.type = 2;
            break;
        case "AchievementQuest":
        case 3:
            message.type = 3;
            break;
        case "RankDailyQuest":
        case 4:
            message.type = 4;
            break;
        case "RankWeekQuest":
        case 5:
            message.type = 5;
            break;
        }
        return message;
    };
    GamerQuest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.name = "";
            object.N = 0;
            object.nowCount = 0;
            object.status = options.enums === String ? "QuestLocked" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.acceptTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.acceptTime = options.longs === String ? "0" : 0;
            object.preCount = 0;
            object.type = options.enums === String ? "QuestType_None" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.N != null && message.hasOwnProperty("N"))
            object.N = message.N;
        if (message.nowCount != null && message.hasOwnProperty("nowCount"))
            object.nowCount = message.nowCount;
        if (message.status != null && message.hasOwnProperty("status"))
            object.status = options.enums === String ? $root.QuestState[message.status] : message.status;
        if (message.acceptTime != null && message.hasOwnProperty("acceptTime"))
            if (typeof message.acceptTime === "number")
                object.acceptTime = options.longs === String ? String(message.acceptTime) : message.acceptTime;
            else
                object.acceptTime = options.longs === String ? $util.Long.prototype.toString.call(message.acceptTime) : options.longs === Number ? new $util.LongBits(message.acceptTime.low >>> 0, message.acceptTime.high >>> 0).toNumber() : message.acceptTime;
        if (message.preCount != null && message.hasOwnProperty("preCount"))
            object.preCount = message.preCount;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.QuestType[message.type] : message.type;
        return object;
    };
    GamerQuest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerQuest;
})();
$root.DailyActive = (function() {
    function DailyActive(properties) {
        this.receiveList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    DailyActive.prototype.id = 0;
    DailyActive.prototype.active = 0;
    DailyActive.prototype.receiveList = $util.emptyArray;
    DailyActive.prototype.calTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    DailyActive.create = function create(properties) {
        return new DailyActive(properties);
    };
    DailyActive.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.active != null && message.hasOwnProperty("active"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.active);
        if (message.receiveList != null && message.receiveList.length) {
            writer.uint32(/* id 3, wireType 2 =*/26).fork();
            for (var i = 0; i < message.receiveList.length; ++i)
                writer.int32(message.receiveList[i]);
            writer.ldelim();
        }
        if (message.calTime != null && message.hasOwnProperty("calTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.calTime);
        return writer;
    };
    DailyActive.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    DailyActive.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DailyActive();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.active = reader.int32();
                break;
            case 3:
                if (!(message.receiveList && message.receiveList.length))
                    message.receiveList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.receiveList.push(reader.int32());
                } else
                    message.receiveList.push(reader.int32());
                break;
            case 4:
                message.calTime = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    DailyActive.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    DailyActive.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.active != null && message.hasOwnProperty("active"))
            if (!$util.isInteger(message.active))
                return "active: integer expected";
        if (message.receiveList != null && message.hasOwnProperty("receiveList")) {
            if (!Array.isArray(message.receiveList))
                return "receiveList: array expected";
            for (var i = 0; i < message.receiveList.length; ++i)
                if (!$util.isInteger(message.receiveList[i]))
                    return "receiveList: integer[] expected";
        }
        if (message.calTime != null && message.hasOwnProperty("calTime"))
            if (!$util.isInteger(message.calTime) && !(message.calTime && $util.isInteger(message.calTime.low) && $util.isInteger(message.calTime.high)))
                return "calTime: integer|Long expected";
        return null;
    };
    DailyActive.fromObject = function fromObject(object) {
        if (object instanceof $root.DailyActive)
            return object;
        var message = new $root.DailyActive();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.active != null)
            message.active = object.active | 0;
        if (object.receiveList) {
            if (!Array.isArray(object.receiveList))
                throw TypeError(".DailyActive.receiveList: array expected");
            message.receiveList = [];
            for (var i = 0; i < object.receiveList.length; ++i)
                message.receiveList[i] = object.receiveList[i] | 0;
        }
        if (object.calTime != null)
            if ($util.Long)
                (message.calTime = $util.Long.fromValue(object.calTime)).unsigned = false;
            else if (typeof object.calTime === "string")
                message.calTime = parseInt(object.calTime, 10);
            else if (typeof object.calTime === "number")
                message.calTime = object.calTime;
            else if (typeof object.calTime === "object")
                message.calTime = new $util.LongBits(object.calTime.low >>> 0, object.calTime.high >>> 0).toNumber();
        return message;
    };
    DailyActive.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.receiveList = [];
        if (options.defaults) {
            object.id = 0;
            object.active = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.calTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.calTime = options.longs === String ? "0" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.active != null && message.hasOwnProperty("active"))
            object.active = message.active;
        if (message.receiveList && message.receiveList.length) {
            object.receiveList = [];
            for (var j = 0; j < message.receiveList.length; ++j)
                object.receiveList[j] = message.receiveList[j];
        }
        if (message.calTime != null && message.hasOwnProperty("calTime"))
            if (typeof message.calTime === "number")
                object.calTime = options.longs === String ? String(message.calTime) : message.calTime;
            else
                object.calTime = options.longs === String ? $util.Long.prototype.toString.call(message.calTime) : options.longs === Number ? new $util.LongBits(message.calTime.low >>> 0, message.calTime.high >>> 0).toNumber() : message.calTime;
        return object;
    };
    DailyActive.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DailyActive;
})();
$root.Guide = (function() {
    function Guide(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Guide.prototype.id = 0;
    Guide.prototype.progress = 0;
    Guide.prototype.isOver = false;
    Guide.create = function create(properties) {
        return new Guide(properties);
    };
    Guide.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.progress != null && message.hasOwnProperty("progress"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progress);
        if (message.isOver != null && message.hasOwnProperty("isOver"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isOver);
        return writer;
    };
    Guide.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Guide.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Guide();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.progress = reader.int32();
                break;
            case 3:
                message.isOver = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Guide.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Guide.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.progress != null && message.hasOwnProperty("progress"))
            if (!$util.isInteger(message.progress))
                return "progress: integer expected";
        if (message.isOver != null && message.hasOwnProperty("isOver"))
            if (typeof message.isOver !== "boolean")
                return "isOver: boolean expected";
        return null;
    };
    Guide.fromObject = function fromObject(object) {
        if (object instanceof $root.Guide)
            return object;
        var message = new $root.Guide();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.progress != null)
            message.progress = object.progress | 0;
        if (object.isOver != null)
            message.isOver = Boolean(object.isOver);
        return message;
    };
    Guide.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.progress = 0;
            object.isOver = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.progress != null && message.hasOwnProperty("progress"))
            object.progress = message.progress;
        if (message.isOver != null && message.hasOwnProperty("isOver"))
            object.isOver = message.isOver;
        return object;
    };
    Guide.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Guide;
})();
$root.ItemList = (function() {
    function ItemList(properties) {
        this.ItemList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ItemList.prototype.ItemList = $util.emptyArray;
    ItemList.create = function create(properties) {
        return new ItemList(properties);
    };
    ItemList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ItemList != null && message.ItemList.length)
            for (var i = 0; i < message.ItemList.length; ++i)
                $root.GameItem.encode(message.ItemList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };
    ItemList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ItemList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ItemList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.ItemList && message.ItemList.length))
                    message.ItemList = [];
                message.ItemList.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ItemList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ItemList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ItemList != null && message.hasOwnProperty("ItemList")) {
            if (!Array.isArray(message.ItemList))
                return "ItemList: array expected";
            for (var i = 0; i < message.ItemList.length; ++i) {
                var error = $root.GameItem.verify(message.ItemList[i]);
                if (error)
                    return "ItemList." + error;
            }
        }
        return null;
    };
    ItemList.fromObject = function fromObject(object) {
        if (object instanceof $root.ItemList)
            return object;
        var message = new $root.ItemList();
        if (object.ItemList) {
            if (!Array.isArray(object.ItemList))
                throw TypeError(".ItemList.ItemList: array expected");
            message.ItemList = [];
            for (var i = 0; i < object.ItemList.length; ++i) {
                if (typeof object.ItemList[i] !== "object")
                    throw TypeError(".ItemList.ItemList: object expected");
                message.ItemList[i] = $root.GameItem.fromObject(object.ItemList[i]);
            }
        }
        return message;
    };
    ItemList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.ItemList = [];
        if (message.ItemList && message.ItemList.length) {
            object.ItemList = [];
            for (var j = 0; j < message.ItemList.length; ++j)
                object.ItemList[j] = $root.GameItem.toObject(message.ItemList[j], options);
        }
        return object;
    };
    ItemList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ItemList;
})();
$root.PersonIdentify = (function() {
    function PersonIdentify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PersonIdentify.prototype.uid = "";
    PersonIdentify.prototype.state = 0;
    PersonIdentify.prototype.birthday = "";
    PersonIdentify.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    PersonIdentify.prototype.timeLong = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    PersonIdentify.create = function create(properties) {
        return new PersonIdentify(properties);
    };
    PersonIdentify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
        if (message.birthday != null && message.hasOwnProperty("birthday"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.birthday);
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.timestamp);
        if (message.timeLong != null && message.hasOwnProperty("timeLong"))
            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.timeLong);
        return writer;
    };
    PersonIdentify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PersonIdentify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PersonIdentify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.string();
                break;
            case 2:
                message.state = reader.int32();
                break;
            case 3:
                message.birthday = reader.string();
                break;
            case 4:
                message.timestamp = reader.int64();
                break;
            case 5:
                message.timeLong = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PersonIdentify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PersonIdentify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isString(message.uid))
                return "uid: string expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.birthday != null && message.hasOwnProperty("birthday"))
            if (!$util.isString(message.birthday))
                return "birthday: string expected";
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                return "timestamp: integer|Long expected";
        if (message.timeLong != null && message.hasOwnProperty("timeLong"))
            if (!$util.isInteger(message.timeLong) && !(message.timeLong && $util.isInteger(message.timeLong.low) && $util.isInteger(message.timeLong.high)))
                return "timeLong: integer|Long expected";
        return null;
    };
    PersonIdentify.fromObject = function fromObject(object) {
        if (object instanceof $root.PersonIdentify)
            return object;
        var message = new $root.PersonIdentify();
        if (object.uid != null)
            message.uid = String(object.uid);
        switch (object.state) {
        case "NotCertified":
        case 0:
            message.state = 0;
            break;
        case "Failed":
        case 1:
            message.state = 1;
            break;
        case "Adult":
        case 2:
            message.state = 2;
            break;
        case "Underage":
        case 3:
            message.state = 3;
            break;
        }
        if (object.birthday != null)
            message.birthday = String(object.birthday);
        if (object.timestamp != null)
            if ($util.Long)
                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
            else if (typeof object.timestamp === "string")
                message.timestamp = parseInt(object.timestamp, 10);
            else if (typeof object.timestamp === "number")
                message.timestamp = object.timestamp;
            else if (typeof object.timestamp === "object")
                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
        if (object.timeLong != null)
            if ($util.Long)
                (message.timeLong = $util.Long.fromValue(object.timeLong)).unsigned = false;
            else if (typeof object.timeLong === "string")
                message.timeLong = parseInt(object.timeLong, 10);
            else if (typeof object.timeLong === "number")
                message.timeLong = object.timeLong;
            else if (typeof object.timeLong === "object")
                message.timeLong = new $util.LongBits(object.timeLong.low >>> 0, object.timeLong.high >>> 0).toNumber();
        return message;
    };
    PersonIdentify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.uid = "";
            object.state = options.enums === String ? "NotCertified" : 0;
            object.birthday = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timestamp = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timeLong = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timeLong = options.longs === String ? "0" : 0;
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            object.uid = message.uid;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.AuthenticationType[message.state] : message.state;
        if (message.birthday != null && message.hasOwnProperty("birthday"))
            object.birthday = message.birthday;
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            if (typeof message.timestamp === "number")
                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
            else
                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
        if (message.timeLong != null && message.hasOwnProperty("timeLong"))
            if (typeof message.timeLong === "number")
                object.timeLong = options.longs === String ? String(message.timeLong) : message.timeLong;
            else
                object.timeLong = options.longs === String ? $util.Long.prototype.toString.call(message.timeLong) : options.longs === Number ? new $util.LongBits(message.timeLong.low >>> 0, message.timeLong.high >>> 0).toNumber() : message.timeLong;
        return object;
    };
    PersonIdentify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PersonIdentify;
})();
$root.GamerSecretLand = (function() {
    function GamerSecretLand(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSecretLand.prototype.id = 0;
    GamerSecretLand.prototype.keyStone = 0;
    GamerSecretLand.prototype.checkPointID = 0;
    GamerSecretLand.prototype.roll = 0;
    GamerSecretLand.prototype.lastRollTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerSecretLand.prototype.buyTimes = 0;
    GamerSecretLand.prototype.highestLevel = 0;
    GamerSecretLand.prototype.weekHighestLevel = 0;
    GamerSecretLand.prototype.lastTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerSecretLand.create = function create(properties) {
        return new GamerSecretLand(properties);
    };
    GamerSecretLand.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.keyStone != null && message.hasOwnProperty("keyStone"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.keyStone);
        if (message.checkPointID != null && message.hasOwnProperty("checkPointID"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.checkPointID);
        if (message.roll != null && message.hasOwnProperty("roll"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roll);
        if (message.lastRollTime != null && message.hasOwnProperty("lastRollTime"))
            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.lastRollTime);
        if (message.buyTimes != null && message.hasOwnProperty("buyTimes"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.buyTimes);
        if (message.highestLevel != null && message.hasOwnProperty("highestLevel"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.highestLevel);
        if (message.weekHighestLevel != null && message.hasOwnProperty("weekHighestLevel"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.weekHighestLevel);
        if (message.lastTimestamp != null && message.hasOwnProperty("lastTimestamp"))
            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.lastTimestamp);
        return writer;
    };
    GamerSecretLand.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSecretLand.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSecretLand();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.keyStone = reader.int32();
                break;
            case 3:
                message.checkPointID = reader.int32();
                break;
            case 4:
                message.roll = reader.int32();
                break;
            case 5:
                message.lastRollTime = reader.int64();
                break;
            case 6:
                message.buyTimes = reader.int32();
                break;
            case 7:
                message.highestLevel = reader.int32();
                break;
            case 8:
                message.weekHighestLevel = reader.int32();
                break;
            case 9:
                message.lastTimestamp = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSecretLand.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSecretLand.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.keyStone != null && message.hasOwnProperty("keyStone"))
            if (!$util.isInteger(message.keyStone))
                return "keyStone: integer expected";
        if (message.checkPointID != null && message.hasOwnProperty("checkPointID"))
            if (!$util.isInteger(message.checkPointID))
                return "checkPointID: integer expected";
        if (message.roll != null && message.hasOwnProperty("roll"))
            if (!$util.isInteger(message.roll))
                return "roll: integer expected";
        if (message.lastRollTime != null && message.hasOwnProperty("lastRollTime"))
            if (!$util.isInteger(message.lastRollTime) && !(message.lastRollTime && $util.isInteger(message.lastRollTime.low) && $util.isInteger(message.lastRollTime.high)))
                return "lastRollTime: integer|Long expected";
        if (message.buyTimes != null && message.hasOwnProperty("buyTimes"))
            if (!$util.isInteger(message.buyTimes))
                return "buyTimes: integer expected";
        if (message.highestLevel != null && message.hasOwnProperty("highestLevel"))
            if (!$util.isInteger(message.highestLevel))
                return "highestLevel: integer expected";
        if (message.weekHighestLevel != null && message.hasOwnProperty("weekHighestLevel"))
            if (!$util.isInteger(message.weekHighestLevel))
                return "weekHighestLevel: integer expected";
        if (message.lastTimestamp != null && message.hasOwnProperty("lastTimestamp"))
            if (!$util.isInteger(message.lastTimestamp) && !(message.lastTimestamp && $util.isInteger(message.lastTimestamp.low) && $util.isInteger(message.lastTimestamp.high)))
                return "lastTimestamp: integer|Long expected";
        return null;
    };
    GamerSecretLand.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSecretLand)
            return object;
        var message = new $root.GamerSecretLand();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.keyStone != null)
            message.keyStone = object.keyStone | 0;
        if (object.checkPointID != null)
            message.checkPointID = object.checkPointID | 0;
        if (object.roll != null)
            message.roll = object.roll | 0;
        if (object.lastRollTime != null)
            if ($util.Long)
                (message.lastRollTime = $util.Long.fromValue(object.lastRollTime)).unsigned = false;
            else if (typeof object.lastRollTime === "string")
                message.lastRollTime = parseInt(object.lastRollTime, 10);
            else if (typeof object.lastRollTime === "number")
                message.lastRollTime = object.lastRollTime;
            else if (typeof object.lastRollTime === "object")
                message.lastRollTime = new $util.LongBits(object.lastRollTime.low >>> 0, object.lastRollTime.high >>> 0).toNumber();
        if (object.buyTimes != null)
            message.buyTimes = object.buyTimes | 0;
        if (object.highestLevel != null)
            message.highestLevel = object.highestLevel | 0;
        if (object.weekHighestLevel != null)
            message.weekHighestLevel = object.weekHighestLevel | 0;
        if (object.lastTimestamp != null)
            if ($util.Long)
                (message.lastTimestamp = $util.Long.fromValue(object.lastTimestamp)).unsigned = false;
            else if (typeof object.lastTimestamp === "string")
                message.lastTimestamp = parseInt(object.lastTimestamp, 10);
            else if (typeof object.lastTimestamp === "number")
                message.lastTimestamp = object.lastTimestamp;
            else if (typeof object.lastTimestamp === "object")
                message.lastTimestamp = new $util.LongBits(object.lastTimestamp.low >>> 0, object.lastTimestamp.high >>> 0).toNumber();
        return message;
    };
    GamerSecretLand.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.keyStone = 0;
            object.checkPointID = 0;
            object.roll = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastRollTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastRollTime = options.longs === String ? "0" : 0;
            object.buyTimes = 0;
            object.highestLevel = 0;
            object.weekHighestLevel = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastTimestamp = options.longs === String ? "0" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.keyStone != null && message.hasOwnProperty("keyStone"))
            object.keyStone = message.keyStone;
        if (message.checkPointID != null && message.hasOwnProperty("checkPointID"))
            object.checkPointID = message.checkPointID;
        if (message.roll != null && message.hasOwnProperty("roll"))
            object.roll = message.roll;
        if (message.lastRollTime != null && message.hasOwnProperty("lastRollTime"))
            if (typeof message.lastRollTime === "number")
                object.lastRollTime = options.longs === String ? String(message.lastRollTime) : message.lastRollTime;
            else
                object.lastRollTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastRollTime) : options.longs === Number ? new $util.LongBits(message.lastRollTime.low >>> 0, message.lastRollTime.high >>> 0).toNumber() : message.lastRollTime;
        if (message.buyTimes != null && message.hasOwnProperty("buyTimes"))
            object.buyTimes = message.buyTimes;
        if (message.highestLevel != null && message.hasOwnProperty("highestLevel"))
            object.highestLevel = message.highestLevel;
        if (message.weekHighestLevel != null && message.hasOwnProperty("weekHighestLevel"))
            object.weekHighestLevel = message.weekHighestLevel;
        if (message.lastTimestamp != null && message.hasOwnProperty("lastTimestamp"))
            if (typeof message.lastTimestamp === "number")
                object.lastTimestamp = options.longs === String ? String(message.lastTimestamp) : message.lastTimestamp;
            else
                object.lastTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.lastTimestamp) : options.longs === Number ? new $util.LongBits(message.lastTimestamp.low >>> 0, message.lastTimestamp.high >>> 0).toNumber() : message.lastTimestamp;
        return object;
    };
    GamerSecretLand.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSecretLand;
})();
$root.SecretLandReward = (function() {
    function SecretLandReward(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SecretLandReward.prototype.timeStamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    SecretLandReward.prototype.item = null;
    SecretLandReward.prototype.level = 0;
    SecretLandReward.prototype.boxKey = "";
    SecretLandReward.prototype.rewardID = 0;
    SecretLandReward.create = function create(properties) {
        return new SecretLandReward(properties);
    };
    SecretLandReward.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.timeStamp);
        if (message.item != null && message.hasOwnProperty("item"))
            $root.GameItem.encode(message.item, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.level);
        if (message.boxKey != null && message.hasOwnProperty("boxKey"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.boxKey);
        if (message.rewardID != null && message.hasOwnProperty("rewardID"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.rewardID);
        return writer;
    };
    SecretLandReward.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SecretLandReward.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SecretLandReward();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.timeStamp = reader.int64();
                break;
            case 2:
                message.item = $root.GameItem.decode(reader, reader.uint32());
                break;
            case 3:
                message.level = reader.int32();
                break;
            case 4:
                message.boxKey = reader.string();
                break;
            case 5:
                message.rewardID = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SecretLandReward.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SecretLandReward.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (!$util.isInteger(message.timeStamp) && !(message.timeStamp && $util.isInteger(message.timeStamp.low) && $util.isInteger(message.timeStamp.high)))
                return "timeStamp: integer|Long expected";
        if (message.item != null && message.hasOwnProperty("item")) {
            var error = $root.GameItem.verify(message.item);
            if (error)
                return "item." + error;
        }
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.boxKey != null && message.hasOwnProperty("boxKey"))
            if (!$util.isString(message.boxKey))
                return "boxKey: string expected";
        if (message.rewardID != null && message.hasOwnProperty("rewardID"))
            if (!$util.isInteger(message.rewardID))
                return "rewardID: integer expected";
        return null;
    };
    SecretLandReward.fromObject = function fromObject(object) {
        if (object instanceof $root.SecretLandReward)
            return object;
        var message = new $root.SecretLandReward();
        if (object.timeStamp != null)
            if ($util.Long)
                (message.timeStamp = $util.Long.fromValue(object.timeStamp)).unsigned = false;
            else if (typeof object.timeStamp === "string")
                message.timeStamp = parseInt(object.timeStamp, 10);
            else if (typeof object.timeStamp === "number")
                message.timeStamp = object.timeStamp;
            else if (typeof object.timeStamp === "object")
                message.timeStamp = new $util.LongBits(object.timeStamp.low >>> 0, object.timeStamp.high >>> 0).toNumber();
        if (object.item != null) {
            if (typeof object.item !== "object")
                throw TypeError(".SecretLandReward.item: object expected");
            message.item = $root.GameItem.fromObject(object.item);
        }
        if (object.level != null)
            message.level = object.level | 0;
        if (object.boxKey != null)
            message.boxKey = String(object.boxKey);
        if (object.rewardID != null)
            message.rewardID = object.rewardID | 0;
        return message;
    };
    SecretLandReward.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timeStamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timeStamp = options.longs === String ? "0" : 0;
            object.item = null;
            object.level = 0;
            object.boxKey = "";
            object.rewardID = 0;
        }
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (typeof message.timeStamp === "number")
                object.timeStamp = options.longs === String ? String(message.timeStamp) : message.timeStamp;
            else
                object.timeStamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeStamp) : options.longs === Number ? new $util.LongBits(message.timeStamp.low >>> 0, message.timeStamp.high >>> 0).toNumber() : message.timeStamp;
        if (message.item != null && message.hasOwnProperty("item"))
            object.item = $root.GameItem.toObject(message.item, options);
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.boxKey != null && message.hasOwnProperty("boxKey"))
            object.boxKey = message.boxKey;
        if (message.rewardID != null && message.hasOwnProperty("rewardID"))
            object.rewardID = message.rewardID;
        return object;
    };
    SecretLandReward.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SecretLandReward;
})();
$root.SecretLandAffix = (function() {
    function SecretLandAffix(properties) {
        this.affixList = [];
        this.nextAffixList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SecretLandAffix.prototype.affixList = $util.emptyArray;
    SecretLandAffix.prototype.nextAffixList = $util.emptyArray;
    SecretLandAffix.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    SecretLandAffix.create = function create(properties) {
        return new SecretLandAffix(properties);
    };
    SecretLandAffix.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.affixList != null && message.affixList.length) {
            writer.uint32(/* id 1, wireType 2 =*/10).fork();
            for (var i = 0; i < message.affixList.length; ++i)
                writer.int32(message.affixList[i]);
            writer.ldelim();
        }
        if (message.nextAffixList != null && message.nextAffixList.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.nextAffixList.length; ++i)
                writer.int32(message.nextAffixList[i]);
            writer.ldelim();
        }
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);
        return writer;
    };
    SecretLandAffix.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SecretLandAffix.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SecretLandAffix();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.affixList && message.affixList.length))
                    message.affixList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.affixList.push(reader.int32());
                } else
                    message.affixList.push(reader.int32());
                break;
            case 2:
                if (!(message.nextAffixList && message.nextAffixList.length))
                    message.nextAffixList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.nextAffixList.push(reader.int32());
                } else
                    message.nextAffixList.push(reader.int32());
                break;
            case 3:
                message.timestamp = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SecretLandAffix.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SecretLandAffix.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.affixList != null && message.hasOwnProperty("affixList")) {
            if (!Array.isArray(message.affixList))
                return "affixList: array expected";
            for (var i = 0; i < message.affixList.length; ++i)
                if (!$util.isInteger(message.affixList[i]))
                    return "affixList: integer[] expected";
        }
        if (message.nextAffixList != null && message.hasOwnProperty("nextAffixList")) {
            if (!Array.isArray(message.nextAffixList))
                return "nextAffixList: array expected";
            for (var i = 0; i < message.nextAffixList.length; ++i)
                if (!$util.isInteger(message.nextAffixList[i]))
                    return "nextAffixList: integer[] expected";
        }
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                return "timestamp: integer|Long expected";
        return null;
    };
    SecretLandAffix.fromObject = function fromObject(object) {
        if (object instanceof $root.SecretLandAffix)
            return object;
        var message = new $root.SecretLandAffix();
        if (object.affixList) {
            if (!Array.isArray(object.affixList))
                throw TypeError(".SecretLandAffix.affixList: array expected");
            message.affixList = [];
            for (var i = 0; i < object.affixList.length; ++i)
                message.affixList[i] = object.affixList[i] | 0;
        }
        if (object.nextAffixList) {
            if (!Array.isArray(object.nextAffixList))
                throw TypeError(".SecretLandAffix.nextAffixList: array expected");
            message.nextAffixList = [];
            for (var i = 0; i < object.nextAffixList.length; ++i)
                message.nextAffixList[i] = object.nextAffixList[i] | 0;
        }
        if (object.timestamp != null)
            if ($util.Long)
                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
            else if (typeof object.timestamp === "string")
                message.timestamp = parseInt(object.timestamp, 10);
            else if (typeof object.timestamp === "number")
                message.timestamp = object.timestamp;
            else if (typeof object.timestamp === "object")
                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
        return message;
    };
    SecretLandAffix.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.affixList = [];
            object.nextAffixList = [];
        }
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timestamp = options.longs === String ? "0" : 0;
        if (message.affixList && message.affixList.length) {
            object.affixList = [];
            for (var j = 0; j < message.affixList.length; ++j)
                object.affixList[j] = message.affixList[j];
        }
        if (message.nextAffixList && message.nextAffixList.length) {
            object.nextAffixList = [];
            for (var j = 0; j < message.nextAffixList.length; ++j)
                object.nextAffixList[j] = message.nextAffixList[j];
        }
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            if (typeof message.timestamp === "number")
                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
            else
                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
        return object;
    };
    SecretLandAffix.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SecretLandAffix;
})();
$root.SecretLandMap = (function() {
    function SecretLandMap(properties) {
        this.mapChoose = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SecretLandMap.prototype.checkpointID = 0;
    SecretLandMap.prototype.mapChoose = $util.emptyArray;
    SecretLandMap.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    SecretLandMap.create = function create(properties) {
        return new SecretLandMap(properties);
    };
    SecretLandMap.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.checkpointID != null && message.hasOwnProperty("checkpointID"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.checkpointID);
        if (message.mapChoose != null && message.mapChoose.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.mapChoose.length; ++i)
                writer.int32(message.mapChoose[i]);
            writer.ldelim();
        }
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);
        return writer;
    };
    SecretLandMap.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SecretLandMap.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SecretLandMap();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.checkpointID = reader.int32();
                break;
            case 2:
                if (!(message.mapChoose && message.mapChoose.length))
                    message.mapChoose = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.mapChoose.push(reader.int32());
                } else
                    message.mapChoose.push(reader.int32());
                break;
            case 3:
                message.timestamp = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SecretLandMap.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SecretLandMap.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.checkpointID != null && message.hasOwnProperty("checkpointID"))
            if (!$util.isInteger(message.checkpointID))
                return "checkpointID: integer expected";
        if (message.mapChoose != null && message.hasOwnProperty("mapChoose")) {
            if (!Array.isArray(message.mapChoose))
                return "mapChoose: array expected";
            for (var i = 0; i < message.mapChoose.length; ++i)
                if (!$util.isInteger(message.mapChoose[i]))
                    return "mapChoose: integer[] expected";
        }
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                return "timestamp: integer|Long expected";
        return null;
    };
    SecretLandMap.fromObject = function fromObject(object) {
        if (object instanceof $root.SecretLandMap)
            return object;
        var message = new $root.SecretLandMap();
        if (object.checkpointID != null)
            message.checkpointID = object.checkpointID | 0;
        if (object.mapChoose) {
            if (!Array.isArray(object.mapChoose))
                throw TypeError(".SecretLandMap.mapChoose: array expected");
            message.mapChoose = [];
            for (var i = 0; i < object.mapChoose.length; ++i)
                message.mapChoose[i] = object.mapChoose[i] | 0;
        }
        if (object.timestamp != null)
            if ($util.Long)
                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
            else if (typeof object.timestamp === "string")
                message.timestamp = parseInt(object.timestamp, 10);
            else if (typeof object.timestamp === "number")
                message.timestamp = object.timestamp;
            else if (typeof object.timestamp === "object")
                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
        return message;
    };
    SecretLandMap.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.mapChoose = [];
        if (options.defaults) {
            object.checkpointID = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timestamp = options.longs === String ? "0" : 0;
        }
        if (message.checkpointID != null && message.hasOwnProperty("checkpointID"))
            object.checkpointID = message.checkpointID;
        if (message.mapChoose && message.mapChoose.length) {
            object.mapChoose = [];
            for (var j = 0; j < message.mapChoose.length; ++j)
                object.mapChoose[j] = message.mapChoose[j];
        }
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            if (typeof message.timestamp === "number")
                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
            else
                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
        return object;
    };
    SecretLandMap.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SecretLandMap;
})();
$root.SecretLandTreasureBox = (function() {
    function SecretLandTreasureBox(properties) {
        this.items = [];
        this.gidList = [];
        this.receive = [];
        this.gidMain = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    SecretLandTreasureBox.prototype.no = "";
    SecretLandTreasureBox.prototype.timeStamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    SecretLandTreasureBox.prototype.items = $util.emptyArray;
    SecretLandTreasureBox.prototype.gidList = $util.emptyArray;
    SecretLandTreasureBox.prototype.rewardID = 0;
    SecretLandTreasureBox.prototype.teamID = 0;
    SecretLandTreasureBox.prototype.receive = $util.emptyArray;
    SecretLandTreasureBox.prototype.gidMain = $util.emptyArray;
    SecretLandTreasureBox.create = function create(properties) {
        return new SecretLandTreasureBox(properties);
    };
    SecretLandTreasureBox.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.no != null && message.hasOwnProperty("no"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.no);
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timeStamp);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.gidList != null && message.gidList.length) {
            writer.uint32(/* id 4, wireType 2 =*/34).fork();
            for (var i = 0; i < message.gidList.length; ++i)
                writer.int32(message.gidList[i]);
            writer.ldelim();
        }
        if (message.rewardID != null && message.hasOwnProperty("rewardID"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.rewardID);
        if (message.teamID != null && message.hasOwnProperty("teamID"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.teamID);
        if (message.receive != null && message.receive.length) {
            writer.uint32(/* id 7, wireType 2 =*/58).fork();
            for (var i = 0; i < message.receive.length; ++i)
                writer.bool(message.receive[i]);
            writer.ldelim();
        }
        if (message.gidMain != null && message.gidMain.length)
            for (var i = 0; i < message.gidMain.length; ++i)
                $root.GamerMini.encode(message.gidMain[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        return writer;
    };
    SecretLandTreasureBox.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    SecretLandTreasureBox.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SecretLandTreasureBox();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.no = reader.string();
                break;
            case 2:
                message.timeStamp = reader.int64();
                break;
            case 3:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            case 4:
                if (!(message.gidList && message.gidList.length))
                    message.gidList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.gidList.push(reader.int32());
                } else
                    message.gidList.push(reader.int32());
                break;
            case 5:
                message.rewardID = reader.int32();
                break;
            case 6:
                message.teamID = reader.int32();
                break;
            case 7:
                if (!(message.receive && message.receive.length))
                    message.receive = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.receive.push(reader.bool());
                } else
                    message.receive.push(reader.bool());
                break;
            case 8:
                if (!(message.gidMain && message.gidMain.length))
                    message.gidMain = [];
                message.gidMain.push($root.GamerMini.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    SecretLandTreasureBox.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    SecretLandTreasureBox.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.no != null && message.hasOwnProperty("no"))
            if (!$util.isString(message.no))
                return "no: string expected";
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (!$util.isInteger(message.timeStamp) && !(message.timeStamp && $util.isInteger(message.timeStamp.low) && $util.isInteger(message.timeStamp.high)))
                return "timeStamp: integer|Long expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        if (message.gidList != null && message.hasOwnProperty("gidList")) {
            if (!Array.isArray(message.gidList))
                return "gidList: array expected";
            for (var i = 0; i < message.gidList.length; ++i)
                if (!$util.isInteger(message.gidList[i]))
                    return "gidList: integer[] expected";
        }
        if (message.rewardID != null && message.hasOwnProperty("rewardID"))
            if (!$util.isInteger(message.rewardID))
                return "rewardID: integer expected";
        if (message.teamID != null && message.hasOwnProperty("teamID"))
            if (!$util.isInteger(message.teamID))
                return "teamID: integer expected";
        if (message.receive != null && message.hasOwnProperty("receive")) {
            if (!Array.isArray(message.receive))
                return "receive: array expected";
            for (var i = 0; i < message.receive.length; ++i)
                if (typeof message.receive[i] !== "boolean")
                    return "receive: boolean[] expected";
        }
        if (message.gidMain != null && message.hasOwnProperty("gidMain")) {
            if (!Array.isArray(message.gidMain))
                return "gidMain: array expected";
            for (var i = 0; i < message.gidMain.length; ++i) {
                var error = $root.GamerMini.verify(message.gidMain[i]);
                if (error)
                    return "gidMain." + error;
            }
        }
        return null;
    };
    SecretLandTreasureBox.fromObject = function fromObject(object) {
        if (object instanceof $root.SecretLandTreasureBox)
            return object;
        var message = new $root.SecretLandTreasureBox();
        if (object.no != null)
            message.no = String(object.no);
        if (object.timeStamp != null)
            if ($util.Long)
                (message.timeStamp = $util.Long.fromValue(object.timeStamp)).unsigned = false;
            else if (typeof object.timeStamp === "string")
                message.timeStamp = parseInt(object.timeStamp, 10);
            else if (typeof object.timeStamp === "number")
                message.timeStamp = object.timeStamp;
            else if (typeof object.timeStamp === "object")
                message.timeStamp = new $util.LongBits(object.timeStamp.low >>> 0, object.timeStamp.high >>> 0).toNumber();
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".SecretLandTreasureBox.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".SecretLandTreasureBox.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        if (object.gidList) {
            if (!Array.isArray(object.gidList))
                throw TypeError(".SecretLandTreasureBox.gidList: array expected");
            message.gidList = [];
            for (var i = 0; i < object.gidList.length; ++i)
                message.gidList[i] = object.gidList[i] | 0;
        }
        if (object.rewardID != null)
            message.rewardID = object.rewardID | 0;
        if (object.teamID != null)
            message.teamID = object.teamID | 0;
        if (object.receive) {
            if (!Array.isArray(object.receive))
                throw TypeError(".SecretLandTreasureBox.receive: array expected");
            message.receive = [];
            for (var i = 0; i < object.receive.length; ++i)
                message.receive[i] = Boolean(object.receive[i]);
        }
        if (object.gidMain) {
            if (!Array.isArray(object.gidMain))
                throw TypeError(".SecretLandTreasureBox.gidMain: array expected");
            message.gidMain = [];
            for (var i = 0; i < object.gidMain.length; ++i) {
                if (typeof object.gidMain[i] !== "object")
                    throw TypeError(".SecretLandTreasureBox.gidMain: object expected");
                message.gidMain[i] = $root.GamerMini.fromObject(object.gidMain[i]);
            }
        }
        return message;
    };
    SecretLandTreasureBox.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.items = [];
            object.gidList = [];
            object.receive = [];
            object.gidMain = [];
        }
        if (options.defaults) {
            object.no = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timeStamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timeStamp = options.longs === String ? "0" : 0;
            object.rewardID = 0;
            object.teamID = 0;
        }
        if (message.no != null && message.hasOwnProperty("no"))
            object.no = message.no;
        if (message.timeStamp != null && message.hasOwnProperty("timeStamp"))
            if (typeof message.timeStamp === "number")
                object.timeStamp = options.longs === String ? String(message.timeStamp) : message.timeStamp;
            else
                object.timeStamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeStamp) : options.longs === Number ? new $util.LongBits(message.timeStamp.low >>> 0, message.timeStamp.high >>> 0).toNumber() : message.timeStamp;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        if (message.gidList && message.gidList.length) {
            object.gidList = [];
            for (var j = 0; j < message.gidList.length; ++j)
                object.gidList[j] = message.gidList[j];
        }
        if (message.rewardID != null && message.hasOwnProperty("rewardID"))
            object.rewardID = message.rewardID;
        if (message.teamID != null && message.hasOwnProperty("teamID"))
            object.teamID = message.teamID;
        if (message.receive && message.receive.length) {
            object.receive = [];
            for (var j = 0; j < message.receive.length; ++j)
                object.receive[j] = message.receive[j];
        }
        if (message.gidMain && message.gidMain.length) {
            object.gidMain = [];
            for (var j = 0; j < message.gidMain.length; ++j)
                object.gidMain[j] = $root.GamerMini.toObject(message.gidMain[j], options);
        }
        return object;
    };
    SecretLandTreasureBox.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SecretLandTreasureBox;
})();
$root.GamerStatus = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "Offline"] = 0;
    values[valuesById[1] = "Online"] = 1;
    values[valuesById[2] = "Teaming"] = 2;
    values[valuesById[3] = "Matching"] = 3;
    values[valuesById[4] = "Fighting"] = 4;
    return values;
})();
$root.ChatChannel = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "GamerChat"] = 0;
    values[valuesById[1] = "WorldChat"] = 1;
    values[valuesById[2] = "GuildChat"] = 2;
    values[valuesById[3] = "TeamChat"] = 3;
    return values;
})();
$root.MailType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ActivityMail"] = 0;
    values[valuesById[1] = "SysMail"] = 1;
    values[valuesById[2] = "AnnouncementMail"] = 2;
    values[valuesById[3] = "GamerMail"] = 3;
    return values;
})();
$root.MailState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "MailUnRead"] = 0;
    values[valuesById[1] = "MailRead"] = 1;
    values[valuesById[2] = "MailReceived"] = 2;
    return values;
})();
$root.PVPType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "MINVALID"] = 0;
    values[valuesById[1] = "PVE_M1"] = 1;
    values[valuesById[2] = "PVE_M2"] = 2;
    values[valuesById[3] = "PVE_M3"] = 3;
    values[valuesById[4] = "PVE_M4"] = 4;
    values[valuesById[100] = "PVP_M1V1"] = 100;
    values[valuesById[101] = "PVP_M2V2"] = 101;
    values[valuesById[102] = "PVP_M3V3"] = 102;
    values[valuesById[103] = "PVP_M4V4"] = 103;
    values[valuesById[104] = "PVP_M5V5"] = 104;
    return values;
})();
$root.ItemType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "other"] = 0;
    values[valuesById[1] = "gold"] = 1;
    values[valuesById[2] = "boundGold"] = 2;
    values[valuesById[3] = "silver"] = 3;
    values[valuesById[4] = "draugItem"] = 4;
    values[valuesById[5] = "equipment"] = 5;
    values[valuesById[6] = "heroItem"] = 6;
    values[valuesById[7] = "heroExpItem"] = 7;
    values[valuesById[8] = "exp"] = 8;
    values[valuesById[9] = "power"] = 9;
    values[valuesById[10] = "gift"] = 10;
    values[valuesById[11] = "heroPieces"] = 11;
    return values;
})();
$root.TaskState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "CannotAccept"] = 0;
    values[valuesById[1] = "CanAccept"] = 1;
    values[valuesById[2] = "Doing"] = 2;
    values[valuesById[3] = "Complete"] = 3;
    values[valuesById[4] = "TaskFinish"] = 4;
    return values;
})();
$root.GashaponType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "GashaponTypeInvalid"] = 0;
    values[valuesById[1] = "GeneralGashapon"] = 1;
    values[valuesById[2] = "AdvancedGashapon"] = 2;
    values[valuesById[3] = "ItemGashapon"] = 3;
    return values;
})();
$root.ShopType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ShopType_None"] = 0;
    values[valuesById[1] = "currency"] = 1;
    values[valuesById[2] = "fashion"] = 2;
    values[valuesById[3] = "guild"] = 3;
    values[valuesById[4] = "hero"] = 4;
    values[valuesById[5] = "honor"] = 5;
    values[valuesById[6] = "limit"] = 6;
    values[valuesById[7] = "draugShop"] = 7;
    return values;
})();
$root.QualityType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "QualityType_None"] = 0;
    values[valuesById[1] = "white"] = 1;
    values[valuesById[2] = "green"] = 2;
    values[valuesById[3] = "blue"] = 3;
    values[valuesById[4] = "purple"] = 4;
    values[valuesById[5] = "orange"] = 5;
    return values;
})();
$root.CheckPointType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "CheckPointType_None"] = 0;
    values[valuesById[1] = "Story"] = 1;
    values[valuesById[2] = "Elite"] = 2;
    values[valuesById[3] = "Devil"] = 3;
    values[valuesById[4] = "SecretBook"] = 4;
    values[valuesById[5] = "SecretLand"] = 5;
    return values;
})();
$root.InviteType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "NullType"] = 0;
    values[valuesById[1] = "Friend"] = 1;
    values[valuesById[2] = "Reject"] = 2;
    values[valuesById[3] = "Wait"] = 3;
    values[valuesById[4] = "Kick"] = 4;
    values[valuesById[5] = "Military"] = 5;
    return values;
})();
$root.InviteCDType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "InviteTypeCD"] = 0;
    values[valuesById[1] = "RejectTypeCD"] = 1;
    return values;
})();
$root.TeamStatus = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "TeamState_None"] = 0;
    values[valuesById[1] = "Normal"] = 1;
    values[valuesById[2] = "InMatching"] = 2;
    return values;
})();
$root.PropEffectModule = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "AllModule"] = 0;
    values[valuesById[1] = "HeroModule"] = 1;
    values[valuesById[2] = "DraugModule"] = 2;
    values[valuesById[3] = "RubyModule"] = 3;
    values[valuesById[4] = "EquipmentModule"] = 4;
    return values;
})();
$root.BattleResultType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "Invalid"] = 0;
    values[valuesById[1] = "TotalWin"] = 1;
    values[valuesById[2] = "NarrowlyWin"] = 2;
    values[valuesById[3] = "Draw"] = 3;
    values[valuesById[4] = "NarrowlyLoss"] = 4;
    values[valuesById[5] = "TotalLoss"] = 5;
    values[valuesById[6] = "Exit"] = 6;
    return values;
})();
$root.RankType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "RankType_None"] = 0;
    values[valuesById[1] = "Total"] = 1;
    values[valuesById[2] = "Server"] = 2;
    values[valuesById[3] = "HallOfFame"] = 3;
    return values;
})();
$root.BattleStarType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "BattleStarType_None"] = 0;
    values[valuesById[1] = "Pass"] = 1;
    values[valuesById[2] = "HP"] = 2;
    values[valuesById[4] = "Time"] = 4;
    return values;
})();
$root.BackpackAction = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "BackpackAction_None"] = 0;
    values[valuesById[1] = "CanSell"] = 1;
    values[valuesById[2] = "CanUse"] = 2;
    values[valuesById[3] = "CanSplit"] = 3;
    return values;
})();
$root.QuestType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "QuestType_None"] = 0;
    values[valuesById[1] = "GrowQuest"] = 1;
    values[valuesById[2] = "DailyQuest"] = 2;
    values[valuesById[3] = "AchievementQuest"] = 3;
    values[valuesById[4] = "RankDailyQuest"] = 4;
    values[valuesById[5] = "RankWeekQuest"] = 5;
    return values;
})();
$root.QuestState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "QuestLocked"] = 0;
    values[valuesById[1] = "QuestTacked"] = 1;
    values[valuesById[2] = "QuestComplete"] = 2;
    values[valuesById[3] = "QuestFinished"] = 3;
    return values;
})();
$root.HeroQuality = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "HeroQuality_None"] = 0;
    values[valuesById[1] = "HeroQuality_A"] = 1;
    values[valuesById[2] = "HeroQuality_S"] = 2;
    return values;
})();
$root.HeroType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "HeroType_All"] = 0;
    values[valuesById[1] = "HeroType_Mechs"] = 1;
    values[valuesById[2] = "HeroType_Warrior"] = 2;
    values[valuesById[3] = "HeroType_Wise"] = 3;
    values[valuesById[4] = "HeroType_Assassin"] = 4;
    values[valuesById[5] = "HeroType_shooter"] = 5;
    return values;
})();
$root.AuthenticationType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "NotCertified"] = 0;
    values[valuesById[1] = "Failed"] = 1;
    values[valuesById[2] = "Adult"] = 2;
    values[valuesById[3] = "Underage"] = 3;
    return values;
})();
$root.SLBattleResultType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "None"] = 0;
    values[valuesById[1] = "ActiveExit"] = 1;
    values[valuesById[2] = "NotPass"] = 2;
    values[valuesById[3] = "PassTimeOne"] = 3;
    values[valuesById[4] = "PassTimeTwo"] = 4;
    values[valuesById[5] = "PassTimeThree"] = 5;
    values[valuesById[6] = "PassOutOfTime"] = 6;
    return values;
})();
$root.NoticeType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "NoticeType_horseLamp"] = 0;
    return values;
})();
$root.S2C = (function() {
    function S2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    S2C.prototype.error = 0;
    S2C.prototype.key = "";
    S2C.prototype.gamerLoginS2C = null;
    S2C.prototype.gamerLoginGetDataS2C = null;
    S2C.prototype.serverTimeS2C = null;
    S2C.prototype.gamerNotifyLoginOtherS2C = null;
    S2C.prototype.gamerSubChatChannelS2C = null;
    S2C.prototype.gamerChangeNameS2C = null;
    S2C.prototype.gamerChangeAvatarS2C = null;
    S2C.prototype.gamerNotifyExpLevelS2C = null;
    S2C.prototype.gamerGetBackpackS2C = null;
    S2C.prototype.gamerNotifyItemChangeS2C = null;
    S2C.prototype.gamerSellItemS2C = null;
    S2C.prototype.gamerUseItemS2C = null;
    S2C.prototype.gamerFriendChatS2C = null;
    S2C.prototype.gamerWorldChatS2C = null;
    S2C.prototype.gamerTestChatS2C = null;
    S2C.prototype.gamerClubRequestS2C = null;
    S2C.prototype.gamerNotifyNewChatS2C = null;
    S2C.prototype.gamerNewFriendReqS2C = null;
    S2C.prototype.gamerDelFriendS2C = null;
    S2C.prototype.gamerNotifyNewFriendReqS2C = null;
    S2C.prototype.gamerProcessFriendReqS2C = null;
    S2C.prototype.gamerNotifyNewFriendS2C = null;
    S2C.prototype.gamerNotifyDelFriendS2C = null;
    S2C.prototype.gamerNotifyNoticeS2C = null;
    S2C.prototype.gamerNotifyMailS2C = null;
    S2C.prototype.gamerNotifyNewMailS2C = null;
    S2C.prototype.gamerGetMailS2C = null;
    S2C.prototype.gamerDelMailS2C = null;
    S2C.prototype.gamerDelHaveReadMailS2C = null;
    S2C.prototype.gamerOneKeyRcvMailRewardS2C = null;
    S2C.prototype.gamerChangeMailStateS2C = null;
    S2C.prototype.gamerNewHeroS2C = null;
    S2C.prototype.gamerUpgradeHeroS2C = null;
    S2C.prototype.gamerUseHeroMedicineS2C = null;
    S2C.prototype.gamerUpStarHeroS2C = null;
    S2C.prototype.gamerUpHeroSkillS2C = null;
    S2C.prototype.gamerGetHeroS2C = null;
    S2C.prototype.gamerNotifyHerosChangeS2C = null;
    S2C.prototype.gamerNotifyHeroPropUpdateS2C = null;
    S2C.prototype.gamerPVPLoadingS2C = null;
    S2C.prototype.gamerNotifyPVPLoadingS2C = null;
    S2C.prototype.gamerPVPSyncS2C = null;
    S2C.prototype.gamerNotifyGamerMiniS2C = null;
    S2C.prototype.gamerNotifyPVPSyncS2C = null;
    S2C.prototype.gamerNotifyNewPVPResultS2C = null;
    S2C.prototype.gamerReliveS2C = null;
    S2C.prototype.gamerNotifyIconChangeS2C = null;
    S2C.prototype.gamerNotifyDiamonChangeS2C = null;
    S2C.prototype.gamerNotifyEnergyChangeS2C = null;
    S2C.prototype.gamerNotifyExpChangeS2C = null;
    S2C.prototype.gamerGetRealTimeRankS2C = null;
    S2C.prototype.gamerCheckPVPBattleS2C = null;
    S2C.prototype.gamerUploadWXInfoS2C = null;
    S2C.prototype.gamerGetNoviceGuideS2C = null;
    S2C.prototype.gamerNoviceGuideChangeS2C = null;
    S2C.prototype.gamerMatchS2C = null;
    S2C.prototype.gamerCancelMatchS2C = null;
    S2C.prototype.gamerNotifyMatchInfoS2C = null;
    S2C.prototype.gamerGetRewardS2C = null;
    S2C.prototype.gamerUseIconS2C = null;
    S2C.prototype.gamerNotifyGashaponInfoS2C = null;
    S2C.prototype.gamerExtractGashaponS2C = null;
    S2C.prototype.gamerGetGashaponPreviewS2C = null;
    S2C.prototype.gamerNotifyActivitiesS2C = null;
    S2C.prototype.getActivityRewardS2C = null;
    S2C.prototype.createGuildS2C = null;
    S2C.prototype.guildGamerLoginS2C = null;
    S2C.prototype.guildGamerLoginoutS2C = null;
    S2C.prototype.dissolutionGuildS2C = null;
    S2C.prototype.getGuildS2C = null;
    S2C.prototype.getGuildListS2C = null;
    S2C.prototype.gamerNotifyApplyJoinGuildS2C = null;
    S2C.prototype.applyJoinGuildS2C = null;
    S2C.prototype.approvalJoinGuildS2C = null;
    S2C.prototype.gamerNotifyInviteJoinGuildS2C = null;
    S2C.prototype.inviteJoinGuildS2C = null;
    S2C.prototype.agreeJoinGuildS2C = null;
    S2C.prototype.quitGuildS2C = null;
    S2C.prototype.kickOutGuildS2C = null;
    S2C.prototype.gamerNotifyGuildMemUpdateS2C = null;
    S2C.prototype.guildChatS2C = null;
    S2C.prototype.gamerNotifyGuildChatS2C = null;
    S2C.prototype.gMS2C = null;
    S2C.prototype.checkPointListS2C = null;
    S2C.prototype.gamerNotifyCheckPointListS2C = null;
    S2C.prototype.gamerNotifyNewCheckPointListS2C = null;
    S2C.prototype.gamerNotifyRewardS2C = null;
    S2C.prototype.getPlotStarRewardS2C = null;
    S2C.prototype.buyTimesCheckPointS2C = null;
    S2C.prototype.sweepCheckPointS2C = null;
    S2C.prototype.gamerSettlePVES2C = null;
    S2C.prototype.draugListS2C = null;
    S2C.prototype.awakenDraugS2C = null;
    S2C.prototype.putDraugIntoPackS2C = null;
    S2C.prototype.swallowDraugS2C = null;
    S2C.prototype.decomposeDraugS2C = null;
    S2C.prototype.lockDraugS2C = null;
    S2C.prototype.wearDraugS2C = null;
    S2C.prototype.unwearDraugS2C = null;
    S2C.prototype.draugSelectHeroS2C = null;
    S2C.prototype.heroGroupListS2C = null;
    S2C.prototype.unlockHeroGroupS2C = null;
    S2C.prototype.changeNameHeroGroupS2C = null;
    S2C.prototype.gamerNotifyUnlockPosHeroGroupS2C = null;
    S2C.prototype.heroGroupChangeHeroS2C = null;
    S2C.prototype.heroGroupChangeSkillS2C = null;
    S2C.prototype.buyFatigueS2C = null;
    S2C.prototype.getFatigueWelfareS2C = null;
    S2C.prototype.gamerNotifyFatigueS2C = null;
    S2C.prototype.upStarEquipS2C = null;
    S2C.prototype.eatEquipsS2C = null;
    S2C.prototype.desEquipS2C = null;
    S2C.prototype.takeOnEquipS2C = null;
    S2C.prototype.takeOffEquipS2C = null;
    S2C.prototype.redSpotS2C = null;
    S2C.prototype.makeTeamS2C = null;
    S2C.prototype.setTeamAimS2C = null;
    S2C.prototype.joinTeamS2C = null;
    S2C.prototype.exitTeamS2C = null;
    S2C.prototype.turnOverTeamLeaderS2C = null;
    S2C.prototype.inviteTeamS2C = null;
    S2C.prototype.rejectTeamS2C = null;
    S2C.prototype.gamerNotifyTeamS2C = null;
    S2C.prototype.gamerNotifyTeamInfoS2C = null;
    S2C.prototype.gamerNotifyTeamChangeS2C = null;
    S2C.prototype.gamerNotifyTeamMemberChangeS2C = null;
    S2C.prototype.gamerNotifyLeaveTeamS2C = null;
    S2C.prototype.kickTeamS2C = null;
    S2C.prototype.setTeamHelpS2C = null;
    S2C.prototype.setTeamHeroS2C = null;
    S2C.prototype.switchTeamReadyS2C = null;
    S2C.prototype.gamerNotifyTeamReadyS2C = null;
    S2C.prototype.teamBattleS2C = null;
    S2C.prototype.getDanInfoS2C = null;
    S2C.prototype.gamerNotifyDanInfoS2C = null;
    S2C.prototype.gamerNotifyNewSeasonS2C = null;
    S2C.prototype.getDuelRankS2C = null;
    S2C.prototype.sysListS2C = null;
    S2C.prototype.sysOpenShowS2C = null;
    S2C.prototype.getQuestsS2C = null;
    S2C.prototype.gamerNotifyQuestsS2C = null;
    S2C.prototype.getQuestRewardS2C = null;
    S2C.prototype.getDailyQuestRewardS2C = null;
    S2C.prototype.gamerHeroImageChooseS2C = null;
    S2C.prototype.gamerHeroImageChangeS2C = null;
    S2C.prototype.gamerBuyRollS2C = null;
    S2C.prototype.getGamerSecretLandS2C = null;
    S2C.prototype.gamerNotifyGamerSecretLandInfoS2C = null;
    S2C.prototype.gamerNotifySecretLandInfoS2C = null;
    S2C.prototype.gamerSecretLandBattleRewardS2C = null;
    S2C.prototype.gamerSecretLandWeekRewardS2C = null;
    S2C.prototype.gamerSecretLandRankS2C = null;
    S2C.prototype.getGamerSecretLandInfoS2C = null;
    S2C.prototype.gamerNotifySLTreasureBoxS2C = null;
    S2C.prototype.gamerNotifyNewSecretLandResultS2C = null;
    S2C.prototype.gamerChangeItemIsSawS2C = null;
    S2C.create = function create(properties) {
        return new S2C(properties);
    };
    S2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.key != null && message.hasOwnProperty("key"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);
        if (message.gamerLoginS2C != null && message.hasOwnProperty("gamerLoginS2C"))
            $root.GamerLoginS2C.encode(message.gamerLoginS2C, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.gamerLoginGetDataS2C != null && message.hasOwnProperty("gamerLoginGetDataS2C"))
            $root.GamerLoginGetDataS2C.encode(message.gamerLoginGetDataS2C, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.serverTimeS2C != null && message.hasOwnProperty("serverTimeS2C"))
            $root.ServerTimeS2C.encode(message.serverTimeS2C, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.gamerNotifyLoginOtherS2C != null && message.hasOwnProperty("gamerNotifyLoginOtherS2C"))
            $root.GamerNotifyLoginOtherS2C.encode(message.gamerNotifyLoginOtherS2C, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.gamerSubChatChannelS2C != null && message.hasOwnProperty("gamerSubChatChannelS2C"))
            $root.GamerSubChatChannelS2C.encode(message.gamerSubChatChannelS2C, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.gamerChangeNameS2C != null && message.hasOwnProperty("gamerChangeNameS2C"))
            $root.GamerChangeNameS2C.encode(message.gamerChangeNameS2C, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.gamerChangeAvatarS2C != null && message.hasOwnProperty("gamerChangeAvatarS2C"))
            $root.GamerChangeAvatarS2C.encode(message.gamerChangeAvatarS2C, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.gamerNotifyExpLevelS2C != null && message.hasOwnProperty("gamerNotifyExpLevelS2C"))
            $root.GamerNotifyExpLevelS2C.encode(message.gamerNotifyExpLevelS2C, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.gamerGetBackpackS2C != null && message.hasOwnProperty("gamerGetBackpackS2C"))
            $root.GamerGetBackpackS2C.encode(message.gamerGetBackpackS2C, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.gamerNotifyItemChangeS2C != null && message.hasOwnProperty("gamerNotifyItemChangeS2C"))
            $root.GamerNotifyItemChangeS2C.encode(message.gamerNotifyItemChangeS2C, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.gamerSellItemS2C != null && message.hasOwnProperty("gamerSellItemS2C"))
            $root.GamerSellItemS2C.encode(message.gamerSellItemS2C, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.gamerUseItemS2C != null && message.hasOwnProperty("gamerUseItemS2C"))
            $root.GamerUseItemS2C.encode(message.gamerUseItemS2C, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.gamerFriendChatS2C != null && message.hasOwnProperty("gamerFriendChatS2C"))
            $root.GamerFriendChatS2C.encode(message.gamerFriendChatS2C, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        if (message.gamerWorldChatS2C != null && message.hasOwnProperty("gamerWorldChatS2C"))
            $root.GamerWorldChatS2C.encode(message.gamerWorldChatS2C, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
        if (message.gamerTestChatS2C != null && message.hasOwnProperty("gamerTestChatS2C"))
            $root.GamerTestChatS2C.encode(message.gamerTestChatS2C, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
        if (message.gamerClubRequestS2C != null && message.hasOwnProperty("gamerClubRequestS2C"))
            $root.GamerClubRequestS2C.encode(message.gamerClubRequestS2C, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
        if (message.gamerNotifyNewChatS2C != null && message.hasOwnProperty("gamerNotifyNewChatS2C"))
            $root.GamerNotifyNewChatS2C.encode(message.gamerNotifyNewChatS2C, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
        if (message.gamerNewFriendReqS2C != null && message.hasOwnProperty("gamerNewFriendReqS2C"))
            $root.GamerNewFriendReqS2C.encode(message.gamerNewFriendReqS2C, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.gamerDelFriendS2C != null && message.hasOwnProperty("gamerDelFriendS2C"))
            $root.GamerDelFriendS2C.encode(message.gamerDelFriendS2C, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
        if (message.gamerNotifyNewFriendReqS2C != null && message.hasOwnProperty("gamerNotifyNewFriendReqS2C"))
            $root.GamerNotifyNewFriendReqS2C.encode(message.gamerNotifyNewFriendReqS2C, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
        if (message.gamerProcessFriendReqS2C != null && message.hasOwnProperty("gamerProcessFriendReqS2C"))
            $root.GamerProcessFriendReqS2C.encode(message.gamerProcessFriendReqS2C, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
        if (message.gamerNotifyNewFriendS2C != null && message.hasOwnProperty("gamerNotifyNewFriendS2C"))
            $root.GamerNotifyNewFriendS2C.encode(message.gamerNotifyNewFriendS2C, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
        if (message.gamerNotifyDelFriendS2C != null && message.hasOwnProperty("gamerNotifyDelFriendS2C"))
            $root.GamerNotifyDelFriendS2C.encode(message.gamerNotifyDelFriendS2C, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
        if (message.gamerNotifyNoticeS2C != null && message.hasOwnProperty("gamerNotifyNoticeS2C"))
            $root.GamerNotifyNoticeS2C.encode(message.gamerNotifyNoticeS2C, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
        if (message.gamerNotifyMailS2C != null && message.hasOwnProperty("gamerNotifyMailS2C"))
            $root.GamerNotifyMailS2C.encode(message.gamerNotifyMailS2C, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
        if (message.gamerNotifyNewMailS2C != null && message.hasOwnProperty("gamerNotifyNewMailS2C"))
            $root.GamerNotifyNewMailS2C.encode(message.gamerNotifyNewMailS2C, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
        if (message.gamerGetMailS2C != null && message.hasOwnProperty("gamerGetMailS2C"))
            $root.GamerGetMailS2C.encode(message.gamerGetMailS2C, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();
        if (message.gamerDelMailS2C != null && message.hasOwnProperty("gamerDelMailS2C"))
            $root.GamerDelMailS2C.encode(message.gamerDelMailS2C, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
        if (message.gamerDelHaveReadMailS2C != null && message.hasOwnProperty("gamerDelHaveReadMailS2C"))
            $root.GamerDelHaveReadMailS2C.encode(message.gamerDelHaveReadMailS2C, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
        if (message.gamerOneKeyRcvMailRewardS2C != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardS2C"))
            $root.GamerOneKeyRcvMailRewardS2C.encode(message.gamerOneKeyRcvMailRewardS2C, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
        if (message.gamerChangeMailStateS2C != null && message.hasOwnProperty("gamerChangeMailStateS2C"))
            $root.GamerChangeMailStateS2C.encode(message.gamerChangeMailStateS2C, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
        if (message.gamerNewHeroS2C != null && message.hasOwnProperty("gamerNewHeroS2C"))
            $root.GamerNewHeroS2C.encode(message.gamerNewHeroS2C, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
        if (message.gamerUpgradeHeroS2C != null && message.hasOwnProperty("gamerUpgradeHeroS2C"))
            $root.GamerUpgradeHeroS2C.encode(message.gamerUpgradeHeroS2C, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
        if (message.gamerUseHeroMedicineS2C != null && message.hasOwnProperty("gamerUseHeroMedicineS2C"))
            $root.GamerUseHeroMedicineS2C.encode(message.gamerUseHeroMedicineS2C, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
        if (message.gamerUpStarHeroS2C != null && message.hasOwnProperty("gamerUpStarHeroS2C"))
            $root.GamerUpStarHeroS2C.encode(message.gamerUpStarHeroS2C, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
        if (message.gamerUpHeroSkillS2C != null && message.hasOwnProperty("gamerUpHeroSkillS2C"))
            $root.GamerUpHeroSkillS2C.encode(message.gamerUpHeroSkillS2C, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
        if (message.gamerGetHeroS2C != null && message.hasOwnProperty("gamerGetHeroS2C"))
            $root.GamerGetHeroS2C.encode(message.gamerGetHeroS2C, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
        if (message.gamerNotifyHerosChangeS2C != null && message.hasOwnProperty("gamerNotifyHerosChangeS2C"))
            $root.GamerNotifyHerosChangeS2C.encode(message.gamerNotifyHerosChangeS2C, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
        if (message.gamerNotifyHeroPropUpdateS2C != null && message.hasOwnProperty("gamerNotifyHeroPropUpdateS2C"))
            $root.GamerNotifyHeroPropUpdateS2C.encode(message.gamerNotifyHeroPropUpdateS2C, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
        if (message.gamerPVPLoadingS2C != null && message.hasOwnProperty("gamerPVPLoadingS2C"))
            $root.GamerPVPLoadingS2C.encode(message.gamerPVPLoadingS2C, writer.uint32(/* id 42, wireType 2 =*/338).fork()).ldelim();
        if (message.gamerNotifyPVPLoadingS2C != null && message.hasOwnProperty("gamerNotifyPVPLoadingS2C"))
            $root.GamerNotifyPVPLoadingS2C.encode(message.gamerNotifyPVPLoadingS2C, writer.uint32(/* id 43, wireType 2 =*/346).fork()).ldelim();
        if (message.gamerPVPSyncS2C != null && message.hasOwnProperty("gamerPVPSyncS2C"))
            $root.GamerPVPSyncS2C.encode(message.gamerPVPSyncS2C, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
        if (message.gamerNotifyGamerMiniS2C != null && message.hasOwnProperty("gamerNotifyGamerMiniS2C"))
            $root.GamerNotifyGamerMiniS2C.encode(message.gamerNotifyGamerMiniS2C, writer.uint32(/* id 45, wireType 2 =*/362).fork()).ldelim();
        if (message.gamerNotifyPVPSyncS2C != null && message.hasOwnProperty("gamerNotifyPVPSyncS2C"))
            $root.GamerNotifyPVPSyncS2C.encode(message.gamerNotifyPVPSyncS2C, writer.uint32(/* id 46, wireType 2 =*/370).fork()).ldelim();
        if (message.gamerNotifyNewPVPResultS2C != null && message.hasOwnProperty("gamerNotifyNewPVPResultS2C"))
            $root.GamerNotifyNewPVPResultS2C.encode(message.gamerNotifyNewPVPResultS2C, writer.uint32(/* id 47, wireType 2 =*/378).fork()).ldelim();
        if (message.gamerReliveS2C != null && message.hasOwnProperty("gamerReliveS2C"))
            $root.GamerReliveS2C.encode(message.gamerReliveS2C, writer.uint32(/* id 48, wireType 2 =*/386).fork()).ldelim();
        if (message.gamerNotifyIconChangeS2C != null && message.hasOwnProperty("gamerNotifyIconChangeS2C"))
            $root.GamerNotifyIconChangeS2C.encode(message.gamerNotifyIconChangeS2C, writer.uint32(/* id 49, wireType 2 =*/394).fork()).ldelim();
        if (message.gamerNotifyDiamonChangeS2C != null && message.hasOwnProperty("gamerNotifyDiamonChangeS2C"))
            $root.GamerNotifyDiamonChangeS2C.encode(message.gamerNotifyDiamonChangeS2C, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
        if (message.gamerNotifyEnergyChangeS2C != null && message.hasOwnProperty("gamerNotifyEnergyChangeS2C"))
            $root.GamerNotifyEnergyChangeS2C.encode(message.gamerNotifyEnergyChangeS2C, writer.uint32(/* id 51, wireType 2 =*/410).fork()).ldelim();
        if (message.gamerNotifyExpChangeS2C != null && message.hasOwnProperty("gamerNotifyExpChangeS2C"))
            $root.GamerNotifyExpChangeS2C.encode(message.gamerNotifyExpChangeS2C, writer.uint32(/* id 52, wireType 2 =*/418).fork()).ldelim();
        if (message.gamerGetRealTimeRankS2C != null && message.hasOwnProperty("gamerGetRealTimeRankS2C"))
            $root.GamerGetRealTimeRankS2C.encode(message.gamerGetRealTimeRankS2C, writer.uint32(/* id 53, wireType 2 =*/426).fork()).ldelim();
        if (message.gamerCheckPVPBattleS2C != null && message.hasOwnProperty("gamerCheckPVPBattleS2C"))
            $root.GamerCheckPVPBattleS2C.encode(message.gamerCheckPVPBattleS2C, writer.uint32(/* id 54, wireType 2 =*/434).fork()).ldelim();
        if (message.gamerUploadWXInfoS2C != null && message.hasOwnProperty("gamerUploadWXInfoS2C"))
            $root.GamerUploadWXInfoS2C.encode(message.gamerUploadWXInfoS2C, writer.uint32(/* id 55, wireType 2 =*/442).fork()).ldelim();
        if (message.gamerGetNoviceGuideS2C != null && message.hasOwnProperty("gamerGetNoviceGuideS2C"))
            $root.GamerGetNoviceGuideS2C.encode(message.gamerGetNoviceGuideS2C, writer.uint32(/* id 56, wireType 2 =*/450).fork()).ldelim();
        if (message.gamerNoviceGuideChangeS2C != null && message.hasOwnProperty("gamerNoviceGuideChangeS2C"))
            $root.GamerNoviceGuideChangeS2C.encode(message.gamerNoviceGuideChangeS2C, writer.uint32(/* id 57, wireType 2 =*/458).fork()).ldelim();
        if (message.gamerMatchS2C != null && message.hasOwnProperty("gamerMatchS2C"))
            $root.GamerMatchS2C.encode(message.gamerMatchS2C, writer.uint32(/* id 58, wireType 2 =*/466).fork()).ldelim();
        if (message.gamerCancelMatchS2C != null && message.hasOwnProperty("gamerCancelMatchS2C"))
            $root.GamerCancelMatchS2C.encode(message.gamerCancelMatchS2C, writer.uint32(/* id 59, wireType 2 =*/474).fork()).ldelim();
        if (message.gamerNotifyMatchInfoS2C != null && message.hasOwnProperty("gamerNotifyMatchInfoS2C"))
            $root.GamerNotifyMatchInfoS2C.encode(message.gamerNotifyMatchInfoS2C, writer.uint32(/* id 60, wireType 2 =*/482).fork()).ldelim();
        if (message.gamerGetRewardS2C != null && message.hasOwnProperty("gamerGetRewardS2C"))
            $root.GamerGetRewardS2C.encode(message.gamerGetRewardS2C, writer.uint32(/* id 61, wireType 2 =*/490).fork()).ldelim();
        if (message.gamerUseIconS2C != null && message.hasOwnProperty("gamerUseIconS2C"))
            $root.GamerUseIconS2C.encode(message.gamerUseIconS2C, writer.uint32(/* id 62, wireType 2 =*/498).fork()).ldelim();
        if (message.gamerNotifyGashaponInfoS2C != null && message.hasOwnProperty("gamerNotifyGashaponInfoS2C"))
            $root.GamerNotifyGashaponInfoS2C.encode(message.gamerNotifyGashaponInfoS2C, writer.uint32(/* id 63, wireType 2 =*/506).fork()).ldelim();
        if (message.gamerExtractGashaponS2C != null && message.hasOwnProperty("gamerExtractGashaponS2C"))
            $root.GamerExtractGashaponS2C.encode(message.gamerExtractGashaponS2C, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
        if (message.gamerGetGashaponPreviewS2C != null && message.hasOwnProperty("gamerGetGashaponPreviewS2C"))
            $root.GamerGetGashaponPreviewS2C.encode(message.gamerGetGashaponPreviewS2C, writer.uint32(/* id 65, wireType 2 =*/522).fork()).ldelim();
        if (message.gamerNotifyActivitiesS2C != null && message.hasOwnProperty("gamerNotifyActivitiesS2C"))
            $root.GamerNotifyActivitiesS2C.encode(message.gamerNotifyActivitiesS2C, writer.uint32(/* id 66, wireType 2 =*/530).fork()).ldelim();
        if (message.getActivityRewardS2C != null && message.hasOwnProperty("getActivityRewardS2C"))
            $root.GetActivityRewardS2C.encode(message.getActivityRewardS2C, writer.uint32(/* id 67, wireType 2 =*/538).fork()).ldelim();
        if (message.createGuildS2C != null && message.hasOwnProperty("createGuildS2C"))
            $root.CreateGuildS2C.encode(message.createGuildS2C, writer.uint32(/* id 68, wireType 2 =*/546).fork()).ldelim();
        if (message.guildGamerLoginS2C != null && message.hasOwnProperty("guildGamerLoginS2C"))
            $root.GuildGamerLoginS2C.encode(message.guildGamerLoginS2C, writer.uint32(/* id 69, wireType 2 =*/554).fork()).ldelim();
        if (message.guildGamerLoginoutS2C != null && message.hasOwnProperty("guildGamerLoginoutS2C"))
            $root.GuildGamerLoginoutS2C.encode(message.guildGamerLoginoutS2C, writer.uint32(/* id 70, wireType 2 =*/562).fork()).ldelim();
        if (message.dissolutionGuildS2C != null && message.hasOwnProperty("dissolutionGuildS2C"))
            $root.DissolutionGuildS2C.encode(message.dissolutionGuildS2C, writer.uint32(/* id 71, wireType 2 =*/570).fork()).ldelim();
        if (message.getGuildS2C != null && message.hasOwnProperty("getGuildS2C"))
            $root.GetGuildS2C.encode(message.getGuildS2C, writer.uint32(/* id 72, wireType 2 =*/578).fork()).ldelim();
        if (message.getGuildListS2C != null && message.hasOwnProperty("getGuildListS2C"))
            $root.GetGuildListS2C.encode(message.getGuildListS2C, writer.uint32(/* id 73, wireType 2 =*/586).fork()).ldelim();
        if (message.gamerNotifyApplyJoinGuildS2C != null && message.hasOwnProperty("gamerNotifyApplyJoinGuildS2C"))
            $root.GamerNotifyApplyJoinGuildS2C.encode(message.gamerNotifyApplyJoinGuildS2C, writer.uint32(/* id 74, wireType 2 =*/594).fork()).ldelim();
        if (message.applyJoinGuildS2C != null && message.hasOwnProperty("applyJoinGuildS2C"))
            $root.ApplyJoinGuildS2C.encode(message.applyJoinGuildS2C, writer.uint32(/* id 75, wireType 2 =*/602).fork()).ldelim();
        if (message.approvalJoinGuildS2C != null && message.hasOwnProperty("approvalJoinGuildS2C"))
            $root.ApprovalJoinGuildS2C.encode(message.approvalJoinGuildS2C, writer.uint32(/* id 76, wireType 2 =*/610).fork()).ldelim();
        if (message.gamerNotifyInviteJoinGuildS2C != null && message.hasOwnProperty("gamerNotifyInviteJoinGuildS2C"))
            $root.GamerNotifyInviteJoinGuildS2C.encode(message.gamerNotifyInviteJoinGuildS2C, writer.uint32(/* id 77, wireType 2 =*/618).fork()).ldelim();
        if (message.inviteJoinGuildS2C != null && message.hasOwnProperty("inviteJoinGuildS2C"))
            $root.InviteJoinGuildS2C.encode(message.inviteJoinGuildS2C, writer.uint32(/* id 78, wireType 2 =*/626).fork()).ldelim();
        if (message.agreeJoinGuildS2C != null && message.hasOwnProperty("agreeJoinGuildS2C"))
            $root.AgreeJoinGuildS2C.encode(message.agreeJoinGuildS2C, writer.uint32(/* id 79, wireType 2 =*/634).fork()).ldelim();
        if (message.quitGuildS2C != null && message.hasOwnProperty("quitGuildS2C"))
            $root.QuitGuildS2C.encode(message.quitGuildS2C, writer.uint32(/* id 80, wireType 2 =*/642).fork()).ldelim();
        if (message.kickOutGuildS2C != null && message.hasOwnProperty("kickOutGuildS2C"))
            $root.KickOutGuildS2C.encode(message.kickOutGuildS2C, writer.uint32(/* id 81, wireType 2 =*/650).fork()).ldelim();
        if (message.gamerNotifyGuildMemUpdateS2C != null && message.hasOwnProperty("gamerNotifyGuildMemUpdateS2C"))
            $root.GamerNotifyGuildMemUpdateS2C.encode(message.gamerNotifyGuildMemUpdateS2C, writer.uint32(/* id 82, wireType 2 =*/658).fork()).ldelim();
        if (message.guildChatS2C != null && message.hasOwnProperty("guildChatS2C"))
            $root.GuildChatS2C.encode(message.guildChatS2C, writer.uint32(/* id 83, wireType 2 =*/666).fork()).ldelim();
        if (message.gamerNotifyGuildChatS2C != null && message.hasOwnProperty("gamerNotifyGuildChatS2C"))
            $root.GamerNotifyGuildChatS2C.encode(message.gamerNotifyGuildChatS2C, writer.uint32(/* id 84, wireType 2 =*/674).fork()).ldelim();
        if (message.gMS2C != null && message.hasOwnProperty("gMS2C"))
            $root.GMS2C.encode(message.gMS2C, writer.uint32(/* id 85, wireType 2 =*/682).fork()).ldelim();
        if (message.checkPointListS2C != null && message.hasOwnProperty("checkPointListS2C"))
            $root.CheckPointListS2C.encode(message.checkPointListS2C, writer.uint32(/* id 86, wireType 2 =*/690).fork()).ldelim();
        if (message.gamerNotifyCheckPointListS2C != null && message.hasOwnProperty("gamerNotifyCheckPointListS2C"))
            $root.GamerNotifyCheckPointListS2C.encode(message.gamerNotifyCheckPointListS2C, writer.uint32(/* id 87, wireType 2 =*/698).fork()).ldelim();
        if (message.gamerNotifyNewCheckPointListS2C != null && message.hasOwnProperty("gamerNotifyNewCheckPointListS2C"))
            $root.GamerNotifyNewCheckPointListS2C.encode(message.gamerNotifyNewCheckPointListS2C, writer.uint32(/* id 88, wireType 2 =*/706).fork()).ldelim();
        if (message.gamerNotifyRewardS2C != null && message.hasOwnProperty("gamerNotifyRewardS2C"))
            $root.GamerNotifyRewardS2C.encode(message.gamerNotifyRewardS2C, writer.uint32(/* id 89, wireType 2 =*/714).fork()).ldelim();
        if (message.getPlotStarRewardS2C != null && message.hasOwnProperty("getPlotStarRewardS2C"))
            $root.GetPlotStarRewardS2C.encode(message.getPlotStarRewardS2C, writer.uint32(/* id 90, wireType 2 =*/722).fork()).ldelim();
        if (message.buyTimesCheckPointS2C != null && message.hasOwnProperty("buyTimesCheckPointS2C"))
            $root.BuyTimesCheckPointS2C.encode(message.buyTimesCheckPointS2C, writer.uint32(/* id 91, wireType 2 =*/730).fork()).ldelim();
        if (message.sweepCheckPointS2C != null && message.hasOwnProperty("sweepCheckPointS2C"))
            $root.SweepCheckPointS2C.encode(message.sweepCheckPointS2C, writer.uint32(/* id 92, wireType 2 =*/738).fork()).ldelim();
        if (message.gamerSettlePVES2C != null && message.hasOwnProperty("gamerSettlePVES2C"))
            $root.GamerSettlePVES2C.encode(message.gamerSettlePVES2C, writer.uint32(/* id 93, wireType 2 =*/746).fork()).ldelim();
        if (message.draugListS2C != null && message.hasOwnProperty("draugListS2C"))
            $root.DraugListS2C.encode(message.draugListS2C, writer.uint32(/* id 94, wireType 2 =*/754).fork()).ldelim();
        if (message.awakenDraugS2C != null && message.hasOwnProperty("awakenDraugS2C"))
            $root.AwakenDraugS2C.encode(message.awakenDraugS2C, writer.uint32(/* id 95, wireType 2 =*/762).fork()).ldelim();
        if (message.putDraugIntoPackS2C != null && message.hasOwnProperty("putDraugIntoPackS2C"))
            $root.PutDraugIntoPackS2C.encode(message.putDraugIntoPackS2C, writer.uint32(/* id 96, wireType 2 =*/770).fork()).ldelim();
        if (message.swallowDraugS2C != null && message.hasOwnProperty("swallowDraugS2C"))
            $root.SwallowDraugS2C.encode(message.swallowDraugS2C, writer.uint32(/* id 97, wireType 2 =*/778).fork()).ldelim();
        if (message.decomposeDraugS2C != null && message.hasOwnProperty("decomposeDraugS2C"))
            $root.DecomposeDraugS2C.encode(message.decomposeDraugS2C, writer.uint32(/* id 98, wireType 2 =*/786).fork()).ldelim();
        if (message.lockDraugS2C != null && message.hasOwnProperty("lockDraugS2C"))
            $root.LockDraugS2C.encode(message.lockDraugS2C, writer.uint32(/* id 99, wireType 2 =*/794).fork()).ldelim();
        if (message.wearDraugS2C != null && message.hasOwnProperty("wearDraugS2C"))
            $root.WearDraugS2C.encode(message.wearDraugS2C, writer.uint32(/* id 100, wireType 2 =*/802).fork()).ldelim();
        if (message.unwearDraugS2C != null && message.hasOwnProperty("unwearDraugS2C"))
            $root.UnwearDraugS2C.encode(message.unwearDraugS2C, writer.uint32(/* id 101, wireType 2 =*/810).fork()).ldelim();
        if (message.draugSelectHeroS2C != null && message.hasOwnProperty("draugSelectHeroS2C"))
            $root.DraugSelectHeroS2C.encode(message.draugSelectHeroS2C, writer.uint32(/* id 102, wireType 2 =*/818).fork()).ldelim();
        if (message.heroGroupListS2C != null && message.hasOwnProperty("heroGroupListS2C"))
            $root.HeroGroupListS2C.encode(message.heroGroupListS2C, writer.uint32(/* id 103, wireType 2 =*/826).fork()).ldelim();
        if (message.unlockHeroGroupS2C != null && message.hasOwnProperty("unlockHeroGroupS2C"))
            $root.UnlockHeroGroupS2C.encode(message.unlockHeroGroupS2C, writer.uint32(/* id 104, wireType 2 =*/834).fork()).ldelim();
        if (message.changeNameHeroGroupS2C != null && message.hasOwnProperty("changeNameHeroGroupS2C"))
            $root.ChangeNameHeroGroupS2C.encode(message.changeNameHeroGroupS2C, writer.uint32(/* id 105, wireType 2 =*/842).fork()).ldelim();
        if (message.gamerNotifyUnlockPosHeroGroupS2C != null && message.hasOwnProperty("gamerNotifyUnlockPosHeroGroupS2C"))
            $root.GamerNotifyUnlockPosHeroGroupS2C.encode(message.gamerNotifyUnlockPosHeroGroupS2C, writer.uint32(/* id 106, wireType 2 =*/850).fork()).ldelim();
        if (message.heroGroupChangeHeroS2C != null && message.hasOwnProperty("heroGroupChangeHeroS2C"))
            $root.HeroGroupChangeHeroS2C.encode(message.heroGroupChangeHeroS2C, writer.uint32(/* id 107, wireType 2 =*/858).fork()).ldelim();
        if (message.heroGroupChangeSkillS2C != null && message.hasOwnProperty("heroGroupChangeSkillS2C"))
            $root.HeroGroupChangeSkillS2C.encode(message.heroGroupChangeSkillS2C, writer.uint32(/* id 108, wireType 2 =*/866).fork()).ldelim();
        if (message.buyFatigueS2C != null && message.hasOwnProperty("buyFatigueS2C"))
            $root.BuyFatigueS2C.encode(message.buyFatigueS2C, writer.uint32(/* id 109, wireType 2 =*/874).fork()).ldelim();
        if (message.getFatigueWelfareS2C != null && message.hasOwnProperty("getFatigueWelfareS2C"))
            $root.GetFatigueWelfareS2C.encode(message.getFatigueWelfareS2C, writer.uint32(/* id 110, wireType 2 =*/882).fork()).ldelim();
        if (message.gamerNotifyFatigueS2C != null && message.hasOwnProperty("gamerNotifyFatigueS2C"))
            $root.GamerNotifyFatigueS2C.encode(message.gamerNotifyFatigueS2C, writer.uint32(/* id 111, wireType 2 =*/890).fork()).ldelim();
        if (message.upStarEquipS2C != null && message.hasOwnProperty("upStarEquipS2C"))
            $root.UpStarEquipS2C.encode(message.upStarEquipS2C, writer.uint32(/* id 112, wireType 2 =*/898).fork()).ldelim();
        if (message.eatEquipsS2C != null && message.hasOwnProperty("eatEquipsS2C"))
            $root.EatEquipsS2C.encode(message.eatEquipsS2C, writer.uint32(/* id 113, wireType 2 =*/906).fork()).ldelim();
        if (message.desEquipS2C != null && message.hasOwnProperty("desEquipS2C"))
            $root.DesEquipS2C.encode(message.desEquipS2C, writer.uint32(/* id 114, wireType 2 =*/914).fork()).ldelim();
        if (message.takeOnEquipS2C != null && message.hasOwnProperty("takeOnEquipS2C"))
            $root.TakeOnEquipS2C.encode(message.takeOnEquipS2C, writer.uint32(/* id 115, wireType 2 =*/922).fork()).ldelim();
        if (message.takeOffEquipS2C != null && message.hasOwnProperty("takeOffEquipS2C"))
            $root.TakeOffEquipS2C.encode(message.takeOffEquipS2C, writer.uint32(/* id 116, wireType 2 =*/930).fork()).ldelim();
        if (message.redSpotS2C != null && message.hasOwnProperty("redSpotS2C"))
            $root.RedSpotS2C.encode(message.redSpotS2C, writer.uint32(/* id 117, wireType 2 =*/938).fork()).ldelim();
        if (message.makeTeamS2C != null && message.hasOwnProperty("makeTeamS2C"))
            $root.MakeTeamS2C.encode(message.makeTeamS2C, writer.uint32(/* id 118, wireType 2 =*/946).fork()).ldelim();
        if (message.setTeamAimS2C != null && message.hasOwnProperty("setTeamAimS2C"))
            $root.SetTeamAimS2C.encode(message.setTeamAimS2C, writer.uint32(/* id 119, wireType 2 =*/954).fork()).ldelim();
        if (message.joinTeamS2C != null && message.hasOwnProperty("joinTeamS2C"))
            $root.JoinTeamS2C.encode(message.joinTeamS2C, writer.uint32(/* id 120, wireType 2 =*/962).fork()).ldelim();
        if (message.exitTeamS2C != null && message.hasOwnProperty("exitTeamS2C"))
            $root.ExitTeamS2C.encode(message.exitTeamS2C, writer.uint32(/* id 121, wireType 2 =*/970).fork()).ldelim();
        if (message.turnOverTeamLeaderS2C != null && message.hasOwnProperty("turnOverTeamLeaderS2C"))
            $root.TurnOverTeamLeaderS2C.encode(message.turnOverTeamLeaderS2C, writer.uint32(/* id 122, wireType 2 =*/978).fork()).ldelim();
        if (message.inviteTeamS2C != null && message.hasOwnProperty("inviteTeamS2C"))
            $root.InviteTeamS2C.encode(message.inviteTeamS2C, writer.uint32(/* id 123, wireType 2 =*/986).fork()).ldelim();
        if (message.rejectTeamS2C != null && message.hasOwnProperty("rejectTeamS2C"))
            $root.RejectTeamS2C.encode(message.rejectTeamS2C, writer.uint32(/* id 124, wireType 2 =*/994).fork()).ldelim();
        if (message.gamerNotifyTeamS2C != null && message.hasOwnProperty("gamerNotifyTeamS2C"))
            $root.GamerNotifyTeamS2C.encode(message.gamerNotifyTeamS2C, writer.uint32(/* id 125, wireType 2 =*/1002).fork()).ldelim();
        if (message.gamerNotifyTeamInfoS2C != null && message.hasOwnProperty("gamerNotifyTeamInfoS2C"))
            $root.GamerNotifyTeamInfoS2C.encode(message.gamerNotifyTeamInfoS2C, writer.uint32(/* id 126, wireType 2 =*/1010).fork()).ldelim();
        if (message.gamerNotifyTeamChangeS2C != null && message.hasOwnProperty("gamerNotifyTeamChangeS2C"))
            $root.GamerNotifyTeamChangeS2C.encode(message.gamerNotifyTeamChangeS2C, writer.uint32(/* id 127, wireType 2 =*/1018).fork()).ldelim();
        if (message.gamerNotifyTeamMemberChangeS2C != null && message.hasOwnProperty("gamerNotifyTeamMemberChangeS2C"))
            $root.GamerNotifyTeamMemberChangeS2C.encode(message.gamerNotifyTeamMemberChangeS2C, writer.uint32(/* id 128, wireType 2 =*/1026).fork()).ldelim();
        if (message.gamerNotifyLeaveTeamS2C != null && message.hasOwnProperty("gamerNotifyLeaveTeamS2C"))
            $root.GamerNotifyLeaveTeamS2C.encode(message.gamerNotifyLeaveTeamS2C, writer.uint32(/* id 129, wireType 2 =*/1034).fork()).ldelim();
        if (message.kickTeamS2C != null && message.hasOwnProperty("kickTeamS2C"))
            $root.KickTeamS2C.encode(message.kickTeamS2C, writer.uint32(/* id 130, wireType 2 =*/1042).fork()).ldelim();
        if (message.setTeamHelpS2C != null && message.hasOwnProperty("setTeamHelpS2C"))
            $root.SetTeamHelpS2C.encode(message.setTeamHelpS2C, writer.uint32(/* id 131, wireType 2 =*/1050).fork()).ldelim();
        if (message.setTeamHeroS2C != null && message.hasOwnProperty("setTeamHeroS2C"))
            $root.SetTeamHeroS2C.encode(message.setTeamHeroS2C, writer.uint32(/* id 132, wireType 2 =*/1058).fork()).ldelim();
        if (message.switchTeamReadyS2C != null && message.hasOwnProperty("switchTeamReadyS2C"))
            $root.SwitchTeamReadyS2C.encode(message.switchTeamReadyS2C, writer.uint32(/* id 133, wireType 2 =*/1066).fork()).ldelim();
        if (message.gamerNotifyTeamReadyS2C != null && message.hasOwnProperty("gamerNotifyTeamReadyS2C"))
            $root.GamerNotifyTeamReadyS2C.encode(message.gamerNotifyTeamReadyS2C, writer.uint32(/* id 134, wireType 2 =*/1074).fork()).ldelim();
        if (message.teamBattleS2C != null && message.hasOwnProperty("teamBattleS2C"))
            $root.TeamBattleS2C.encode(message.teamBattleS2C, writer.uint32(/* id 135, wireType 2 =*/1082).fork()).ldelim();
        if (message.getDanInfoS2C != null && message.hasOwnProperty("getDanInfoS2C"))
            $root.GetDanInfoS2C.encode(message.getDanInfoS2C, writer.uint32(/* id 136, wireType 2 =*/1090).fork()).ldelim();
        if (message.gamerNotifyDanInfoS2C != null && message.hasOwnProperty("gamerNotifyDanInfoS2C"))
            $root.GamerNotifyDanInfoS2C.encode(message.gamerNotifyDanInfoS2C, writer.uint32(/* id 137, wireType 2 =*/1098).fork()).ldelim();
        if (message.gamerNotifyNewSeasonS2C != null && message.hasOwnProperty("gamerNotifyNewSeasonS2C"))
            $root.GamerNotifyNewSeasonS2C.encode(message.gamerNotifyNewSeasonS2C, writer.uint32(/* id 138, wireType 2 =*/1106).fork()).ldelim();
        if (message.getDuelRankS2C != null && message.hasOwnProperty("getDuelRankS2C"))
            $root.GetDuelRankS2C.encode(message.getDuelRankS2C, writer.uint32(/* id 139, wireType 2 =*/1114).fork()).ldelim();
        if (message.sysListS2C != null && message.hasOwnProperty("sysListS2C"))
            $root.SysListS2C.encode(message.sysListS2C, writer.uint32(/* id 140, wireType 2 =*/1122).fork()).ldelim();
        if (message.sysOpenShowS2C != null && message.hasOwnProperty("sysOpenShowS2C"))
            $root.SysOpenShowS2C.encode(message.sysOpenShowS2C, writer.uint32(/* id 141, wireType 2 =*/1130).fork()).ldelim();
        if (message.getQuestsS2C != null && message.hasOwnProperty("getQuestsS2C"))
            $root.GetQuestsS2C.encode(message.getQuestsS2C, writer.uint32(/* id 142, wireType 2 =*/1138).fork()).ldelim();
        if (message.gamerNotifyQuestsS2C != null && message.hasOwnProperty("gamerNotifyQuestsS2C"))
            $root.GamerNotifyQuestsS2C.encode(message.gamerNotifyQuestsS2C, writer.uint32(/* id 143, wireType 2 =*/1146).fork()).ldelim();
        if (message.getQuestRewardS2C != null && message.hasOwnProperty("getQuestRewardS2C"))
            $root.GetQuestRewardS2C.encode(message.getQuestRewardS2C, writer.uint32(/* id 144, wireType 2 =*/1154).fork()).ldelim();
        if (message.getDailyQuestRewardS2C != null && message.hasOwnProperty("getDailyQuestRewardS2C"))
            $root.GetDailyQuestRewardS2C.encode(message.getDailyQuestRewardS2C, writer.uint32(/* id 145, wireType 2 =*/1162).fork()).ldelim();
        if (message.gamerHeroImageChooseS2C != null && message.hasOwnProperty("gamerHeroImageChooseS2C"))
            $root.GamerHeroImageChooseS2C.encode(message.gamerHeroImageChooseS2C, writer.uint32(/* id 146, wireType 2 =*/1170).fork()).ldelim();
        if (message.gamerHeroImageChangeS2C != null && message.hasOwnProperty("gamerHeroImageChangeS2C"))
            $root.GamerHeroImageChangeS2C.encode(message.gamerHeroImageChangeS2C, writer.uint32(/* id 147, wireType 2 =*/1178).fork()).ldelim();
        if (message.gamerBuyRollS2C != null && message.hasOwnProperty("gamerBuyRollS2C"))
            $root.GamerBuyRollS2C.encode(message.gamerBuyRollS2C, writer.uint32(/* id 148, wireType 2 =*/1186).fork()).ldelim();
        if (message.getGamerSecretLandS2C != null && message.hasOwnProperty("getGamerSecretLandS2C"))
            $root.GetGamerSecretLandS2C.encode(message.getGamerSecretLandS2C, writer.uint32(/* id 149, wireType 2 =*/1194).fork()).ldelim();
        if (message.gamerNotifyGamerSecretLandInfoS2C != null && message.hasOwnProperty("gamerNotifyGamerSecretLandInfoS2C"))
            $root.GamerNotifyGamerSecretLandInfoS2C.encode(message.gamerNotifyGamerSecretLandInfoS2C, writer.uint32(/* id 150, wireType 2 =*/1202).fork()).ldelim();
        if (message.gamerNotifySecretLandInfoS2C != null && message.hasOwnProperty("gamerNotifySecretLandInfoS2C"))
            $root.GamerNotifySecretLandInfoS2C.encode(message.gamerNotifySecretLandInfoS2C, writer.uint32(/* id 151, wireType 2 =*/1210).fork()).ldelim();
        if (message.gamerSecretLandBattleRewardS2C != null && message.hasOwnProperty("gamerSecretLandBattleRewardS2C"))
            $root.GamerSecretLandBattleRewardS2C.encode(message.gamerSecretLandBattleRewardS2C, writer.uint32(/* id 152, wireType 2 =*/1218).fork()).ldelim();
        if (message.gamerSecretLandWeekRewardS2C != null && message.hasOwnProperty("gamerSecretLandWeekRewardS2C"))
            $root.GamerSecretLandWeekRewardS2C.encode(message.gamerSecretLandWeekRewardS2C, writer.uint32(/* id 153, wireType 2 =*/1226).fork()).ldelim();
        if (message.gamerSecretLandRankS2C != null && message.hasOwnProperty("gamerSecretLandRankS2C"))
            $root.GamerSecretLandRankS2C.encode(message.gamerSecretLandRankS2C, writer.uint32(/* id 154, wireType 2 =*/1234).fork()).ldelim();
        if (message.getGamerSecretLandInfoS2C != null && message.hasOwnProperty("getGamerSecretLandInfoS2C"))
            $root.GetGamerSecretLandInfoS2C.encode(message.getGamerSecretLandInfoS2C, writer.uint32(/* id 155, wireType 2 =*/1242).fork()).ldelim();
        if (message.gamerNotifySLTreasureBoxS2C != null && message.hasOwnProperty("gamerNotifySLTreasureBoxS2C"))
            $root.GamerNotifySLTreasureBoxS2C.encode(message.gamerNotifySLTreasureBoxS2C, writer.uint32(/* id 156, wireType 2 =*/1250).fork()).ldelim();
        if (message.gamerNotifyNewSecretLandResultS2C != null && message.hasOwnProperty("gamerNotifyNewSecretLandResultS2C"))
            $root.GamerNotifyNewSecretLandResultS2C.encode(message.gamerNotifyNewSecretLandResultS2C, writer.uint32(/* id 157, wireType 2 =*/1258).fork()).ldelim();
        if (message.gamerChangeItemIsSawS2C != null && message.hasOwnProperty("gamerChangeItemIsSawS2C"))
            $root.GamerChangeItemIsSawS2C.encode(message.gamerChangeItemIsSawS2C, writer.uint32(/* id 158, wireType 2 =*/1266).fork()).ldelim();
        return writer;
    };
    S2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    S2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.S2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.key = reader.string();
                break;
            case 3:
                message.gamerLoginS2C = $root.GamerLoginS2C.decode(reader, reader.uint32());
                break;
            case 4:
                message.gamerLoginGetDataS2C = $root.GamerLoginGetDataS2C.decode(reader, reader.uint32());
                break;
            case 5:
                message.serverTimeS2C = $root.ServerTimeS2C.decode(reader, reader.uint32());
                break;
            case 6:
                message.gamerNotifyLoginOtherS2C = $root.GamerNotifyLoginOtherS2C.decode(reader, reader.uint32());
                break;
            case 7:
                message.gamerSubChatChannelS2C = $root.GamerSubChatChannelS2C.decode(reader, reader.uint32());
                break;
            case 8:
                message.gamerChangeNameS2C = $root.GamerChangeNameS2C.decode(reader, reader.uint32());
                break;
            case 9:
                message.gamerChangeAvatarS2C = $root.GamerChangeAvatarS2C.decode(reader, reader.uint32());
                break;
            case 10:
                message.gamerNotifyExpLevelS2C = $root.GamerNotifyExpLevelS2C.decode(reader, reader.uint32());
                break;
            case 11:
                message.gamerGetBackpackS2C = $root.GamerGetBackpackS2C.decode(reader, reader.uint32());
                break;
            case 12:
                message.gamerNotifyItemChangeS2C = $root.GamerNotifyItemChangeS2C.decode(reader, reader.uint32());
                break;
            case 13:
                message.gamerSellItemS2C = $root.GamerSellItemS2C.decode(reader, reader.uint32());
                break;
            case 14:
                message.gamerUseItemS2C = $root.GamerUseItemS2C.decode(reader, reader.uint32());
                break;
            case 15:
                message.gamerFriendChatS2C = $root.GamerFriendChatS2C.decode(reader, reader.uint32());
                break;
            case 16:
                message.gamerWorldChatS2C = $root.GamerWorldChatS2C.decode(reader, reader.uint32());
                break;
            case 17:
                message.gamerTestChatS2C = $root.GamerTestChatS2C.decode(reader, reader.uint32());
                break;
            case 18:
                message.gamerClubRequestS2C = $root.GamerClubRequestS2C.decode(reader, reader.uint32());
                break;
            case 19:
                message.gamerNotifyNewChatS2C = $root.GamerNotifyNewChatS2C.decode(reader, reader.uint32());
                break;
            case 20:
                message.gamerNewFriendReqS2C = $root.GamerNewFriendReqS2C.decode(reader, reader.uint32());
                break;
            case 21:
                message.gamerDelFriendS2C = $root.GamerDelFriendS2C.decode(reader, reader.uint32());
                break;
            case 22:
                message.gamerNotifyNewFriendReqS2C = $root.GamerNotifyNewFriendReqS2C.decode(reader, reader.uint32());
                break;
            case 23:
                message.gamerProcessFriendReqS2C = $root.GamerProcessFriendReqS2C.decode(reader, reader.uint32());
                break;
            case 24:
                message.gamerNotifyNewFriendS2C = $root.GamerNotifyNewFriendS2C.decode(reader, reader.uint32());
                break;
            case 25:
                message.gamerNotifyDelFriendS2C = $root.GamerNotifyDelFriendS2C.decode(reader, reader.uint32());
                break;
            case 26:
                message.gamerNotifyNoticeS2C = $root.GamerNotifyNoticeS2C.decode(reader, reader.uint32());
                break;
            case 27:
                message.gamerNotifyMailS2C = $root.GamerNotifyMailS2C.decode(reader, reader.uint32());
                break;
            case 28:
                message.gamerNotifyNewMailS2C = $root.GamerNotifyNewMailS2C.decode(reader, reader.uint32());
                break;
            case 29:
                message.gamerGetMailS2C = $root.GamerGetMailS2C.decode(reader, reader.uint32());
                break;
            case 30:
                message.gamerDelMailS2C = $root.GamerDelMailS2C.decode(reader, reader.uint32());
                break;
            case 31:
                message.gamerDelHaveReadMailS2C = $root.GamerDelHaveReadMailS2C.decode(reader, reader.uint32());
                break;
            case 32:
                message.gamerOneKeyRcvMailRewardS2C = $root.GamerOneKeyRcvMailRewardS2C.decode(reader, reader.uint32());
                break;
            case 33:
                message.gamerChangeMailStateS2C = $root.GamerChangeMailStateS2C.decode(reader, reader.uint32());
                break;
            case 34:
                message.gamerNewHeroS2C = $root.GamerNewHeroS2C.decode(reader, reader.uint32());
                break;
            case 35:
                message.gamerUpgradeHeroS2C = $root.GamerUpgradeHeroS2C.decode(reader, reader.uint32());
                break;
            case 36:
                message.gamerUseHeroMedicineS2C = $root.GamerUseHeroMedicineS2C.decode(reader, reader.uint32());
                break;
            case 37:
                message.gamerUpStarHeroS2C = $root.GamerUpStarHeroS2C.decode(reader, reader.uint32());
                break;
            case 38:
                message.gamerUpHeroSkillS2C = $root.GamerUpHeroSkillS2C.decode(reader, reader.uint32());
                break;
            case 39:
                message.gamerGetHeroS2C = $root.GamerGetHeroS2C.decode(reader, reader.uint32());
                break;
            case 40:
                message.gamerNotifyHerosChangeS2C = $root.GamerNotifyHerosChangeS2C.decode(reader, reader.uint32());
                break;
            case 41:
                message.gamerNotifyHeroPropUpdateS2C = $root.GamerNotifyHeroPropUpdateS2C.decode(reader, reader.uint32());
                break;
            case 42:
                message.gamerPVPLoadingS2C = $root.GamerPVPLoadingS2C.decode(reader, reader.uint32());
                break;
            case 43:
                message.gamerNotifyPVPLoadingS2C = $root.GamerNotifyPVPLoadingS2C.decode(reader, reader.uint32());
                break;
            case 44:
                message.gamerPVPSyncS2C = $root.GamerPVPSyncS2C.decode(reader, reader.uint32());
                break;
            case 45:
                message.gamerNotifyGamerMiniS2C = $root.GamerNotifyGamerMiniS2C.decode(reader, reader.uint32());
                break;
            case 46:
                message.gamerNotifyPVPSyncS2C = $root.GamerNotifyPVPSyncS2C.decode(reader, reader.uint32());
                break;
            case 47:
                message.gamerNotifyNewPVPResultS2C = $root.GamerNotifyNewPVPResultS2C.decode(reader, reader.uint32());
                break;
            case 48:
                message.gamerReliveS2C = $root.GamerReliveS2C.decode(reader, reader.uint32());
                break;
            case 49:
                message.gamerNotifyIconChangeS2C = $root.GamerNotifyIconChangeS2C.decode(reader, reader.uint32());
                break;
            case 50:
                message.gamerNotifyDiamonChangeS2C = $root.GamerNotifyDiamonChangeS2C.decode(reader, reader.uint32());
                break;
            case 51:
                message.gamerNotifyEnergyChangeS2C = $root.GamerNotifyEnergyChangeS2C.decode(reader, reader.uint32());
                break;
            case 52:
                message.gamerNotifyExpChangeS2C = $root.GamerNotifyExpChangeS2C.decode(reader, reader.uint32());
                break;
            case 53:
                message.gamerGetRealTimeRankS2C = $root.GamerGetRealTimeRankS2C.decode(reader, reader.uint32());
                break;
            case 54:
                message.gamerCheckPVPBattleS2C = $root.GamerCheckPVPBattleS2C.decode(reader, reader.uint32());
                break;
            case 55:
                message.gamerUploadWXInfoS2C = $root.GamerUploadWXInfoS2C.decode(reader, reader.uint32());
                break;
            case 56:
                message.gamerGetNoviceGuideS2C = $root.GamerGetNoviceGuideS2C.decode(reader, reader.uint32());
                break;
            case 57:
                message.gamerNoviceGuideChangeS2C = $root.GamerNoviceGuideChangeS2C.decode(reader, reader.uint32());
                break;
            case 58:
                message.gamerMatchS2C = $root.GamerMatchS2C.decode(reader, reader.uint32());
                break;
            case 59:
                message.gamerCancelMatchS2C = $root.GamerCancelMatchS2C.decode(reader, reader.uint32());
                break;
            case 60:
                message.gamerNotifyMatchInfoS2C = $root.GamerNotifyMatchInfoS2C.decode(reader, reader.uint32());
                break;
            case 61:
                message.gamerGetRewardS2C = $root.GamerGetRewardS2C.decode(reader, reader.uint32());
                break;
            case 62:
                message.gamerUseIconS2C = $root.GamerUseIconS2C.decode(reader, reader.uint32());
                break;
            case 63:
                message.gamerNotifyGashaponInfoS2C = $root.GamerNotifyGashaponInfoS2C.decode(reader, reader.uint32());
                break;
            case 64:
                message.gamerExtractGashaponS2C = $root.GamerExtractGashaponS2C.decode(reader, reader.uint32());
                break;
            case 65:
                message.gamerGetGashaponPreviewS2C = $root.GamerGetGashaponPreviewS2C.decode(reader, reader.uint32());
                break;
            case 66:
                message.gamerNotifyActivitiesS2C = $root.GamerNotifyActivitiesS2C.decode(reader, reader.uint32());
                break;
            case 67:
                message.getActivityRewardS2C = $root.GetActivityRewardS2C.decode(reader, reader.uint32());
                break;
            case 68:
                message.createGuildS2C = $root.CreateGuildS2C.decode(reader, reader.uint32());
                break;
            case 69:
                message.guildGamerLoginS2C = $root.GuildGamerLoginS2C.decode(reader, reader.uint32());
                break;
            case 70:
                message.guildGamerLoginoutS2C = $root.GuildGamerLoginoutS2C.decode(reader, reader.uint32());
                break;
            case 71:
                message.dissolutionGuildS2C = $root.DissolutionGuildS2C.decode(reader, reader.uint32());
                break;
            case 72:
                message.getGuildS2C = $root.GetGuildS2C.decode(reader, reader.uint32());
                break;
            case 73:
                message.getGuildListS2C = $root.GetGuildListS2C.decode(reader, reader.uint32());
                break;
            case 74:
                message.gamerNotifyApplyJoinGuildS2C = $root.GamerNotifyApplyJoinGuildS2C.decode(reader, reader.uint32());
                break;
            case 75:
                message.applyJoinGuildS2C = $root.ApplyJoinGuildS2C.decode(reader, reader.uint32());
                break;
            case 76:
                message.approvalJoinGuildS2C = $root.ApprovalJoinGuildS2C.decode(reader, reader.uint32());
                break;
            case 77:
                message.gamerNotifyInviteJoinGuildS2C = $root.GamerNotifyInviteJoinGuildS2C.decode(reader, reader.uint32());
                break;
            case 78:
                message.inviteJoinGuildS2C = $root.InviteJoinGuildS2C.decode(reader, reader.uint32());
                break;
            case 79:
                message.agreeJoinGuildS2C = $root.AgreeJoinGuildS2C.decode(reader, reader.uint32());
                break;
            case 80:
                message.quitGuildS2C = $root.QuitGuildS2C.decode(reader, reader.uint32());
                break;
            case 81:
                message.kickOutGuildS2C = $root.KickOutGuildS2C.decode(reader, reader.uint32());
                break;
            case 82:
                message.gamerNotifyGuildMemUpdateS2C = $root.GamerNotifyGuildMemUpdateS2C.decode(reader, reader.uint32());
                break;
            case 83:
                message.guildChatS2C = $root.GuildChatS2C.decode(reader, reader.uint32());
                break;
            case 84:
                message.gamerNotifyGuildChatS2C = $root.GamerNotifyGuildChatS2C.decode(reader, reader.uint32());
                break;
            case 85:
                message.gMS2C = $root.GMS2C.decode(reader, reader.uint32());
                break;
            case 86:
                message.checkPointListS2C = $root.CheckPointListS2C.decode(reader, reader.uint32());
                break;
            case 87:
                message.gamerNotifyCheckPointListS2C = $root.GamerNotifyCheckPointListS2C.decode(reader, reader.uint32());
                break;
            case 88:
                message.gamerNotifyNewCheckPointListS2C = $root.GamerNotifyNewCheckPointListS2C.decode(reader, reader.uint32());
                break;
            case 89:
                message.gamerNotifyRewardS2C = $root.GamerNotifyRewardS2C.decode(reader, reader.uint32());
                break;
            case 90:
                message.getPlotStarRewardS2C = $root.GetPlotStarRewardS2C.decode(reader, reader.uint32());
                break;
            case 91:
                message.buyTimesCheckPointS2C = $root.BuyTimesCheckPointS2C.decode(reader, reader.uint32());
                break;
            case 92:
                message.sweepCheckPointS2C = $root.SweepCheckPointS2C.decode(reader, reader.uint32());
                break;
            case 93:
                message.gamerSettlePVES2C = $root.GamerSettlePVES2C.decode(reader, reader.uint32());
                break;
            case 94:
                message.draugListS2C = $root.DraugListS2C.decode(reader, reader.uint32());
                break;
            case 95:
                message.awakenDraugS2C = $root.AwakenDraugS2C.decode(reader, reader.uint32());
                break;
            case 96:
                message.putDraugIntoPackS2C = $root.PutDraugIntoPackS2C.decode(reader, reader.uint32());
                break;
            case 97:
                message.swallowDraugS2C = $root.SwallowDraugS2C.decode(reader, reader.uint32());
                break;
            case 98:
                message.decomposeDraugS2C = $root.DecomposeDraugS2C.decode(reader, reader.uint32());
                break;
            case 99:
                message.lockDraugS2C = $root.LockDraugS2C.decode(reader, reader.uint32());
                break;
            case 100:
                message.wearDraugS2C = $root.WearDraugS2C.decode(reader, reader.uint32());
                break;
            case 101:
                message.unwearDraugS2C = $root.UnwearDraugS2C.decode(reader, reader.uint32());
                break;
            case 102:
                message.draugSelectHeroS2C = $root.DraugSelectHeroS2C.decode(reader, reader.uint32());
                break;
            case 103:
                message.heroGroupListS2C = $root.HeroGroupListS2C.decode(reader, reader.uint32());
                break;
            case 104:
                message.unlockHeroGroupS2C = $root.UnlockHeroGroupS2C.decode(reader, reader.uint32());
                break;
            case 105:
                message.changeNameHeroGroupS2C = $root.ChangeNameHeroGroupS2C.decode(reader, reader.uint32());
                break;
            case 106:
                message.gamerNotifyUnlockPosHeroGroupS2C = $root.GamerNotifyUnlockPosHeroGroupS2C.decode(reader, reader.uint32());
                break;
            case 107:
                message.heroGroupChangeHeroS2C = $root.HeroGroupChangeHeroS2C.decode(reader, reader.uint32());
                break;
            case 108:
                message.heroGroupChangeSkillS2C = $root.HeroGroupChangeSkillS2C.decode(reader, reader.uint32());
                break;
            case 109:
                message.buyFatigueS2C = $root.BuyFatigueS2C.decode(reader, reader.uint32());
                break;
            case 110:
                message.getFatigueWelfareS2C = $root.GetFatigueWelfareS2C.decode(reader, reader.uint32());
                break;
            case 111:
                message.gamerNotifyFatigueS2C = $root.GamerNotifyFatigueS2C.decode(reader, reader.uint32());
                break;
            case 112:
                message.upStarEquipS2C = $root.UpStarEquipS2C.decode(reader, reader.uint32());
                break;
            case 113:
                message.eatEquipsS2C = $root.EatEquipsS2C.decode(reader, reader.uint32());
                break;
            case 114:
                message.desEquipS2C = $root.DesEquipS2C.decode(reader, reader.uint32());
                break;
            case 115:
                message.takeOnEquipS2C = $root.TakeOnEquipS2C.decode(reader, reader.uint32());
                break;
            case 116:
                message.takeOffEquipS2C = $root.TakeOffEquipS2C.decode(reader, reader.uint32());
                break;
            case 117:
                message.redSpotS2C = $root.RedSpotS2C.decode(reader, reader.uint32());
                break;
            case 118:
                message.makeTeamS2C = $root.MakeTeamS2C.decode(reader, reader.uint32());
                break;
            case 119:
                message.setTeamAimS2C = $root.SetTeamAimS2C.decode(reader, reader.uint32());
                break;
            case 120:
                message.joinTeamS2C = $root.JoinTeamS2C.decode(reader, reader.uint32());
                break;
            case 121:
                message.exitTeamS2C = $root.ExitTeamS2C.decode(reader, reader.uint32());
                break;
            case 122:
                message.turnOverTeamLeaderS2C = $root.TurnOverTeamLeaderS2C.decode(reader, reader.uint32());
                break;
            case 123:
                message.inviteTeamS2C = $root.InviteTeamS2C.decode(reader, reader.uint32());
                break;
            case 124:
                message.rejectTeamS2C = $root.RejectTeamS2C.decode(reader, reader.uint32());
                break;
            case 125:
                message.gamerNotifyTeamS2C = $root.GamerNotifyTeamS2C.decode(reader, reader.uint32());
                break;
            case 126:
                message.gamerNotifyTeamInfoS2C = $root.GamerNotifyTeamInfoS2C.decode(reader, reader.uint32());
                break;
            case 127:
                message.gamerNotifyTeamChangeS2C = $root.GamerNotifyTeamChangeS2C.decode(reader, reader.uint32());
                break;
            case 128:
                message.gamerNotifyTeamMemberChangeS2C = $root.GamerNotifyTeamMemberChangeS2C.decode(reader, reader.uint32());
                break;
            case 129:
                message.gamerNotifyLeaveTeamS2C = $root.GamerNotifyLeaveTeamS2C.decode(reader, reader.uint32());
                break;
            case 130:
                message.kickTeamS2C = $root.KickTeamS2C.decode(reader, reader.uint32());
                break;
            case 131:
                message.setTeamHelpS2C = $root.SetTeamHelpS2C.decode(reader, reader.uint32());
                break;
            case 132:
                message.setTeamHeroS2C = $root.SetTeamHeroS2C.decode(reader, reader.uint32());
                break;
            case 133:
                message.switchTeamReadyS2C = $root.SwitchTeamReadyS2C.decode(reader, reader.uint32());
                break;
            case 134:
                message.gamerNotifyTeamReadyS2C = $root.GamerNotifyTeamReadyS2C.decode(reader, reader.uint32());
                break;
            case 135:
                message.teamBattleS2C = $root.TeamBattleS2C.decode(reader, reader.uint32());
                break;
            case 136:
                message.getDanInfoS2C = $root.GetDanInfoS2C.decode(reader, reader.uint32());
                break;
            case 137:
                message.gamerNotifyDanInfoS2C = $root.GamerNotifyDanInfoS2C.decode(reader, reader.uint32());
                break;
            case 138:
                message.gamerNotifyNewSeasonS2C = $root.GamerNotifyNewSeasonS2C.decode(reader, reader.uint32());
                break;
            case 139:
                message.getDuelRankS2C = $root.GetDuelRankS2C.decode(reader, reader.uint32());
                break;
            case 140:
                message.sysListS2C = $root.SysListS2C.decode(reader, reader.uint32());
                break;
            case 141:
                message.sysOpenShowS2C = $root.SysOpenShowS2C.decode(reader, reader.uint32());
                break;
            case 142:
                message.getQuestsS2C = $root.GetQuestsS2C.decode(reader, reader.uint32());
                break;
            case 143:
                message.gamerNotifyQuestsS2C = $root.GamerNotifyQuestsS2C.decode(reader, reader.uint32());
                break;
            case 144:
                message.getQuestRewardS2C = $root.GetQuestRewardS2C.decode(reader, reader.uint32());
                break;
            case 145:
                message.getDailyQuestRewardS2C = $root.GetDailyQuestRewardS2C.decode(reader, reader.uint32());
                break;
            case 146:
                message.gamerHeroImageChooseS2C = $root.GamerHeroImageChooseS2C.decode(reader, reader.uint32());
                break;
            case 147:
                message.gamerHeroImageChangeS2C = $root.GamerHeroImageChangeS2C.decode(reader, reader.uint32());
                break;
            case 148:
                message.gamerBuyRollS2C = $root.GamerBuyRollS2C.decode(reader, reader.uint32());
                break;
            case 149:
                message.getGamerSecretLandS2C = $root.GetGamerSecretLandS2C.decode(reader, reader.uint32());
                break;
            case 150:
                message.gamerNotifyGamerSecretLandInfoS2C = $root.GamerNotifyGamerSecretLandInfoS2C.decode(reader, reader.uint32());
                break;
            case 151:
                message.gamerNotifySecretLandInfoS2C = $root.GamerNotifySecretLandInfoS2C.decode(reader, reader.uint32());
                break;
            case 152:
                message.gamerSecretLandBattleRewardS2C = $root.GamerSecretLandBattleRewardS2C.decode(reader, reader.uint32());
                break;
            case 153:
                message.gamerSecretLandWeekRewardS2C = $root.GamerSecretLandWeekRewardS2C.decode(reader, reader.uint32());
                break;
            case 154:
                message.gamerSecretLandRankS2C = $root.GamerSecretLandRankS2C.decode(reader, reader.uint32());
                break;
            case 155:
                message.getGamerSecretLandInfoS2C = $root.GetGamerSecretLandInfoS2C.decode(reader, reader.uint32());
                break;
            case 156:
                message.gamerNotifySLTreasureBoxS2C = $root.GamerNotifySLTreasureBoxS2C.decode(reader, reader.uint32());
                break;
            case 157:
                message.gamerNotifyNewSecretLandResultS2C = $root.GamerNotifyNewSecretLandResultS2C.decode(reader, reader.uint32());
                break;
            case 158:
                message.gamerChangeItemIsSawS2C = $root.GamerChangeItemIsSawS2C.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    S2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    S2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isString(message.key))
                return "key: string expected";
        if (message.gamerLoginS2C != null && message.hasOwnProperty("gamerLoginS2C")) {
            var error = $root.GamerLoginS2C.verify(message.gamerLoginS2C);
            if (error)
                return "gamerLoginS2C." + error;
        }
        if (message.gamerLoginGetDataS2C != null && message.hasOwnProperty("gamerLoginGetDataS2C")) {
            var error = $root.GamerLoginGetDataS2C.verify(message.gamerLoginGetDataS2C);
            if (error)
                return "gamerLoginGetDataS2C." + error;
        }
        if (message.serverTimeS2C != null && message.hasOwnProperty("serverTimeS2C")) {
            var error = $root.ServerTimeS2C.verify(message.serverTimeS2C);
            if (error)
                return "serverTimeS2C." + error;
        }
        if (message.gamerNotifyLoginOtherS2C != null && message.hasOwnProperty("gamerNotifyLoginOtherS2C")) {
            var error = $root.GamerNotifyLoginOtherS2C.verify(message.gamerNotifyLoginOtherS2C);
            if (error)
                return "gamerNotifyLoginOtherS2C." + error;
        }
        if (message.gamerSubChatChannelS2C != null && message.hasOwnProperty("gamerSubChatChannelS2C")) {
            var error = $root.GamerSubChatChannelS2C.verify(message.gamerSubChatChannelS2C);
            if (error)
                return "gamerSubChatChannelS2C." + error;
        }
        if (message.gamerChangeNameS2C != null && message.hasOwnProperty("gamerChangeNameS2C")) {
            var error = $root.GamerChangeNameS2C.verify(message.gamerChangeNameS2C);
            if (error)
                return "gamerChangeNameS2C." + error;
        }
        if (message.gamerChangeAvatarS2C != null && message.hasOwnProperty("gamerChangeAvatarS2C")) {
            var error = $root.GamerChangeAvatarS2C.verify(message.gamerChangeAvatarS2C);
            if (error)
                return "gamerChangeAvatarS2C." + error;
        }
        if (message.gamerNotifyExpLevelS2C != null && message.hasOwnProperty("gamerNotifyExpLevelS2C")) {
            var error = $root.GamerNotifyExpLevelS2C.verify(message.gamerNotifyExpLevelS2C);
            if (error)
                return "gamerNotifyExpLevelS2C." + error;
        }
        if (message.gamerGetBackpackS2C != null && message.hasOwnProperty("gamerGetBackpackS2C")) {
            var error = $root.GamerGetBackpackS2C.verify(message.gamerGetBackpackS2C);
            if (error)
                return "gamerGetBackpackS2C." + error;
        }
        if (message.gamerNotifyItemChangeS2C != null && message.hasOwnProperty("gamerNotifyItemChangeS2C")) {
            var error = $root.GamerNotifyItemChangeS2C.verify(message.gamerNotifyItemChangeS2C);
            if (error)
                return "gamerNotifyItemChangeS2C." + error;
        }
        if (message.gamerSellItemS2C != null && message.hasOwnProperty("gamerSellItemS2C")) {
            var error = $root.GamerSellItemS2C.verify(message.gamerSellItemS2C);
            if (error)
                return "gamerSellItemS2C." + error;
        }
        if (message.gamerUseItemS2C != null && message.hasOwnProperty("gamerUseItemS2C")) {
            var error = $root.GamerUseItemS2C.verify(message.gamerUseItemS2C);
            if (error)
                return "gamerUseItemS2C." + error;
        }
        if (message.gamerFriendChatS2C != null && message.hasOwnProperty("gamerFriendChatS2C")) {
            var error = $root.GamerFriendChatS2C.verify(message.gamerFriendChatS2C);
            if (error)
                return "gamerFriendChatS2C." + error;
        }
        if (message.gamerWorldChatS2C != null && message.hasOwnProperty("gamerWorldChatS2C")) {
            var error = $root.GamerWorldChatS2C.verify(message.gamerWorldChatS2C);
            if (error)
                return "gamerWorldChatS2C." + error;
        }
        if (message.gamerTestChatS2C != null && message.hasOwnProperty("gamerTestChatS2C")) {
            var error = $root.GamerTestChatS2C.verify(message.gamerTestChatS2C);
            if (error)
                return "gamerTestChatS2C." + error;
        }
        if (message.gamerClubRequestS2C != null && message.hasOwnProperty("gamerClubRequestS2C")) {
            var error = $root.GamerClubRequestS2C.verify(message.gamerClubRequestS2C);
            if (error)
                return "gamerClubRequestS2C." + error;
        }
        if (message.gamerNotifyNewChatS2C != null && message.hasOwnProperty("gamerNotifyNewChatS2C")) {
            var error = $root.GamerNotifyNewChatS2C.verify(message.gamerNotifyNewChatS2C);
            if (error)
                return "gamerNotifyNewChatS2C." + error;
        }
        if (message.gamerNewFriendReqS2C != null && message.hasOwnProperty("gamerNewFriendReqS2C")) {
            var error = $root.GamerNewFriendReqS2C.verify(message.gamerNewFriendReqS2C);
            if (error)
                return "gamerNewFriendReqS2C." + error;
        }
        if (message.gamerDelFriendS2C != null && message.hasOwnProperty("gamerDelFriendS2C")) {
            var error = $root.GamerDelFriendS2C.verify(message.gamerDelFriendS2C);
            if (error)
                return "gamerDelFriendS2C." + error;
        }
        if (message.gamerNotifyNewFriendReqS2C != null && message.hasOwnProperty("gamerNotifyNewFriendReqS2C")) {
            var error = $root.GamerNotifyNewFriendReqS2C.verify(message.gamerNotifyNewFriendReqS2C);
            if (error)
                return "gamerNotifyNewFriendReqS2C." + error;
        }
        if (message.gamerProcessFriendReqS2C != null && message.hasOwnProperty("gamerProcessFriendReqS2C")) {
            var error = $root.GamerProcessFriendReqS2C.verify(message.gamerProcessFriendReqS2C);
            if (error)
                return "gamerProcessFriendReqS2C." + error;
        }
        if (message.gamerNotifyNewFriendS2C != null && message.hasOwnProperty("gamerNotifyNewFriendS2C")) {
            var error = $root.GamerNotifyNewFriendS2C.verify(message.gamerNotifyNewFriendS2C);
            if (error)
                return "gamerNotifyNewFriendS2C." + error;
        }
        if (message.gamerNotifyDelFriendS2C != null && message.hasOwnProperty("gamerNotifyDelFriendS2C")) {
            var error = $root.GamerNotifyDelFriendS2C.verify(message.gamerNotifyDelFriendS2C);
            if (error)
                return "gamerNotifyDelFriendS2C." + error;
        }
        if (message.gamerNotifyNoticeS2C != null && message.hasOwnProperty("gamerNotifyNoticeS2C")) {
            var error = $root.GamerNotifyNoticeS2C.verify(message.gamerNotifyNoticeS2C);
            if (error)
                return "gamerNotifyNoticeS2C." + error;
        }
        if (message.gamerNotifyMailS2C != null && message.hasOwnProperty("gamerNotifyMailS2C")) {
            var error = $root.GamerNotifyMailS2C.verify(message.gamerNotifyMailS2C);
            if (error)
                return "gamerNotifyMailS2C." + error;
        }
        if (message.gamerNotifyNewMailS2C != null && message.hasOwnProperty("gamerNotifyNewMailS2C")) {
            var error = $root.GamerNotifyNewMailS2C.verify(message.gamerNotifyNewMailS2C);
            if (error)
                return "gamerNotifyNewMailS2C." + error;
        }
        if (message.gamerGetMailS2C != null && message.hasOwnProperty("gamerGetMailS2C")) {
            var error = $root.GamerGetMailS2C.verify(message.gamerGetMailS2C);
            if (error)
                return "gamerGetMailS2C." + error;
        }
        if (message.gamerDelMailS2C != null && message.hasOwnProperty("gamerDelMailS2C")) {
            var error = $root.GamerDelMailS2C.verify(message.gamerDelMailS2C);
            if (error)
                return "gamerDelMailS2C." + error;
        }
        if (message.gamerDelHaveReadMailS2C != null && message.hasOwnProperty("gamerDelHaveReadMailS2C")) {
            var error = $root.GamerDelHaveReadMailS2C.verify(message.gamerDelHaveReadMailS2C);
            if (error)
                return "gamerDelHaveReadMailS2C." + error;
        }
        if (message.gamerOneKeyRcvMailRewardS2C != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardS2C")) {
            var error = $root.GamerOneKeyRcvMailRewardS2C.verify(message.gamerOneKeyRcvMailRewardS2C);
            if (error)
                return "gamerOneKeyRcvMailRewardS2C." + error;
        }
        if (message.gamerChangeMailStateS2C != null && message.hasOwnProperty("gamerChangeMailStateS2C")) {
            var error = $root.GamerChangeMailStateS2C.verify(message.gamerChangeMailStateS2C);
            if (error)
                return "gamerChangeMailStateS2C." + error;
        }
        if (message.gamerNewHeroS2C != null && message.hasOwnProperty("gamerNewHeroS2C")) {
            var error = $root.GamerNewHeroS2C.verify(message.gamerNewHeroS2C);
            if (error)
                return "gamerNewHeroS2C." + error;
        }
        if (message.gamerUpgradeHeroS2C != null && message.hasOwnProperty("gamerUpgradeHeroS2C")) {
            var error = $root.GamerUpgradeHeroS2C.verify(message.gamerUpgradeHeroS2C);
            if (error)
                return "gamerUpgradeHeroS2C." + error;
        }
        if (message.gamerUseHeroMedicineS2C != null && message.hasOwnProperty("gamerUseHeroMedicineS2C")) {
            var error = $root.GamerUseHeroMedicineS2C.verify(message.gamerUseHeroMedicineS2C);
            if (error)
                return "gamerUseHeroMedicineS2C." + error;
        }
        if (message.gamerUpStarHeroS2C != null && message.hasOwnProperty("gamerUpStarHeroS2C")) {
            var error = $root.GamerUpStarHeroS2C.verify(message.gamerUpStarHeroS2C);
            if (error)
                return "gamerUpStarHeroS2C." + error;
        }
        if (message.gamerUpHeroSkillS2C != null && message.hasOwnProperty("gamerUpHeroSkillS2C")) {
            var error = $root.GamerUpHeroSkillS2C.verify(message.gamerUpHeroSkillS2C);
            if (error)
                return "gamerUpHeroSkillS2C." + error;
        }
        if (message.gamerGetHeroS2C != null && message.hasOwnProperty("gamerGetHeroS2C")) {
            var error = $root.GamerGetHeroS2C.verify(message.gamerGetHeroS2C);
            if (error)
                return "gamerGetHeroS2C." + error;
        }
        if (message.gamerNotifyHerosChangeS2C != null && message.hasOwnProperty("gamerNotifyHerosChangeS2C")) {
            var error = $root.GamerNotifyHerosChangeS2C.verify(message.gamerNotifyHerosChangeS2C);
            if (error)
                return "gamerNotifyHerosChangeS2C." + error;
        }
        if (message.gamerNotifyHeroPropUpdateS2C != null && message.hasOwnProperty("gamerNotifyHeroPropUpdateS2C")) {
            var error = $root.GamerNotifyHeroPropUpdateS2C.verify(message.gamerNotifyHeroPropUpdateS2C);
            if (error)
                return "gamerNotifyHeroPropUpdateS2C." + error;
        }
        if (message.gamerPVPLoadingS2C != null && message.hasOwnProperty("gamerPVPLoadingS2C")) {
            var error = $root.GamerPVPLoadingS2C.verify(message.gamerPVPLoadingS2C);
            if (error)
                return "gamerPVPLoadingS2C." + error;
        }
        if (message.gamerNotifyPVPLoadingS2C != null && message.hasOwnProperty("gamerNotifyPVPLoadingS2C")) {
            var error = $root.GamerNotifyPVPLoadingS2C.verify(message.gamerNotifyPVPLoadingS2C);
            if (error)
                return "gamerNotifyPVPLoadingS2C." + error;
        }
        if (message.gamerPVPSyncS2C != null && message.hasOwnProperty("gamerPVPSyncS2C")) {
            var error = $root.GamerPVPSyncS2C.verify(message.gamerPVPSyncS2C);
            if (error)
                return "gamerPVPSyncS2C." + error;
        }
        if (message.gamerNotifyGamerMiniS2C != null && message.hasOwnProperty("gamerNotifyGamerMiniS2C")) {
            var error = $root.GamerNotifyGamerMiniS2C.verify(message.gamerNotifyGamerMiniS2C);
            if (error)
                return "gamerNotifyGamerMiniS2C." + error;
        }
        if (message.gamerNotifyPVPSyncS2C != null && message.hasOwnProperty("gamerNotifyPVPSyncS2C")) {
            var error = $root.GamerNotifyPVPSyncS2C.verify(message.gamerNotifyPVPSyncS2C);
            if (error)
                return "gamerNotifyPVPSyncS2C." + error;
        }
        if (message.gamerNotifyNewPVPResultS2C != null && message.hasOwnProperty("gamerNotifyNewPVPResultS2C")) {
            var error = $root.GamerNotifyNewPVPResultS2C.verify(message.gamerNotifyNewPVPResultS2C);
            if (error)
                return "gamerNotifyNewPVPResultS2C." + error;
        }
        if (message.gamerReliveS2C != null && message.hasOwnProperty("gamerReliveS2C")) {
            var error = $root.GamerReliveS2C.verify(message.gamerReliveS2C);
            if (error)
                return "gamerReliveS2C." + error;
        }
        if (message.gamerNotifyIconChangeS2C != null && message.hasOwnProperty("gamerNotifyIconChangeS2C")) {
            var error = $root.GamerNotifyIconChangeS2C.verify(message.gamerNotifyIconChangeS2C);
            if (error)
                return "gamerNotifyIconChangeS2C." + error;
        }
        if (message.gamerNotifyDiamonChangeS2C != null && message.hasOwnProperty("gamerNotifyDiamonChangeS2C")) {
            var error = $root.GamerNotifyDiamonChangeS2C.verify(message.gamerNotifyDiamonChangeS2C);
            if (error)
                return "gamerNotifyDiamonChangeS2C." + error;
        }
        if (message.gamerNotifyEnergyChangeS2C != null && message.hasOwnProperty("gamerNotifyEnergyChangeS2C")) {
            var error = $root.GamerNotifyEnergyChangeS2C.verify(message.gamerNotifyEnergyChangeS2C);
            if (error)
                return "gamerNotifyEnergyChangeS2C." + error;
        }
        if (message.gamerNotifyExpChangeS2C != null && message.hasOwnProperty("gamerNotifyExpChangeS2C")) {
            var error = $root.GamerNotifyExpChangeS2C.verify(message.gamerNotifyExpChangeS2C);
            if (error)
                return "gamerNotifyExpChangeS2C." + error;
        }
        if (message.gamerGetRealTimeRankS2C != null && message.hasOwnProperty("gamerGetRealTimeRankS2C")) {
            var error = $root.GamerGetRealTimeRankS2C.verify(message.gamerGetRealTimeRankS2C);
            if (error)
                return "gamerGetRealTimeRankS2C." + error;
        }
        if (message.gamerCheckPVPBattleS2C != null && message.hasOwnProperty("gamerCheckPVPBattleS2C")) {
            var error = $root.GamerCheckPVPBattleS2C.verify(message.gamerCheckPVPBattleS2C);
            if (error)
                return "gamerCheckPVPBattleS2C." + error;
        }
        if (message.gamerUploadWXInfoS2C != null && message.hasOwnProperty("gamerUploadWXInfoS2C")) {
            var error = $root.GamerUploadWXInfoS2C.verify(message.gamerUploadWXInfoS2C);
            if (error)
                return "gamerUploadWXInfoS2C." + error;
        }
        if (message.gamerGetNoviceGuideS2C != null && message.hasOwnProperty("gamerGetNoviceGuideS2C")) {
            var error = $root.GamerGetNoviceGuideS2C.verify(message.gamerGetNoviceGuideS2C);
            if (error)
                return "gamerGetNoviceGuideS2C." + error;
        }
        if (message.gamerNoviceGuideChangeS2C != null && message.hasOwnProperty("gamerNoviceGuideChangeS2C")) {
            var error = $root.GamerNoviceGuideChangeS2C.verify(message.gamerNoviceGuideChangeS2C);
            if (error)
                return "gamerNoviceGuideChangeS2C." + error;
        }
        if (message.gamerMatchS2C != null && message.hasOwnProperty("gamerMatchS2C")) {
            var error = $root.GamerMatchS2C.verify(message.gamerMatchS2C);
            if (error)
                return "gamerMatchS2C." + error;
        }
        if (message.gamerCancelMatchS2C != null && message.hasOwnProperty("gamerCancelMatchS2C")) {
            var error = $root.GamerCancelMatchS2C.verify(message.gamerCancelMatchS2C);
            if (error)
                return "gamerCancelMatchS2C." + error;
        }
        if (message.gamerNotifyMatchInfoS2C != null && message.hasOwnProperty("gamerNotifyMatchInfoS2C")) {
            var error = $root.GamerNotifyMatchInfoS2C.verify(message.gamerNotifyMatchInfoS2C);
            if (error)
                return "gamerNotifyMatchInfoS2C." + error;
        }
        if (message.gamerGetRewardS2C != null && message.hasOwnProperty("gamerGetRewardS2C")) {
            var error = $root.GamerGetRewardS2C.verify(message.gamerGetRewardS2C);
            if (error)
                return "gamerGetRewardS2C." + error;
        }
        if (message.gamerUseIconS2C != null && message.hasOwnProperty("gamerUseIconS2C")) {
            var error = $root.GamerUseIconS2C.verify(message.gamerUseIconS2C);
            if (error)
                return "gamerUseIconS2C." + error;
        }
        if (message.gamerNotifyGashaponInfoS2C != null && message.hasOwnProperty("gamerNotifyGashaponInfoS2C")) {
            var error = $root.GamerNotifyGashaponInfoS2C.verify(message.gamerNotifyGashaponInfoS2C);
            if (error)
                return "gamerNotifyGashaponInfoS2C." + error;
        }
        if (message.gamerExtractGashaponS2C != null && message.hasOwnProperty("gamerExtractGashaponS2C")) {
            var error = $root.GamerExtractGashaponS2C.verify(message.gamerExtractGashaponS2C);
            if (error)
                return "gamerExtractGashaponS2C." + error;
        }
        if (message.gamerGetGashaponPreviewS2C != null && message.hasOwnProperty("gamerGetGashaponPreviewS2C")) {
            var error = $root.GamerGetGashaponPreviewS2C.verify(message.gamerGetGashaponPreviewS2C);
            if (error)
                return "gamerGetGashaponPreviewS2C." + error;
        }
        if (message.gamerNotifyActivitiesS2C != null && message.hasOwnProperty("gamerNotifyActivitiesS2C")) {
            var error = $root.GamerNotifyActivitiesS2C.verify(message.gamerNotifyActivitiesS2C);
            if (error)
                return "gamerNotifyActivitiesS2C." + error;
        }
        if (message.getActivityRewardS2C != null && message.hasOwnProperty("getActivityRewardS2C")) {
            var error = $root.GetActivityRewardS2C.verify(message.getActivityRewardS2C);
            if (error)
                return "getActivityRewardS2C." + error;
        }
        if (message.createGuildS2C != null && message.hasOwnProperty("createGuildS2C")) {
            var error = $root.CreateGuildS2C.verify(message.createGuildS2C);
            if (error)
                return "createGuildS2C." + error;
        }
        if (message.guildGamerLoginS2C != null && message.hasOwnProperty("guildGamerLoginS2C")) {
            var error = $root.GuildGamerLoginS2C.verify(message.guildGamerLoginS2C);
            if (error)
                return "guildGamerLoginS2C." + error;
        }
        if (message.guildGamerLoginoutS2C != null && message.hasOwnProperty("guildGamerLoginoutS2C")) {
            var error = $root.GuildGamerLoginoutS2C.verify(message.guildGamerLoginoutS2C);
            if (error)
                return "guildGamerLoginoutS2C." + error;
        }
        if (message.dissolutionGuildS2C != null && message.hasOwnProperty("dissolutionGuildS2C")) {
            var error = $root.DissolutionGuildS2C.verify(message.dissolutionGuildS2C);
            if (error)
                return "dissolutionGuildS2C." + error;
        }
        if (message.getGuildS2C != null && message.hasOwnProperty("getGuildS2C")) {
            var error = $root.GetGuildS2C.verify(message.getGuildS2C);
            if (error)
                return "getGuildS2C." + error;
        }
        if (message.getGuildListS2C != null && message.hasOwnProperty("getGuildListS2C")) {
            var error = $root.GetGuildListS2C.verify(message.getGuildListS2C);
            if (error)
                return "getGuildListS2C." + error;
        }
        if (message.gamerNotifyApplyJoinGuildS2C != null && message.hasOwnProperty("gamerNotifyApplyJoinGuildS2C")) {
            var error = $root.GamerNotifyApplyJoinGuildS2C.verify(message.gamerNotifyApplyJoinGuildS2C);
            if (error)
                return "gamerNotifyApplyJoinGuildS2C." + error;
        }
        if (message.applyJoinGuildS2C != null && message.hasOwnProperty("applyJoinGuildS2C")) {
            var error = $root.ApplyJoinGuildS2C.verify(message.applyJoinGuildS2C);
            if (error)
                return "applyJoinGuildS2C." + error;
        }
        if (message.approvalJoinGuildS2C != null && message.hasOwnProperty("approvalJoinGuildS2C")) {
            var error = $root.ApprovalJoinGuildS2C.verify(message.approvalJoinGuildS2C);
            if (error)
                return "approvalJoinGuildS2C." + error;
        }
        if (message.gamerNotifyInviteJoinGuildS2C != null && message.hasOwnProperty("gamerNotifyInviteJoinGuildS2C")) {
            var error = $root.GamerNotifyInviteJoinGuildS2C.verify(message.gamerNotifyInviteJoinGuildS2C);
            if (error)
                return "gamerNotifyInviteJoinGuildS2C." + error;
        }
        if (message.inviteJoinGuildS2C != null && message.hasOwnProperty("inviteJoinGuildS2C")) {
            var error = $root.InviteJoinGuildS2C.verify(message.inviteJoinGuildS2C);
            if (error)
                return "inviteJoinGuildS2C." + error;
        }
        if (message.agreeJoinGuildS2C != null && message.hasOwnProperty("agreeJoinGuildS2C")) {
            var error = $root.AgreeJoinGuildS2C.verify(message.agreeJoinGuildS2C);
            if (error)
                return "agreeJoinGuildS2C." + error;
        }
        if (message.quitGuildS2C != null && message.hasOwnProperty("quitGuildS2C")) {
            var error = $root.QuitGuildS2C.verify(message.quitGuildS2C);
            if (error)
                return "quitGuildS2C." + error;
        }
        if (message.kickOutGuildS2C != null && message.hasOwnProperty("kickOutGuildS2C")) {
            var error = $root.KickOutGuildS2C.verify(message.kickOutGuildS2C);
            if (error)
                return "kickOutGuildS2C." + error;
        }
        if (message.gamerNotifyGuildMemUpdateS2C != null && message.hasOwnProperty("gamerNotifyGuildMemUpdateS2C")) {
            var error = $root.GamerNotifyGuildMemUpdateS2C.verify(message.gamerNotifyGuildMemUpdateS2C);
            if (error)
                return "gamerNotifyGuildMemUpdateS2C." + error;
        }
        if (message.guildChatS2C != null && message.hasOwnProperty("guildChatS2C")) {
            var error = $root.GuildChatS2C.verify(message.guildChatS2C);
            if (error)
                return "guildChatS2C." + error;
        }
        if (message.gamerNotifyGuildChatS2C != null && message.hasOwnProperty("gamerNotifyGuildChatS2C")) {
            var error = $root.GamerNotifyGuildChatS2C.verify(message.gamerNotifyGuildChatS2C);
            if (error)
                return "gamerNotifyGuildChatS2C." + error;
        }
        if (message.gMS2C != null && message.hasOwnProperty("gMS2C")) {
            var error = $root.GMS2C.verify(message.gMS2C);
            if (error)
                return "gMS2C." + error;
        }
        if (message.checkPointListS2C != null && message.hasOwnProperty("checkPointListS2C")) {
            var error = $root.CheckPointListS2C.verify(message.checkPointListS2C);
            if (error)
                return "checkPointListS2C." + error;
        }
        if (message.gamerNotifyCheckPointListS2C != null && message.hasOwnProperty("gamerNotifyCheckPointListS2C")) {
            var error = $root.GamerNotifyCheckPointListS2C.verify(message.gamerNotifyCheckPointListS2C);
            if (error)
                return "gamerNotifyCheckPointListS2C." + error;
        }
        if (message.gamerNotifyNewCheckPointListS2C != null && message.hasOwnProperty("gamerNotifyNewCheckPointListS2C")) {
            var error = $root.GamerNotifyNewCheckPointListS2C.verify(message.gamerNotifyNewCheckPointListS2C);
            if (error)
                return "gamerNotifyNewCheckPointListS2C." + error;
        }
        if (message.gamerNotifyRewardS2C != null && message.hasOwnProperty("gamerNotifyRewardS2C")) {
            var error = $root.GamerNotifyRewardS2C.verify(message.gamerNotifyRewardS2C);
            if (error)
                return "gamerNotifyRewardS2C." + error;
        }
        if (message.getPlotStarRewardS2C != null && message.hasOwnProperty("getPlotStarRewardS2C")) {
            var error = $root.GetPlotStarRewardS2C.verify(message.getPlotStarRewardS2C);
            if (error)
                return "getPlotStarRewardS2C." + error;
        }
        if (message.buyTimesCheckPointS2C != null && message.hasOwnProperty("buyTimesCheckPointS2C")) {
            var error = $root.BuyTimesCheckPointS2C.verify(message.buyTimesCheckPointS2C);
            if (error)
                return "buyTimesCheckPointS2C." + error;
        }
        if (message.sweepCheckPointS2C != null && message.hasOwnProperty("sweepCheckPointS2C")) {
            var error = $root.SweepCheckPointS2C.verify(message.sweepCheckPointS2C);
            if (error)
                return "sweepCheckPointS2C." + error;
        }
        if (message.gamerSettlePVES2C != null && message.hasOwnProperty("gamerSettlePVES2C")) {
            var error = $root.GamerSettlePVES2C.verify(message.gamerSettlePVES2C);
            if (error)
                return "gamerSettlePVES2C." + error;
        }
        if (message.draugListS2C != null && message.hasOwnProperty("draugListS2C")) {
            var error = $root.DraugListS2C.verify(message.draugListS2C);
            if (error)
                return "draugListS2C." + error;
        }
        if (message.awakenDraugS2C != null && message.hasOwnProperty("awakenDraugS2C")) {
            var error = $root.AwakenDraugS2C.verify(message.awakenDraugS2C);
            if (error)
                return "awakenDraugS2C." + error;
        }
        if (message.putDraugIntoPackS2C != null && message.hasOwnProperty("putDraugIntoPackS2C")) {
            var error = $root.PutDraugIntoPackS2C.verify(message.putDraugIntoPackS2C);
            if (error)
                return "putDraugIntoPackS2C." + error;
        }
        if (message.swallowDraugS2C != null && message.hasOwnProperty("swallowDraugS2C")) {
            var error = $root.SwallowDraugS2C.verify(message.swallowDraugS2C);
            if (error)
                return "swallowDraugS2C." + error;
        }
        if (message.decomposeDraugS2C != null && message.hasOwnProperty("decomposeDraugS2C")) {
            var error = $root.DecomposeDraugS2C.verify(message.decomposeDraugS2C);
            if (error)
                return "decomposeDraugS2C." + error;
        }
        if (message.lockDraugS2C != null && message.hasOwnProperty("lockDraugS2C")) {
            var error = $root.LockDraugS2C.verify(message.lockDraugS2C);
            if (error)
                return "lockDraugS2C." + error;
        }
        if (message.wearDraugS2C != null && message.hasOwnProperty("wearDraugS2C")) {
            var error = $root.WearDraugS2C.verify(message.wearDraugS2C);
            if (error)
                return "wearDraugS2C." + error;
        }
        if (message.unwearDraugS2C != null && message.hasOwnProperty("unwearDraugS2C")) {
            var error = $root.UnwearDraugS2C.verify(message.unwearDraugS2C);
            if (error)
                return "unwearDraugS2C." + error;
        }
        if (message.draugSelectHeroS2C != null && message.hasOwnProperty("draugSelectHeroS2C")) {
            var error = $root.DraugSelectHeroS2C.verify(message.draugSelectHeroS2C);
            if (error)
                return "draugSelectHeroS2C." + error;
        }
        if (message.heroGroupListS2C != null && message.hasOwnProperty("heroGroupListS2C")) {
            var error = $root.HeroGroupListS2C.verify(message.heroGroupListS2C);
            if (error)
                return "heroGroupListS2C." + error;
        }
        if (message.unlockHeroGroupS2C != null && message.hasOwnProperty("unlockHeroGroupS2C")) {
            var error = $root.UnlockHeroGroupS2C.verify(message.unlockHeroGroupS2C);
            if (error)
                return "unlockHeroGroupS2C." + error;
        }
        if (message.changeNameHeroGroupS2C != null && message.hasOwnProperty("changeNameHeroGroupS2C")) {
            var error = $root.ChangeNameHeroGroupS2C.verify(message.changeNameHeroGroupS2C);
            if (error)
                return "changeNameHeroGroupS2C." + error;
        }
        if (message.gamerNotifyUnlockPosHeroGroupS2C != null && message.hasOwnProperty("gamerNotifyUnlockPosHeroGroupS2C")) {
            var error = $root.GamerNotifyUnlockPosHeroGroupS2C.verify(message.gamerNotifyUnlockPosHeroGroupS2C);
            if (error)
                return "gamerNotifyUnlockPosHeroGroupS2C." + error;
        }
        if (message.heroGroupChangeHeroS2C != null && message.hasOwnProperty("heroGroupChangeHeroS2C")) {
            var error = $root.HeroGroupChangeHeroS2C.verify(message.heroGroupChangeHeroS2C);
            if (error)
                return "heroGroupChangeHeroS2C." + error;
        }
        if (message.heroGroupChangeSkillS2C != null && message.hasOwnProperty("heroGroupChangeSkillS2C")) {
            var error = $root.HeroGroupChangeSkillS2C.verify(message.heroGroupChangeSkillS2C);
            if (error)
                return "heroGroupChangeSkillS2C." + error;
        }
        if (message.buyFatigueS2C != null && message.hasOwnProperty("buyFatigueS2C")) {
            var error = $root.BuyFatigueS2C.verify(message.buyFatigueS2C);
            if (error)
                return "buyFatigueS2C." + error;
        }
        if (message.getFatigueWelfareS2C != null && message.hasOwnProperty("getFatigueWelfareS2C")) {
            var error = $root.GetFatigueWelfareS2C.verify(message.getFatigueWelfareS2C);
            if (error)
                return "getFatigueWelfareS2C." + error;
        }
        if (message.gamerNotifyFatigueS2C != null && message.hasOwnProperty("gamerNotifyFatigueS2C")) {
            var error = $root.GamerNotifyFatigueS2C.verify(message.gamerNotifyFatigueS2C);
            if (error)
                return "gamerNotifyFatigueS2C." + error;
        }
        if (message.upStarEquipS2C != null && message.hasOwnProperty("upStarEquipS2C")) {
            var error = $root.UpStarEquipS2C.verify(message.upStarEquipS2C);
            if (error)
                return "upStarEquipS2C." + error;
        }
        if (message.eatEquipsS2C != null && message.hasOwnProperty("eatEquipsS2C")) {
            var error = $root.EatEquipsS2C.verify(message.eatEquipsS2C);
            if (error)
                return "eatEquipsS2C." + error;
        }
        if (message.desEquipS2C != null && message.hasOwnProperty("desEquipS2C")) {
            var error = $root.DesEquipS2C.verify(message.desEquipS2C);
            if (error)
                return "desEquipS2C." + error;
        }
        if (message.takeOnEquipS2C != null && message.hasOwnProperty("takeOnEquipS2C")) {
            var error = $root.TakeOnEquipS2C.verify(message.takeOnEquipS2C);
            if (error)
                return "takeOnEquipS2C." + error;
        }
        if (message.takeOffEquipS2C != null && message.hasOwnProperty("takeOffEquipS2C")) {
            var error = $root.TakeOffEquipS2C.verify(message.takeOffEquipS2C);
            if (error)
                return "takeOffEquipS2C." + error;
        }
        if (message.redSpotS2C != null && message.hasOwnProperty("redSpotS2C")) {
            var error = $root.RedSpotS2C.verify(message.redSpotS2C);
            if (error)
                return "redSpotS2C." + error;
        }
        if (message.makeTeamS2C != null && message.hasOwnProperty("makeTeamS2C")) {
            var error = $root.MakeTeamS2C.verify(message.makeTeamS2C);
            if (error)
                return "makeTeamS2C." + error;
        }
        if (message.setTeamAimS2C != null && message.hasOwnProperty("setTeamAimS2C")) {
            var error = $root.SetTeamAimS2C.verify(message.setTeamAimS2C);
            if (error)
                return "setTeamAimS2C." + error;
        }
        if (message.joinTeamS2C != null && message.hasOwnProperty("joinTeamS2C")) {
            var error = $root.JoinTeamS2C.verify(message.joinTeamS2C);
            if (error)
                return "joinTeamS2C." + error;
        }
        if (message.exitTeamS2C != null && message.hasOwnProperty("exitTeamS2C")) {
            var error = $root.ExitTeamS2C.verify(message.exitTeamS2C);
            if (error)
                return "exitTeamS2C." + error;
        }
        if (message.turnOverTeamLeaderS2C != null && message.hasOwnProperty("turnOverTeamLeaderS2C")) {
            var error = $root.TurnOverTeamLeaderS2C.verify(message.turnOverTeamLeaderS2C);
            if (error)
                return "turnOverTeamLeaderS2C." + error;
        }
        if (message.inviteTeamS2C != null && message.hasOwnProperty("inviteTeamS2C")) {
            var error = $root.InviteTeamS2C.verify(message.inviteTeamS2C);
            if (error)
                return "inviteTeamS2C." + error;
        }
        if (message.rejectTeamS2C != null && message.hasOwnProperty("rejectTeamS2C")) {
            var error = $root.RejectTeamS2C.verify(message.rejectTeamS2C);
            if (error)
                return "rejectTeamS2C." + error;
        }
        if (message.gamerNotifyTeamS2C != null && message.hasOwnProperty("gamerNotifyTeamS2C")) {
            var error = $root.GamerNotifyTeamS2C.verify(message.gamerNotifyTeamS2C);
            if (error)
                return "gamerNotifyTeamS2C." + error;
        }
        if (message.gamerNotifyTeamInfoS2C != null && message.hasOwnProperty("gamerNotifyTeamInfoS2C")) {
            var error = $root.GamerNotifyTeamInfoS2C.verify(message.gamerNotifyTeamInfoS2C);
            if (error)
                return "gamerNotifyTeamInfoS2C." + error;
        }
        if (message.gamerNotifyTeamChangeS2C != null && message.hasOwnProperty("gamerNotifyTeamChangeS2C")) {
            var error = $root.GamerNotifyTeamChangeS2C.verify(message.gamerNotifyTeamChangeS2C);
            if (error)
                return "gamerNotifyTeamChangeS2C." + error;
        }
        if (message.gamerNotifyTeamMemberChangeS2C != null && message.hasOwnProperty("gamerNotifyTeamMemberChangeS2C")) {
            var error = $root.GamerNotifyTeamMemberChangeS2C.verify(message.gamerNotifyTeamMemberChangeS2C);
            if (error)
                return "gamerNotifyTeamMemberChangeS2C." + error;
        }
        if (message.gamerNotifyLeaveTeamS2C != null && message.hasOwnProperty("gamerNotifyLeaveTeamS2C")) {
            var error = $root.GamerNotifyLeaveTeamS2C.verify(message.gamerNotifyLeaveTeamS2C);
            if (error)
                return "gamerNotifyLeaveTeamS2C." + error;
        }
        if (message.kickTeamS2C != null && message.hasOwnProperty("kickTeamS2C")) {
            var error = $root.KickTeamS2C.verify(message.kickTeamS2C);
            if (error)
                return "kickTeamS2C." + error;
        }
        if (message.setTeamHelpS2C != null && message.hasOwnProperty("setTeamHelpS2C")) {
            var error = $root.SetTeamHelpS2C.verify(message.setTeamHelpS2C);
            if (error)
                return "setTeamHelpS2C." + error;
        }
        if (message.setTeamHeroS2C != null && message.hasOwnProperty("setTeamHeroS2C")) {
            var error = $root.SetTeamHeroS2C.verify(message.setTeamHeroS2C);
            if (error)
                return "setTeamHeroS2C." + error;
        }
        if (message.switchTeamReadyS2C != null && message.hasOwnProperty("switchTeamReadyS2C")) {
            var error = $root.SwitchTeamReadyS2C.verify(message.switchTeamReadyS2C);
            if (error)
                return "switchTeamReadyS2C." + error;
        }
        if (message.gamerNotifyTeamReadyS2C != null && message.hasOwnProperty("gamerNotifyTeamReadyS2C")) {
            var error = $root.GamerNotifyTeamReadyS2C.verify(message.gamerNotifyTeamReadyS2C);
            if (error)
                return "gamerNotifyTeamReadyS2C." + error;
        }
        if (message.teamBattleS2C != null && message.hasOwnProperty("teamBattleS2C")) {
            var error = $root.TeamBattleS2C.verify(message.teamBattleS2C);
            if (error)
                return "teamBattleS2C." + error;
        }
        if (message.getDanInfoS2C != null && message.hasOwnProperty("getDanInfoS2C")) {
            var error = $root.GetDanInfoS2C.verify(message.getDanInfoS2C);
            if (error)
                return "getDanInfoS2C." + error;
        }
        if (message.gamerNotifyDanInfoS2C != null && message.hasOwnProperty("gamerNotifyDanInfoS2C")) {
            var error = $root.GamerNotifyDanInfoS2C.verify(message.gamerNotifyDanInfoS2C);
            if (error)
                return "gamerNotifyDanInfoS2C." + error;
        }
        if (message.gamerNotifyNewSeasonS2C != null && message.hasOwnProperty("gamerNotifyNewSeasonS2C")) {
            var error = $root.GamerNotifyNewSeasonS2C.verify(message.gamerNotifyNewSeasonS2C);
            if (error)
                return "gamerNotifyNewSeasonS2C." + error;
        }
        if (message.getDuelRankS2C != null && message.hasOwnProperty("getDuelRankS2C")) {
            var error = $root.GetDuelRankS2C.verify(message.getDuelRankS2C);
            if (error)
                return "getDuelRankS2C." + error;
        }
        if (message.sysListS2C != null && message.hasOwnProperty("sysListS2C")) {
            var error = $root.SysListS2C.verify(message.sysListS2C);
            if (error)
                return "sysListS2C." + error;
        }
        if (message.sysOpenShowS2C != null && message.hasOwnProperty("sysOpenShowS2C")) {
            var error = $root.SysOpenShowS2C.verify(message.sysOpenShowS2C);
            if (error)
                return "sysOpenShowS2C." + error;
        }
        if (message.getQuestsS2C != null && message.hasOwnProperty("getQuestsS2C")) {
            var error = $root.GetQuestsS2C.verify(message.getQuestsS2C);
            if (error)
                return "getQuestsS2C." + error;
        }
        if (message.gamerNotifyQuestsS2C != null && message.hasOwnProperty("gamerNotifyQuestsS2C")) {
            var error = $root.GamerNotifyQuestsS2C.verify(message.gamerNotifyQuestsS2C);
            if (error)
                return "gamerNotifyQuestsS2C." + error;
        }
        if (message.getQuestRewardS2C != null && message.hasOwnProperty("getQuestRewardS2C")) {
            var error = $root.GetQuestRewardS2C.verify(message.getQuestRewardS2C);
            if (error)
                return "getQuestRewardS2C." + error;
        }
        if (message.getDailyQuestRewardS2C != null && message.hasOwnProperty("getDailyQuestRewardS2C")) {
            var error = $root.GetDailyQuestRewardS2C.verify(message.getDailyQuestRewardS2C);
            if (error)
                return "getDailyQuestRewardS2C." + error;
        }
        if (message.gamerHeroImageChooseS2C != null && message.hasOwnProperty("gamerHeroImageChooseS2C")) {
            var error = $root.GamerHeroImageChooseS2C.verify(message.gamerHeroImageChooseS2C);
            if (error)
                return "gamerHeroImageChooseS2C." + error;
        }
        if (message.gamerHeroImageChangeS2C != null && message.hasOwnProperty("gamerHeroImageChangeS2C")) {
            var error = $root.GamerHeroImageChangeS2C.verify(message.gamerHeroImageChangeS2C);
            if (error)
                return "gamerHeroImageChangeS2C." + error;
        }
        if (message.gamerBuyRollS2C != null && message.hasOwnProperty("gamerBuyRollS2C")) {
            var error = $root.GamerBuyRollS2C.verify(message.gamerBuyRollS2C);
            if (error)
                return "gamerBuyRollS2C." + error;
        }
        if (message.getGamerSecretLandS2C != null && message.hasOwnProperty("getGamerSecretLandS2C")) {
            var error = $root.GetGamerSecretLandS2C.verify(message.getGamerSecretLandS2C);
            if (error)
                return "getGamerSecretLandS2C." + error;
        }
        if (message.gamerNotifyGamerSecretLandInfoS2C != null && message.hasOwnProperty("gamerNotifyGamerSecretLandInfoS2C")) {
            var error = $root.GamerNotifyGamerSecretLandInfoS2C.verify(message.gamerNotifyGamerSecretLandInfoS2C);
            if (error)
                return "gamerNotifyGamerSecretLandInfoS2C." + error;
        }
        if (message.gamerNotifySecretLandInfoS2C != null && message.hasOwnProperty("gamerNotifySecretLandInfoS2C")) {
            var error = $root.GamerNotifySecretLandInfoS2C.verify(message.gamerNotifySecretLandInfoS2C);
            if (error)
                return "gamerNotifySecretLandInfoS2C." + error;
        }
        if (message.gamerSecretLandBattleRewardS2C != null && message.hasOwnProperty("gamerSecretLandBattleRewardS2C")) {
            var error = $root.GamerSecretLandBattleRewardS2C.verify(message.gamerSecretLandBattleRewardS2C);
            if (error)
                return "gamerSecretLandBattleRewardS2C." + error;
        }
        if (message.gamerSecretLandWeekRewardS2C != null && message.hasOwnProperty("gamerSecretLandWeekRewardS2C")) {
            var error = $root.GamerSecretLandWeekRewardS2C.verify(message.gamerSecretLandWeekRewardS2C);
            if (error)
                return "gamerSecretLandWeekRewardS2C." + error;
        }
        if (message.gamerSecretLandRankS2C != null && message.hasOwnProperty("gamerSecretLandRankS2C")) {
            var error = $root.GamerSecretLandRankS2C.verify(message.gamerSecretLandRankS2C);
            if (error)
                return "gamerSecretLandRankS2C." + error;
        }
        if (message.getGamerSecretLandInfoS2C != null && message.hasOwnProperty("getGamerSecretLandInfoS2C")) {
            var error = $root.GetGamerSecretLandInfoS2C.verify(message.getGamerSecretLandInfoS2C);
            if (error)
                return "getGamerSecretLandInfoS2C." + error;
        }
        if (message.gamerNotifySLTreasureBoxS2C != null && message.hasOwnProperty("gamerNotifySLTreasureBoxS2C")) {
            var error = $root.GamerNotifySLTreasureBoxS2C.verify(message.gamerNotifySLTreasureBoxS2C);
            if (error)
                return "gamerNotifySLTreasureBoxS2C." + error;
        }
        if (message.gamerNotifyNewSecretLandResultS2C != null && message.hasOwnProperty("gamerNotifyNewSecretLandResultS2C")) {
            var error = $root.GamerNotifyNewSecretLandResultS2C.verify(message.gamerNotifyNewSecretLandResultS2C);
            if (error)
                return "gamerNotifyNewSecretLandResultS2C." + error;
        }
        if (message.gamerChangeItemIsSawS2C != null && message.hasOwnProperty("gamerChangeItemIsSawS2C")) {
            var error = $root.GamerChangeItemIsSawS2C.verify(message.gamerChangeItemIsSawS2C);
            if (error)
                return "gamerChangeItemIsSawS2C." + error;
        }
        return null;
    };
    S2C.fromObject = function fromObject(object) {
        if (object instanceof $root.S2C)
            return object;
        var message = new $root.S2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.key != null)
            message.key = String(object.key);
        if (object.gamerLoginS2C != null) {
            if (typeof object.gamerLoginS2C !== "object")
                throw TypeError(".S2C.gamerLoginS2C: object expected");
            message.gamerLoginS2C = $root.GamerLoginS2C.fromObject(object.gamerLoginS2C);
        }
        if (object.gamerLoginGetDataS2C != null) {
            if (typeof object.gamerLoginGetDataS2C !== "object")
                throw TypeError(".S2C.gamerLoginGetDataS2C: object expected");
            message.gamerLoginGetDataS2C = $root.GamerLoginGetDataS2C.fromObject(object.gamerLoginGetDataS2C);
        }
        if (object.serverTimeS2C != null) {
            if (typeof object.serverTimeS2C !== "object")
                throw TypeError(".S2C.serverTimeS2C: object expected");
            message.serverTimeS2C = $root.ServerTimeS2C.fromObject(object.serverTimeS2C);
        }
        if (object.gamerNotifyLoginOtherS2C != null) {
            if (typeof object.gamerNotifyLoginOtherS2C !== "object")
                throw TypeError(".S2C.gamerNotifyLoginOtherS2C: object expected");
            message.gamerNotifyLoginOtherS2C = $root.GamerNotifyLoginOtherS2C.fromObject(object.gamerNotifyLoginOtherS2C);
        }
        if (object.gamerSubChatChannelS2C != null) {
            if (typeof object.gamerSubChatChannelS2C !== "object")
                throw TypeError(".S2C.gamerSubChatChannelS2C: object expected");
            message.gamerSubChatChannelS2C = $root.GamerSubChatChannelS2C.fromObject(object.gamerSubChatChannelS2C);
        }
        if (object.gamerChangeNameS2C != null) {
            if (typeof object.gamerChangeNameS2C !== "object")
                throw TypeError(".S2C.gamerChangeNameS2C: object expected");
            message.gamerChangeNameS2C = $root.GamerChangeNameS2C.fromObject(object.gamerChangeNameS2C);
        }
        if (object.gamerChangeAvatarS2C != null) {
            if (typeof object.gamerChangeAvatarS2C !== "object")
                throw TypeError(".S2C.gamerChangeAvatarS2C: object expected");
            message.gamerChangeAvatarS2C = $root.GamerChangeAvatarS2C.fromObject(object.gamerChangeAvatarS2C);
        }
        if (object.gamerNotifyExpLevelS2C != null) {
            if (typeof object.gamerNotifyExpLevelS2C !== "object")
                throw TypeError(".S2C.gamerNotifyExpLevelS2C: object expected");
            message.gamerNotifyExpLevelS2C = $root.GamerNotifyExpLevelS2C.fromObject(object.gamerNotifyExpLevelS2C);
        }
        if (object.gamerGetBackpackS2C != null) {
            if (typeof object.gamerGetBackpackS2C !== "object")
                throw TypeError(".S2C.gamerGetBackpackS2C: object expected");
            message.gamerGetBackpackS2C = $root.GamerGetBackpackS2C.fromObject(object.gamerGetBackpackS2C);
        }
        if (object.gamerNotifyItemChangeS2C != null) {
            if (typeof object.gamerNotifyItemChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyItemChangeS2C: object expected");
            message.gamerNotifyItemChangeS2C = $root.GamerNotifyItemChangeS2C.fromObject(object.gamerNotifyItemChangeS2C);
        }
        if (object.gamerSellItemS2C != null) {
            if (typeof object.gamerSellItemS2C !== "object")
                throw TypeError(".S2C.gamerSellItemS2C: object expected");
            message.gamerSellItemS2C = $root.GamerSellItemS2C.fromObject(object.gamerSellItemS2C);
        }
        if (object.gamerUseItemS2C != null) {
            if (typeof object.gamerUseItemS2C !== "object")
                throw TypeError(".S2C.gamerUseItemS2C: object expected");
            message.gamerUseItemS2C = $root.GamerUseItemS2C.fromObject(object.gamerUseItemS2C);
        }
        if (object.gamerFriendChatS2C != null) {
            if (typeof object.gamerFriendChatS2C !== "object")
                throw TypeError(".S2C.gamerFriendChatS2C: object expected");
            message.gamerFriendChatS2C = $root.GamerFriendChatS2C.fromObject(object.gamerFriendChatS2C);
        }
        if (object.gamerWorldChatS2C != null) {
            if (typeof object.gamerWorldChatS2C !== "object")
                throw TypeError(".S2C.gamerWorldChatS2C: object expected");
            message.gamerWorldChatS2C = $root.GamerWorldChatS2C.fromObject(object.gamerWorldChatS2C);
        }
        if (object.gamerTestChatS2C != null) {
            if (typeof object.gamerTestChatS2C !== "object")
                throw TypeError(".S2C.gamerTestChatS2C: object expected");
            message.gamerTestChatS2C = $root.GamerTestChatS2C.fromObject(object.gamerTestChatS2C);
        }
        if (object.gamerClubRequestS2C != null) {
            if (typeof object.gamerClubRequestS2C !== "object")
                throw TypeError(".S2C.gamerClubRequestS2C: object expected");
            message.gamerClubRequestS2C = $root.GamerClubRequestS2C.fromObject(object.gamerClubRequestS2C);
        }
        if (object.gamerNotifyNewChatS2C != null) {
            if (typeof object.gamerNotifyNewChatS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewChatS2C: object expected");
            message.gamerNotifyNewChatS2C = $root.GamerNotifyNewChatS2C.fromObject(object.gamerNotifyNewChatS2C);
        }
        if (object.gamerNewFriendReqS2C != null) {
            if (typeof object.gamerNewFriendReqS2C !== "object")
                throw TypeError(".S2C.gamerNewFriendReqS2C: object expected");
            message.gamerNewFriendReqS2C = $root.GamerNewFriendReqS2C.fromObject(object.gamerNewFriendReqS2C);
        }
        if (object.gamerDelFriendS2C != null) {
            if (typeof object.gamerDelFriendS2C !== "object")
                throw TypeError(".S2C.gamerDelFriendS2C: object expected");
            message.gamerDelFriendS2C = $root.GamerDelFriendS2C.fromObject(object.gamerDelFriendS2C);
        }
        if (object.gamerNotifyNewFriendReqS2C != null) {
            if (typeof object.gamerNotifyNewFriendReqS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewFriendReqS2C: object expected");
            message.gamerNotifyNewFriendReqS2C = $root.GamerNotifyNewFriendReqS2C.fromObject(object.gamerNotifyNewFriendReqS2C);
        }
        if (object.gamerProcessFriendReqS2C != null) {
            if (typeof object.gamerProcessFriendReqS2C !== "object")
                throw TypeError(".S2C.gamerProcessFriendReqS2C: object expected");
            message.gamerProcessFriendReqS2C = $root.GamerProcessFriendReqS2C.fromObject(object.gamerProcessFriendReqS2C);
        }
        if (object.gamerNotifyNewFriendS2C != null) {
            if (typeof object.gamerNotifyNewFriendS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewFriendS2C: object expected");
            message.gamerNotifyNewFriendS2C = $root.GamerNotifyNewFriendS2C.fromObject(object.gamerNotifyNewFriendS2C);
        }
        if (object.gamerNotifyDelFriendS2C != null) {
            if (typeof object.gamerNotifyDelFriendS2C !== "object")
                throw TypeError(".S2C.gamerNotifyDelFriendS2C: object expected");
            message.gamerNotifyDelFriendS2C = $root.GamerNotifyDelFriendS2C.fromObject(object.gamerNotifyDelFriendS2C);
        }
        if (object.gamerNotifyNoticeS2C != null) {
            if (typeof object.gamerNotifyNoticeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNoticeS2C: object expected");
            message.gamerNotifyNoticeS2C = $root.GamerNotifyNoticeS2C.fromObject(object.gamerNotifyNoticeS2C);
        }
        if (object.gamerNotifyMailS2C != null) {
            if (typeof object.gamerNotifyMailS2C !== "object")
                throw TypeError(".S2C.gamerNotifyMailS2C: object expected");
            message.gamerNotifyMailS2C = $root.GamerNotifyMailS2C.fromObject(object.gamerNotifyMailS2C);
        }
        if (object.gamerNotifyNewMailS2C != null) {
            if (typeof object.gamerNotifyNewMailS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewMailS2C: object expected");
            message.gamerNotifyNewMailS2C = $root.GamerNotifyNewMailS2C.fromObject(object.gamerNotifyNewMailS2C);
        }
        if (object.gamerGetMailS2C != null) {
            if (typeof object.gamerGetMailS2C !== "object")
                throw TypeError(".S2C.gamerGetMailS2C: object expected");
            message.gamerGetMailS2C = $root.GamerGetMailS2C.fromObject(object.gamerGetMailS2C);
        }
        if (object.gamerDelMailS2C != null) {
            if (typeof object.gamerDelMailS2C !== "object")
                throw TypeError(".S2C.gamerDelMailS2C: object expected");
            message.gamerDelMailS2C = $root.GamerDelMailS2C.fromObject(object.gamerDelMailS2C);
        }
        if (object.gamerDelHaveReadMailS2C != null) {
            if (typeof object.gamerDelHaveReadMailS2C !== "object")
                throw TypeError(".S2C.gamerDelHaveReadMailS2C: object expected");
            message.gamerDelHaveReadMailS2C = $root.GamerDelHaveReadMailS2C.fromObject(object.gamerDelHaveReadMailS2C);
        }
        if (object.gamerOneKeyRcvMailRewardS2C != null) {
            if (typeof object.gamerOneKeyRcvMailRewardS2C !== "object")
                throw TypeError(".S2C.gamerOneKeyRcvMailRewardS2C: object expected");
            message.gamerOneKeyRcvMailRewardS2C = $root.GamerOneKeyRcvMailRewardS2C.fromObject(object.gamerOneKeyRcvMailRewardS2C);
        }
        if (object.gamerChangeMailStateS2C != null) {
            if (typeof object.gamerChangeMailStateS2C !== "object")
                throw TypeError(".S2C.gamerChangeMailStateS2C: object expected");
            message.gamerChangeMailStateS2C = $root.GamerChangeMailStateS2C.fromObject(object.gamerChangeMailStateS2C);
        }
        if (object.gamerNewHeroS2C != null) {
            if (typeof object.gamerNewHeroS2C !== "object")
                throw TypeError(".S2C.gamerNewHeroS2C: object expected");
            message.gamerNewHeroS2C = $root.GamerNewHeroS2C.fromObject(object.gamerNewHeroS2C);
        }
        if (object.gamerUpgradeHeroS2C != null) {
            if (typeof object.gamerUpgradeHeroS2C !== "object")
                throw TypeError(".S2C.gamerUpgradeHeroS2C: object expected");
            message.gamerUpgradeHeroS2C = $root.GamerUpgradeHeroS2C.fromObject(object.gamerUpgradeHeroS2C);
        }
        if (object.gamerUseHeroMedicineS2C != null) {
            if (typeof object.gamerUseHeroMedicineS2C !== "object")
                throw TypeError(".S2C.gamerUseHeroMedicineS2C: object expected");
            message.gamerUseHeroMedicineS2C = $root.GamerUseHeroMedicineS2C.fromObject(object.gamerUseHeroMedicineS2C);
        }
        if (object.gamerUpStarHeroS2C != null) {
            if (typeof object.gamerUpStarHeroS2C !== "object")
                throw TypeError(".S2C.gamerUpStarHeroS2C: object expected");
            message.gamerUpStarHeroS2C = $root.GamerUpStarHeroS2C.fromObject(object.gamerUpStarHeroS2C);
        }
        if (object.gamerUpHeroSkillS2C != null) {
            if (typeof object.gamerUpHeroSkillS2C !== "object")
                throw TypeError(".S2C.gamerUpHeroSkillS2C: object expected");
            message.gamerUpHeroSkillS2C = $root.GamerUpHeroSkillS2C.fromObject(object.gamerUpHeroSkillS2C);
        }
        if (object.gamerGetHeroS2C != null) {
            if (typeof object.gamerGetHeroS2C !== "object")
                throw TypeError(".S2C.gamerGetHeroS2C: object expected");
            message.gamerGetHeroS2C = $root.GamerGetHeroS2C.fromObject(object.gamerGetHeroS2C);
        }
        if (object.gamerNotifyHerosChangeS2C != null) {
            if (typeof object.gamerNotifyHerosChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyHerosChangeS2C: object expected");
            message.gamerNotifyHerosChangeS2C = $root.GamerNotifyHerosChangeS2C.fromObject(object.gamerNotifyHerosChangeS2C);
        }
        if (object.gamerNotifyHeroPropUpdateS2C != null) {
            if (typeof object.gamerNotifyHeroPropUpdateS2C !== "object")
                throw TypeError(".S2C.gamerNotifyHeroPropUpdateS2C: object expected");
            message.gamerNotifyHeroPropUpdateS2C = $root.GamerNotifyHeroPropUpdateS2C.fromObject(object.gamerNotifyHeroPropUpdateS2C);
        }
        if (object.gamerPVPLoadingS2C != null) {
            if (typeof object.gamerPVPLoadingS2C !== "object")
                throw TypeError(".S2C.gamerPVPLoadingS2C: object expected");
            message.gamerPVPLoadingS2C = $root.GamerPVPLoadingS2C.fromObject(object.gamerPVPLoadingS2C);
        }
        if (object.gamerNotifyPVPLoadingS2C != null) {
            if (typeof object.gamerNotifyPVPLoadingS2C !== "object")
                throw TypeError(".S2C.gamerNotifyPVPLoadingS2C: object expected");
            message.gamerNotifyPVPLoadingS2C = $root.GamerNotifyPVPLoadingS2C.fromObject(object.gamerNotifyPVPLoadingS2C);
        }
        if (object.gamerPVPSyncS2C != null) {
            if (typeof object.gamerPVPSyncS2C !== "object")
                throw TypeError(".S2C.gamerPVPSyncS2C: object expected");
            message.gamerPVPSyncS2C = $root.GamerPVPSyncS2C.fromObject(object.gamerPVPSyncS2C);
        }
        if (object.gamerNotifyGamerMiniS2C != null) {
            if (typeof object.gamerNotifyGamerMiniS2C !== "object")
                throw TypeError(".S2C.gamerNotifyGamerMiniS2C: object expected");
            message.gamerNotifyGamerMiniS2C = $root.GamerNotifyGamerMiniS2C.fromObject(object.gamerNotifyGamerMiniS2C);
        }
        if (object.gamerNotifyPVPSyncS2C != null) {
            if (typeof object.gamerNotifyPVPSyncS2C !== "object")
                throw TypeError(".S2C.gamerNotifyPVPSyncS2C: object expected");
            message.gamerNotifyPVPSyncS2C = $root.GamerNotifyPVPSyncS2C.fromObject(object.gamerNotifyPVPSyncS2C);
        }
        if (object.gamerNotifyNewPVPResultS2C != null) {
            if (typeof object.gamerNotifyNewPVPResultS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewPVPResultS2C: object expected");
            message.gamerNotifyNewPVPResultS2C = $root.GamerNotifyNewPVPResultS2C.fromObject(object.gamerNotifyNewPVPResultS2C);
        }
        if (object.gamerReliveS2C != null) {
            if (typeof object.gamerReliveS2C !== "object")
                throw TypeError(".S2C.gamerReliveS2C: object expected");
            message.gamerReliveS2C = $root.GamerReliveS2C.fromObject(object.gamerReliveS2C);
        }
        if (object.gamerNotifyIconChangeS2C != null) {
            if (typeof object.gamerNotifyIconChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyIconChangeS2C: object expected");
            message.gamerNotifyIconChangeS2C = $root.GamerNotifyIconChangeS2C.fromObject(object.gamerNotifyIconChangeS2C);
        }
        if (object.gamerNotifyDiamonChangeS2C != null) {
            if (typeof object.gamerNotifyDiamonChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyDiamonChangeS2C: object expected");
            message.gamerNotifyDiamonChangeS2C = $root.GamerNotifyDiamonChangeS2C.fromObject(object.gamerNotifyDiamonChangeS2C);
        }
        if (object.gamerNotifyEnergyChangeS2C != null) {
            if (typeof object.gamerNotifyEnergyChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyEnergyChangeS2C: object expected");
            message.gamerNotifyEnergyChangeS2C = $root.GamerNotifyEnergyChangeS2C.fromObject(object.gamerNotifyEnergyChangeS2C);
        }
        if (object.gamerNotifyExpChangeS2C != null) {
            if (typeof object.gamerNotifyExpChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyExpChangeS2C: object expected");
            message.gamerNotifyExpChangeS2C = $root.GamerNotifyExpChangeS2C.fromObject(object.gamerNotifyExpChangeS2C);
        }
        if (object.gamerGetRealTimeRankS2C != null) {
            if (typeof object.gamerGetRealTimeRankS2C !== "object")
                throw TypeError(".S2C.gamerGetRealTimeRankS2C: object expected");
            message.gamerGetRealTimeRankS2C = $root.GamerGetRealTimeRankS2C.fromObject(object.gamerGetRealTimeRankS2C);
        }
        if (object.gamerCheckPVPBattleS2C != null) {
            if (typeof object.gamerCheckPVPBattleS2C !== "object")
                throw TypeError(".S2C.gamerCheckPVPBattleS2C: object expected");
            message.gamerCheckPVPBattleS2C = $root.GamerCheckPVPBattleS2C.fromObject(object.gamerCheckPVPBattleS2C);
        }
        if (object.gamerUploadWXInfoS2C != null) {
            if (typeof object.gamerUploadWXInfoS2C !== "object")
                throw TypeError(".S2C.gamerUploadWXInfoS2C: object expected");
            message.gamerUploadWXInfoS2C = $root.GamerUploadWXInfoS2C.fromObject(object.gamerUploadWXInfoS2C);
        }
        if (object.gamerGetNoviceGuideS2C != null) {
            if (typeof object.gamerGetNoviceGuideS2C !== "object")
                throw TypeError(".S2C.gamerGetNoviceGuideS2C: object expected");
            message.gamerGetNoviceGuideS2C = $root.GamerGetNoviceGuideS2C.fromObject(object.gamerGetNoviceGuideS2C);
        }
        if (object.gamerNoviceGuideChangeS2C != null) {
            if (typeof object.gamerNoviceGuideChangeS2C !== "object")
                throw TypeError(".S2C.gamerNoviceGuideChangeS2C: object expected");
            message.gamerNoviceGuideChangeS2C = $root.GamerNoviceGuideChangeS2C.fromObject(object.gamerNoviceGuideChangeS2C);
        }
        if (object.gamerMatchS2C != null) {
            if (typeof object.gamerMatchS2C !== "object")
                throw TypeError(".S2C.gamerMatchS2C: object expected");
            message.gamerMatchS2C = $root.GamerMatchS2C.fromObject(object.gamerMatchS2C);
        }
        if (object.gamerCancelMatchS2C != null) {
            if (typeof object.gamerCancelMatchS2C !== "object")
                throw TypeError(".S2C.gamerCancelMatchS2C: object expected");
            message.gamerCancelMatchS2C = $root.GamerCancelMatchS2C.fromObject(object.gamerCancelMatchS2C);
        }
        if (object.gamerNotifyMatchInfoS2C != null) {
            if (typeof object.gamerNotifyMatchInfoS2C !== "object")
                throw TypeError(".S2C.gamerNotifyMatchInfoS2C: object expected");
            message.gamerNotifyMatchInfoS2C = $root.GamerNotifyMatchInfoS2C.fromObject(object.gamerNotifyMatchInfoS2C);
        }
        if (object.gamerGetRewardS2C != null) {
            if (typeof object.gamerGetRewardS2C !== "object")
                throw TypeError(".S2C.gamerGetRewardS2C: object expected");
            message.gamerGetRewardS2C = $root.GamerGetRewardS2C.fromObject(object.gamerGetRewardS2C);
        }
        if (object.gamerUseIconS2C != null) {
            if (typeof object.gamerUseIconS2C !== "object")
                throw TypeError(".S2C.gamerUseIconS2C: object expected");
            message.gamerUseIconS2C = $root.GamerUseIconS2C.fromObject(object.gamerUseIconS2C);
        }
        if (object.gamerNotifyGashaponInfoS2C != null) {
            if (typeof object.gamerNotifyGashaponInfoS2C !== "object")
                throw TypeError(".S2C.gamerNotifyGashaponInfoS2C: object expected");
            message.gamerNotifyGashaponInfoS2C = $root.GamerNotifyGashaponInfoS2C.fromObject(object.gamerNotifyGashaponInfoS2C);
        }
        if (object.gamerExtractGashaponS2C != null) {
            if (typeof object.gamerExtractGashaponS2C !== "object")
                throw TypeError(".S2C.gamerExtractGashaponS2C: object expected");
            message.gamerExtractGashaponS2C = $root.GamerExtractGashaponS2C.fromObject(object.gamerExtractGashaponS2C);
        }
        if (object.gamerGetGashaponPreviewS2C != null) {
            if (typeof object.gamerGetGashaponPreviewS2C !== "object")
                throw TypeError(".S2C.gamerGetGashaponPreviewS2C: object expected");
            message.gamerGetGashaponPreviewS2C = $root.GamerGetGashaponPreviewS2C.fromObject(object.gamerGetGashaponPreviewS2C);
        }
        if (object.gamerNotifyActivitiesS2C != null) {
            if (typeof object.gamerNotifyActivitiesS2C !== "object")
                throw TypeError(".S2C.gamerNotifyActivitiesS2C: object expected");
            message.gamerNotifyActivitiesS2C = $root.GamerNotifyActivitiesS2C.fromObject(object.gamerNotifyActivitiesS2C);
        }
        if (object.getActivityRewardS2C != null) {
            if (typeof object.getActivityRewardS2C !== "object")
                throw TypeError(".S2C.getActivityRewardS2C: object expected");
            message.getActivityRewardS2C = $root.GetActivityRewardS2C.fromObject(object.getActivityRewardS2C);
        }
        if (object.createGuildS2C != null) {
            if (typeof object.createGuildS2C !== "object")
                throw TypeError(".S2C.createGuildS2C: object expected");
            message.createGuildS2C = $root.CreateGuildS2C.fromObject(object.createGuildS2C);
        }
        if (object.guildGamerLoginS2C != null) {
            if (typeof object.guildGamerLoginS2C !== "object")
                throw TypeError(".S2C.guildGamerLoginS2C: object expected");
            message.guildGamerLoginS2C = $root.GuildGamerLoginS2C.fromObject(object.guildGamerLoginS2C);
        }
        if (object.guildGamerLoginoutS2C != null) {
            if (typeof object.guildGamerLoginoutS2C !== "object")
                throw TypeError(".S2C.guildGamerLoginoutS2C: object expected");
            message.guildGamerLoginoutS2C = $root.GuildGamerLoginoutS2C.fromObject(object.guildGamerLoginoutS2C);
        }
        if (object.dissolutionGuildS2C != null) {
            if (typeof object.dissolutionGuildS2C !== "object")
                throw TypeError(".S2C.dissolutionGuildS2C: object expected");
            message.dissolutionGuildS2C = $root.DissolutionGuildS2C.fromObject(object.dissolutionGuildS2C);
        }
        if (object.getGuildS2C != null) {
            if (typeof object.getGuildS2C !== "object")
                throw TypeError(".S2C.getGuildS2C: object expected");
            message.getGuildS2C = $root.GetGuildS2C.fromObject(object.getGuildS2C);
        }
        if (object.getGuildListS2C != null) {
            if (typeof object.getGuildListS2C !== "object")
                throw TypeError(".S2C.getGuildListS2C: object expected");
            message.getGuildListS2C = $root.GetGuildListS2C.fromObject(object.getGuildListS2C);
        }
        if (object.gamerNotifyApplyJoinGuildS2C != null) {
            if (typeof object.gamerNotifyApplyJoinGuildS2C !== "object")
                throw TypeError(".S2C.gamerNotifyApplyJoinGuildS2C: object expected");
            message.gamerNotifyApplyJoinGuildS2C = $root.GamerNotifyApplyJoinGuildS2C.fromObject(object.gamerNotifyApplyJoinGuildS2C);
        }
        if (object.applyJoinGuildS2C != null) {
            if (typeof object.applyJoinGuildS2C !== "object")
                throw TypeError(".S2C.applyJoinGuildS2C: object expected");
            message.applyJoinGuildS2C = $root.ApplyJoinGuildS2C.fromObject(object.applyJoinGuildS2C);
        }
        if (object.approvalJoinGuildS2C != null) {
            if (typeof object.approvalJoinGuildS2C !== "object")
                throw TypeError(".S2C.approvalJoinGuildS2C: object expected");
            message.approvalJoinGuildS2C = $root.ApprovalJoinGuildS2C.fromObject(object.approvalJoinGuildS2C);
        }
        if (object.gamerNotifyInviteJoinGuildS2C != null) {
            if (typeof object.gamerNotifyInviteJoinGuildS2C !== "object")
                throw TypeError(".S2C.gamerNotifyInviteJoinGuildS2C: object expected");
            message.gamerNotifyInviteJoinGuildS2C = $root.GamerNotifyInviteJoinGuildS2C.fromObject(object.gamerNotifyInviteJoinGuildS2C);
        }
        if (object.inviteJoinGuildS2C != null) {
            if (typeof object.inviteJoinGuildS2C !== "object")
                throw TypeError(".S2C.inviteJoinGuildS2C: object expected");
            message.inviteJoinGuildS2C = $root.InviteJoinGuildS2C.fromObject(object.inviteJoinGuildS2C);
        }
        if (object.agreeJoinGuildS2C != null) {
            if (typeof object.agreeJoinGuildS2C !== "object")
                throw TypeError(".S2C.agreeJoinGuildS2C: object expected");
            message.agreeJoinGuildS2C = $root.AgreeJoinGuildS2C.fromObject(object.agreeJoinGuildS2C);
        }
        if (object.quitGuildS2C != null) {
            if (typeof object.quitGuildS2C !== "object")
                throw TypeError(".S2C.quitGuildS2C: object expected");
            message.quitGuildS2C = $root.QuitGuildS2C.fromObject(object.quitGuildS2C);
        }
        if (object.kickOutGuildS2C != null) {
            if (typeof object.kickOutGuildS2C !== "object")
                throw TypeError(".S2C.kickOutGuildS2C: object expected");
            message.kickOutGuildS2C = $root.KickOutGuildS2C.fromObject(object.kickOutGuildS2C);
        }
        if (object.gamerNotifyGuildMemUpdateS2C != null) {
            if (typeof object.gamerNotifyGuildMemUpdateS2C !== "object")
                throw TypeError(".S2C.gamerNotifyGuildMemUpdateS2C: object expected");
            message.gamerNotifyGuildMemUpdateS2C = $root.GamerNotifyGuildMemUpdateS2C.fromObject(object.gamerNotifyGuildMemUpdateS2C);
        }
        if (object.guildChatS2C != null) {
            if (typeof object.guildChatS2C !== "object")
                throw TypeError(".S2C.guildChatS2C: object expected");
            message.guildChatS2C = $root.GuildChatS2C.fromObject(object.guildChatS2C);
        }
        if (object.gamerNotifyGuildChatS2C != null) {
            if (typeof object.gamerNotifyGuildChatS2C !== "object")
                throw TypeError(".S2C.gamerNotifyGuildChatS2C: object expected");
            message.gamerNotifyGuildChatS2C = $root.GamerNotifyGuildChatS2C.fromObject(object.gamerNotifyGuildChatS2C);
        }
        if (object.gMS2C != null) {
            if (typeof object.gMS2C !== "object")
                throw TypeError(".S2C.gMS2C: object expected");
            message.gMS2C = $root.GMS2C.fromObject(object.gMS2C);
        }
        if (object.checkPointListS2C != null) {
            if (typeof object.checkPointListS2C !== "object")
                throw TypeError(".S2C.checkPointListS2C: object expected");
            message.checkPointListS2C = $root.CheckPointListS2C.fromObject(object.checkPointListS2C);
        }
        if (object.gamerNotifyCheckPointListS2C != null) {
            if (typeof object.gamerNotifyCheckPointListS2C !== "object")
                throw TypeError(".S2C.gamerNotifyCheckPointListS2C: object expected");
            message.gamerNotifyCheckPointListS2C = $root.GamerNotifyCheckPointListS2C.fromObject(object.gamerNotifyCheckPointListS2C);
        }
        if (object.gamerNotifyNewCheckPointListS2C != null) {
            if (typeof object.gamerNotifyNewCheckPointListS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewCheckPointListS2C: object expected");
            message.gamerNotifyNewCheckPointListS2C = $root.GamerNotifyNewCheckPointListS2C.fromObject(object.gamerNotifyNewCheckPointListS2C);
        }
        if (object.gamerNotifyRewardS2C != null) {
            if (typeof object.gamerNotifyRewardS2C !== "object")
                throw TypeError(".S2C.gamerNotifyRewardS2C: object expected");
            message.gamerNotifyRewardS2C = $root.GamerNotifyRewardS2C.fromObject(object.gamerNotifyRewardS2C);
        }
        if (object.getPlotStarRewardS2C != null) {
            if (typeof object.getPlotStarRewardS2C !== "object")
                throw TypeError(".S2C.getPlotStarRewardS2C: object expected");
            message.getPlotStarRewardS2C = $root.GetPlotStarRewardS2C.fromObject(object.getPlotStarRewardS2C);
        }
        if (object.buyTimesCheckPointS2C != null) {
            if (typeof object.buyTimesCheckPointS2C !== "object")
                throw TypeError(".S2C.buyTimesCheckPointS2C: object expected");
            message.buyTimesCheckPointS2C = $root.BuyTimesCheckPointS2C.fromObject(object.buyTimesCheckPointS2C);
        }
        if (object.sweepCheckPointS2C != null) {
            if (typeof object.sweepCheckPointS2C !== "object")
                throw TypeError(".S2C.sweepCheckPointS2C: object expected");
            message.sweepCheckPointS2C = $root.SweepCheckPointS2C.fromObject(object.sweepCheckPointS2C);
        }
        if (object.gamerSettlePVES2C != null) {
            if (typeof object.gamerSettlePVES2C !== "object")
                throw TypeError(".S2C.gamerSettlePVES2C: object expected");
            message.gamerSettlePVES2C = $root.GamerSettlePVES2C.fromObject(object.gamerSettlePVES2C);
        }
        if (object.draugListS2C != null) {
            if (typeof object.draugListS2C !== "object")
                throw TypeError(".S2C.draugListS2C: object expected");
            message.draugListS2C = $root.DraugListS2C.fromObject(object.draugListS2C);
        }
        if (object.awakenDraugS2C != null) {
            if (typeof object.awakenDraugS2C !== "object")
                throw TypeError(".S2C.awakenDraugS2C: object expected");
            message.awakenDraugS2C = $root.AwakenDraugS2C.fromObject(object.awakenDraugS2C);
        }
        if (object.putDraugIntoPackS2C != null) {
            if (typeof object.putDraugIntoPackS2C !== "object")
                throw TypeError(".S2C.putDraugIntoPackS2C: object expected");
            message.putDraugIntoPackS2C = $root.PutDraugIntoPackS2C.fromObject(object.putDraugIntoPackS2C);
        }
        if (object.swallowDraugS2C != null) {
            if (typeof object.swallowDraugS2C !== "object")
                throw TypeError(".S2C.swallowDraugS2C: object expected");
            message.swallowDraugS2C = $root.SwallowDraugS2C.fromObject(object.swallowDraugS2C);
        }
        if (object.decomposeDraugS2C != null) {
            if (typeof object.decomposeDraugS2C !== "object")
                throw TypeError(".S2C.decomposeDraugS2C: object expected");
            message.decomposeDraugS2C = $root.DecomposeDraugS2C.fromObject(object.decomposeDraugS2C);
        }
        if (object.lockDraugS2C != null) {
            if (typeof object.lockDraugS2C !== "object")
                throw TypeError(".S2C.lockDraugS2C: object expected");
            message.lockDraugS2C = $root.LockDraugS2C.fromObject(object.lockDraugS2C);
        }
        if (object.wearDraugS2C != null) {
            if (typeof object.wearDraugS2C !== "object")
                throw TypeError(".S2C.wearDraugS2C: object expected");
            message.wearDraugS2C = $root.WearDraugS2C.fromObject(object.wearDraugS2C);
        }
        if (object.unwearDraugS2C != null) {
            if (typeof object.unwearDraugS2C !== "object")
                throw TypeError(".S2C.unwearDraugS2C: object expected");
            message.unwearDraugS2C = $root.UnwearDraugS2C.fromObject(object.unwearDraugS2C);
        }
        if (object.draugSelectHeroS2C != null) {
            if (typeof object.draugSelectHeroS2C !== "object")
                throw TypeError(".S2C.draugSelectHeroS2C: object expected");
            message.draugSelectHeroS2C = $root.DraugSelectHeroS2C.fromObject(object.draugSelectHeroS2C);
        }
        if (object.heroGroupListS2C != null) {
            if (typeof object.heroGroupListS2C !== "object")
                throw TypeError(".S2C.heroGroupListS2C: object expected");
            message.heroGroupListS2C = $root.HeroGroupListS2C.fromObject(object.heroGroupListS2C);
        }
        if (object.unlockHeroGroupS2C != null) {
            if (typeof object.unlockHeroGroupS2C !== "object")
                throw TypeError(".S2C.unlockHeroGroupS2C: object expected");
            message.unlockHeroGroupS2C = $root.UnlockHeroGroupS2C.fromObject(object.unlockHeroGroupS2C);
        }
        if (object.changeNameHeroGroupS2C != null) {
            if (typeof object.changeNameHeroGroupS2C !== "object")
                throw TypeError(".S2C.changeNameHeroGroupS2C: object expected");
            message.changeNameHeroGroupS2C = $root.ChangeNameHeroGroupS2C.fromObject(object.changeNameHeroGroupS2C);
        }
        if (object.gamerNotifyUnlockPosHeroGroupS2C != null) {
            if (typeof object.gamerNotifyUnlockPosHeroGroupS2C !== "object")
                throw TypeError(".S2C.gamerNotifyUnlockPosHeroGroupS2C: object expected");
            message.gamerNotifyUnlockPosHeroGroupS2C = $root.GamerNotifyUnlockPosHeroGroupS2C.fromObject(object.gamerNotifyUnlockPosHeroGroupS2C);
        }
        if (object.heroGroupChangeHeroS2C != null) {
            if (typeof object.heroGroupChangeHeroS2C !== "object")
                throw TypeError(".S2C.heroGroupChangeHeroS2C: object expected");
            message.heroGroupChangeHeroS2C = $root.HeroGroupChangeHeroS2C.fromObject(object.heroGroupChangeHeroS2C);
        }
        if (object.heroGroupChangeSkillS2C != null) {
            if (typeof object.heroGroupChangeSkillS2C !== "object")
                throw TypeError(".S2C.heroGroupChangeSkillS2C: object expected");
            message.heroGroupChangeSkillS2C = $root.HeroGroupChangeSkillS2C.fromObject(object.heroGroupChangeSkillS2C);
        }
        if (object.buyFatigueS2C != null) {
            if (typeof object.buyFatigueS2C !== "object")
                throw TypeError(".S2C.buyFatigueS2C: object expected");
            message.buyFatigueS2C = $root.BuyFatigueS2C.fromObject(object.buyFatigueS2C);
        }
        if (object.getFatigueWelfareS2C != null) {
            if (typeof object.getFatigueWelfareS2C !== "object")
                throw TypeError(".S2C.getFatigueWelfareS2C: object expected");
            message.getFatigueWelfareS2C = $root.GetFatigueWelfareS2C.fromObject(object.getFatigueWelfareS2C);
        }
        if (object.gamerNotifyFatigueS2C != null) {
            if (typeof object.gamerNotifyFatigueS2C !== "object")
                throw TypeError(".S2C.gamerNotifyFatigueS2C: object expected");
            message.gamerNotifyFatigueS2C = $root.GamerNotifyFatigueS2C.fromObject(object.gamerNotifyFatigueS2C);
        }
        if (object.upStarEquipS2C != null) {
            if (typeof object.upStarEquipS2C !== "object")
                throw TypeError(".S2C.upStarEquipS2C: object expected");
            message.upStarEquipS2C = $root.UpStarEquipS2C.fromObject(object.upStarEquipS2C);
        }
        if (object.eatEquipsS2C != null) {
            if (typeof object.eatEquipsS2C !== "object")
                throw TypeError(".S2C.eatEquipsS2C: object expected");
            message.eatEquipsS2C = $root.EatEquipsS2C.fromObject(object.eatEquipsS2C);
        }
        if (object.desEquipS2C != null) {
            if (typeof object.desEquipS2C !== "object")
                throw TypeError(".S2C.desEquipS2C: object expected");
            message.desEquipS2C = $root.DesEquipS2C.fromObject(object.desEquipS2C);
        }
        if (object.takeOnEquipS2C != null) {
            if (typeof object.takeOnEquipS2C !== "object")
                throw TypeError(".S2C.takeOnEquipS2C: object expected");
            message.takeOnEquipS2C = $root.TakeOnEquipS2C.fromObject(object.takeOnEquipS2C);
        }
        if (object.takeOffEquipS2C != null) {
            if (typeof object.takeOffEquipS2C !== "object")
                throw TypeError(".S2C.takeOffEquipS2C: object expected");
            message.takeOffEquipS2C = $root.TakeOffEquipS2C.fromObject(object.takeOffEquipS2C);
        }
        if (object.redSpotS2C != null) {
            if (typeof object.redSpotS2C !== "object")
                throw TypeError(".S2C.redSpotS2C: object expected");
            message.redSpotS2C = $root.RedSpotS2C.fromObject(object.redSpotS2C);
        }
        if (object.makeTeamS2C != null) {
            if (typeof object.makeTeamS2C !== "object")
                throw TypeError(".S2C.makeTeamS2C: object expected");
            message.makeTeamS2C = $root.MakeTeamS2C.fromObject(object.makeTeamS2C);
        }
        if (object.setTeamAimS2C != null) {
            if (typeof object.setTeamAimS2C !== "object")
                throw TypeError(".S2C.setTeamAimS2C: object expected");
            message.setTeamAimS2C = $root.SetTeamAimS2C.fromObject(object.setTeamAimS2C);
        }
        if (object.joinTeamS2C != null) {
            if (typeof object.joinTeamS2C !== "object")
                throw TypeError(".S2C.joinTeamS2C: object expected");
            message.joinTeamS2C = $root.JoinTeamS2C.fromObject(object.joinTeamS2C);
        }
        if (object.exitTeamS2C != null) {
            if (typeof object.exitTeamS2C !== "object")
                throw TypeError(".S2C.exitTeamS2C: object expected");
            message.exitTeamS2C = $root.ExitTeamS2C.fromObject(object.exitTeamS2C);
        }
        if (object.turnOverTeamLeaderS2C != null) {
            if (typeof object.turnOverTeamLeaderS2C !== "object")
                throw TypeError(".S2C.turnOverTeamLeaderS2C: object expected");
            message.turnOverTeamLeaderS2C = $root.TurnOverTeamLeaderS2C.fromObject(object.turnOverTeamLeaderS2C);
        }
        if (object.inviteTeamS2C != null) {
            if (typeof object.inviteTeamS2C !== "object")
                throw TypeError(".S2C.inviteTeamS2C: object expected");
            message.inviteTeamS2C = $root.InviteTeamS2C.fromObject(object.inviteTeamS2C);
        }
        if (object.rejectTeamS2C != null) {
            if (typeof object.rejectTeamS2C !== "object")
                throw TypeError(".S2C.rejectTeamS2C: object expected");
            message.rejectTeamS2C = $root.RejectTeamS2C.fromObject(object.rejectTeamS2C);
        }
        if (object.gamerNotifyTeamS2C != null) {
            if (typeof object.gamerNotifyTeamS2C !== "object")
                throw TypeError(".S2C.gamerNotifyTeamS2C: object expected");
            message.gamerNotifyTeamS2C = $root.GamerNotifyTeamS2C.fromObject(object.gamerNotifyTeamS2C);
        }
        if (object.gamerNotifyTeamInfoS2C != null) {
            if (typeof object.gamerNotifyTeamInfoS2C !== "object")
                throw TypeError(".S2C.gamerNotifyTeamInfoS2C: object expected");
            message.gamerNotifyTeamInfoS2C = $root.GamerNotifyTeamInfoS2C.fromObject(object.gamerNotifyTeamInfoS2C);
        }
        if (object.gamerNotifyTeamChangeS2C != null) {
            if (typeof object.gamerNotifyTeamChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyTeamChangeS2C: object expected");
            message.gamerNotifyTeamChangeS2C = $root.GamerNotifyTeamChangeS2C.fromObject(object.gamerNotifyTeamChangeS2C);
        }
        if (object.gamerNotifyTeamMemberChangeS2C != null) {
            if (typeof object.gamerNotifyTeamMemberChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyTeamMemberChangeS2C: object expected");
            message.gamerNotifyTeamMemberChangeS2C = $root.GamerNotifyTeamMemberChangeS2C.fromObject(object.gamerNotifyTeamMemberChangeS2C);
        }
        if (object.gamerNotifyLeaveTeamS2C != null) {
            if (typeof object.gamerNotifyLeaveTeamS2C !== "object")
                throw TypeError(".S2C.gamerNotifyLeaveTeamS2C: object expected");
            message.gamerNotifyLeaveTeamS2C = $root.GamerNotifyLeaveTeamS2C.fromObject(object.gamerNotifyLeaveTeamS2C);
        }
        if (object.kickTeamS2C != null) {
            if (typeof object.kickTeamS2C !== "object")
                throw TypeError(".S2C.kickTeamS2C: object expected");
            message.kickTeamS2C = $root.KickTeamS2C.fromObject(object.kickTeamS2C);
        }
        if (object.setTeamHelpS2C != null) {
            if (typeof object.setTeamHelpS2C !== "object")
                throw TypeError(".S2C.setTeamHelpS2C: object expected");
            message.setTeamHelpS2C = $root.SetTeamHelpS2C.fromObject(object.setTeamHelpS2C);
        }
        if (object.setTeamHeroS2C != null) {
            if (typeof object.setTeamHeroS2C !== "object")
                throw TypeError(".S2C.setTeamHeroS2C: object expected");
            message.setTeamHeroS2C = $root.SetTeamHeroS2C.fromObject(object.setTeamHeroS2C);
        }
        if (object.switchTeamReadyS2C != null) {
            if (typeof object.switchTeamReadyS2C !== "object")
                throw TypeError(".S2C.switchTeamReadyS2C: object expected");
            message.switchTeamReadyS2C = $root.SwitchTeamReadyS2C.fromObject(object.switchTeamReadyS2C);
        }
        if (object.gamerNotifyTeamReadyS2C != null) {
            if (typeof object.gamerNotifyTeamReadyS2C !== "object")
                throw TypeError(".S2C.gamerNotifyTeamReadyS2C: object expected");
            message.gamerNotifyTeamReadyS2C = $root.GamerNotifyTeamReadyS2C.fromObject(object.gamerNotifyTeamReadyS2C);
        }
        if (object.teamBattleS2C != null) {
            if (typeof object.teamBattleS2C !== "object")
                throw TypeError(".S2C.teamBattleS2C: object expected");
            message.teamBattleS2C = $root.TeamBattleS2C.fromObject(object.teamBattleS2C);
        }
        if (object.getDanInfoS2C != null) {
            if (typeof object.getDanInfoS2C !== "object")
                throw TypeError(".S2C.getDanInfoS2C: object expected");
            message.getDanInfoS2C = $root.GetDanInfoS2C.fromObject(object.getDanInfoS2C);
        }
        if (object.gamerNotifyDanInfoS2C != null) {
            if (typeof object.gamerNotifyDanInfoS2C !== "object")
                throw TypeError(".S2C.gamerNotifyDanInfoS2C: object expected");
            message.gamerNotifyDanInfoS2C = $root.GamerNotifyDanInfoS2C.fromObject(object.gamerNotifyDanInfoS2C);
        }
        if (object.gamerNotifyNewSeasonS2C != null) {
            if (typeof object.gamerNotifyNewSeasonS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewSeasonS2C: object expected");
            message.gamerNotifyNewSeasonS2C = $root.GamerNotifyNewSeasonS2C.fromObject(object.gamerNotifyNewSeasonS2C);
        }
        if (object.getDuelRankS2C != null) {
            if (typeof object.getDuelRankS2C !== "object")
                throw TypeError(".S2C.getDuelRankS2C: object expected");
            message.getDuelRankS2C = $root.GetDuelRankS2C.fromObject(object.getDuelRankS2C);
        }
        if (object.sysListS2C != null) {
            if (typeof object.sysListS2C !== "object")
                throw TypeError(".S2C.sysListS2C: object expected");
            message.sysListS2C = $root.SysListS2C.fromObject(object.sysListS2C);
        }
        if (object.sysOpenShowS2C != null) {
            if (typeof object.sysOpenShowS2C !== "object")
                throw TypeError(".S2C.sysOpenShowS2C: object expected");
            message.sysOpenShowS2C = $root.SysOpenShowS2C.fromObject(object.sysOpenShowS2C);
        }
        if (object.getQuestsS2C != null) {
            if (typeof object.getQuestsS2C !== "object")
                throw TypeError(".S2C.getQuestsS2C: object expected");
            message.getQuestsS2C = $root.GetQuestsS2C.fromObject(object.getQuestsS2C);
        }
        if (object.gamerNotifyQuestsS2C != null) {
            if (typeof object.gamerNotifyQuestsS2C !== "object")
                throw TypeError(".S2C.gamerNotifyQuestsS2C: object expected");
            message.gamerNotifyQuestsS2C = $root.GamerNotifyQuestsS2C.fromObject(object.gamerNotifyQuestsS2C);
        }
        if (object.getQuestRewardS2C != null) {
            if (typeof object.getQuestRewardS2C !== "object")
                throw TypeError(".S2C.getQuestRewardS2C: object expected");
            message.getQuestRewardS2C = $root.GetQuestRewardS2C.fromObject(object.getQuestRewardS2C);
        }
        if (object.getDailyQuestRewardS2C != null) {
            if (typeof object.getDailyQuestRewardS2C !== "object")
                throw TypeError(".S2C.getDailyQuestRewardS2C: object expected");
            message.getDailyQuestRewardS2C = $root.GetDailyQuestRewardS2C.fromObject(object.getDailyQuestRewardS2C);
        }
        if (object.gamerHeroImageChooseS2C != null) {
            if (typeof object.gamerHeroImageChooseS2C !== "object")
                throw TypeError(".S2C.gamerHeroImageChooseS2C: object expected");
            message.gamerHeroImageChooseS2C = $root.GamerHeroImageChooseS2C.fromObject(object.gamerHeroImageChooseS2C);
        }
        if (object.gamerHeroImageChangeS2C != null) {
            if (typeof object.gamerHeroImageChangeS2C !== "object")
                throw TypeError(".S2C.gamerHeroImageChangeS2C: object expected");
            message.gamerHeroImageChangeS2C = $root.GamerHeroImageChangeS2C.fromObject(object.gamerHeroImageChangeS2C);
        }
        if (object.gamerBuyRollS2C != null) {
            if (typeof object.gamerBuyRollS2C !== "object")
                throw TypeError(".S2C.gamerBuyRollS2C: object expected");
            message.gamerBuyRollS2C = $root.GamerBuyRollS2C.fromObject(object.gamerBuyRollS2C);
        }
        if (object.getGamerSecretLandS2C != null) {
            if (typeof object.getGamerSecretLandS2C !== "object")
                throw TypeError(".S2C.getGamerSecretLandS2C: object expected");
            message.getGamerSecretLandS2C = $root.GetGamerSecretLandS2C.fromObject(object.getGamerSecretLandS2C);
        }
        if (object.gamerNotifyGamerSecretLandInfoS2C != null) {
            if (typeof object.gamerNotifyGamerSecretLandInfoS2C !== "object")
                throw TypeError(".S2C.gamerNotifyGamerSecretLandInfoS2C: object expected");
            message.gamerNotifyGamerSecretLandInfoS2C = $root.GamerNotifyGamerSecretLandInfoS2C.fromObject(object.gamerNotifyGamerSecretLandInfoS2C);
        }
        if (object.gamerNotifySecretLandInfoS2C != null) {
            if (typeof object.gamerNotifySecretLandInfoS2C !== "object")
                throw TypeError(".S2C.gamerNotifySecretLandInfoS2C: object expected");
            message.gamerNotifySecretLandInfoS2C = $root.GamerNotifySecretLandInfoS2C.fromObject(object.gamerNotifySecretLandInfoS2C);
        }
        if (object.gamerSecretLandBattleRewardS2C != null) {
            if (typeof object.gamerSecretLandBattleRewardS2C !== "object")
                throw TypeError(".S2C.gamerSecretLandBattleRewardS2C: object expected");
            message.gamerSecretLandBattleRewardS2C = $root.GamerSecretLandBattleRewardS2C.fromObject(object.gamerSecretLandBattleRewardS2C);
        }
        if (object.gamerSecretLandWeekRewardS2C != null) {
            if (typeof object.gamerSecretLandWeekRewardS2C !== "object")
                throw TypeError(".S2C.gamerSecretLandWeekRewardS2C: object expected");
            message.gamerSecretLandWeekRewardS2C = $root.GamerSecretLandWeekRewardS2C.fromObject(object.gamerSecretLandWeekRewardS2C);
        }
        if (object.gamerSecretLandRankS2C != null) {
            if (typeof object.gamerSecretLandRankS2C !== "object")
                throw TypeError(".S2C.gamerSecretLandRankS2C: object expected");
            message.gamerSecretLandRankS2C = $root.GamerSecretLandRankS2C.fromObject(object.gamerSecretLandRankS2C);
        }
        if (object.getGamerSecretLandInfoS2C != null) {
            if (typeof object.getGamerSecretLandInfoS2C !== "object")
                throw TypeError(".S2C.getGamerSecretLandInfoS2C: object expected");
            message.getGamerSecretLandInfoS2C = $root.GetGamerSecretLandInfoS2C.fromObject(object.getGamerSecretLandInfoS2C);
        }
        if (object.gamerNotifySLTreasureBoxS2C != null) {
            if (typeof object.gamerNotifySLTreasureBoxS2C !== "object")
                throw TypeError(".S2C.gamerNotifySLTreasureBoxS2C: object expected");
            message.gamerNotifySLTreasureBoxS2C = $root.GamerNotifySLTreasureBoxS2C.fromObject(object.gamerNotifySLTreasureBoxS2C);
        }
        if (object.gamerNotifyNewSecretLandResultS2C != null) {
            if (typeof object.gamerNotifyNewSecretLandResultS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewSecretLandResultS2C: object expected");
            message.gamerNotifyNewSecretLandResultS2C = $root.GamerNotifyNewSecretLandResultS2C.fromObject(object.gamerNotifyNewSecretLandResultS2C);
        }
        if (object.gamerChangeItemIsSawS2C != null) {
            if (typeof object.gamerChangeItemIsSawS2C !== "object")
                throw TypeError(".S2C.gamerChangeItemIsSawS2C: object expected");
            message.gamerChangeItemIsSawS2C = $root.GamerChangeItemIsSawS2C.fromObject(object.gamerChangeItemIsSawS2C);
        }
        return message;
    };
    S2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.key = "";
            object.gamerLoginS2C = null;
            object.gamerLoginGetDataS2C = null;
            object.serverTimeS2C = null;
            object.gamerNotifyLoginOtherS2C = null;
            object.gamerSubChatChannelS2C = null;
            object.gamerChangeNameS2C = null;
            object.gamerChangeAvatarS2C = null;
            object.gamerNotifyExpLevelS2C = null;
            object.gamerGetBackpackS2C = null;
            object.gamerNotifyItemChangeS2C = null;
            object.gamerSellItemS2C = null;
            object.gamerUseItemS2C = null;
            object.gamerFriendChatS2C = null;
            object.gamerWorldChatS2C = null;
            object.gamerTestChatS2C = null;
            object.gamerClubRequestS2C = null;
            object.gamerNotifyNewChatS2C = null;
            object.gamerNewFriendReqS2C = null;
            object.gamerDelFriendS2C = null;
            object.gamerNotifyNewFriendReqS2C = null;
            object.gamerProcessFriendReqS2C = null;
            object.gamerNotifyNewFriendS2C = null;
            object.gamerNotifyDelFriendS2C = null;
            object.gamerNotifyNoticeS2C = null;
            object.gamerNotifyMailS2C = null;
            object.gamerNotifyNewMailS2C = null;
            object.gamerGetMailS2C = null;
            object.gamerDelMailS2C = null;
            object.gamerDelHaveReadMailS2C = null;
            object.gamerOneKeyRcvMailRewardS2C = null;
            object.gamerChangeMailStateS2C = null;
            object.gamerNewHeroS2C = null;
            object.gamerUpgradeHeroS2C = null;
            object.gamerUseHeroMedicineS2C = null;
            object.gamerUpStarHeroS2C = null;
            object.gamerUpHeroSkillS2C = null;
            object.gamerGetHeroS2C = null;
            object.gamerNotifyHerosChangeS2C = null;
            object.gamerNotifyHeroPropUpdateS2C = null;
            object.gamerPVPLoadingS2C = null;
            object.gamerNotifyPVPLoadingS2C = null;
            object.gamerPVPSyncS2C = null;
            object.gamerNotifyGamerMiniS2C = null;
            object.gamerNotifyPVPSyncS2C = null;
            object.gamerNotifyNewPVPResultS2C = null;
            object.gamerReliveS2C = null;
            object.gamerNotifyIconChangeS2C = null;
            object.gamerNotifyDiamonChangeS2C = null;
            object.gamerNotifyEnergyChangeS2C = null;
            object.gamerNotifyExpChangeS2C = null;
            object.gamerGetRealTimeRankS2C = null;
            object.gamerCheckPVPBattleS2C = null;
            object.gamerUploadWXInfoS2C = null;
            object.gamerGetNoviceGuideS2C = null;
            object.gamerNoviceGuideChangeS2C = null;
            object.gamerMatchS2C = null;
            object.gamerCancelMatchS2C = null;
            object.gamerNotifyMatchInfoS2C = null;
            object.gamerGetRewardS2C = null;
            object.gamerUseIconS2C = null;
            object.gamerNotifyGashaponInfoS2C = null;
            object.gamerExtractGashaponS2C = null;
            object.gamerGetGashaponPreviewS2C = null;
            object.gamerNotifyActivitiesS2C = null;
            object.getActivityRewardS2C = null;
            object.createGuildS2C = null;
            object.guildGamerLoginS2C = null;
            object.guildGamerLoginoutS2C = null;
            object.dissolutionGuildS2C = null;
            object.getGuildS2C = null;
            object.getGuildListS2C = null;
            object.gamerNotifyApplyJoinGuildS2C = null;
            object.applyJoinGuildS2C = null;
            object.approvalJoinGuildS2C = null;
            object.gamerNotifyInviteJoinGuildS2C = null;
            object.inviteJoinGuildS2C = null;
            object.agreeJoinGuildS2C = null;
            object.quitGuildS2C = null;
            object.kickOutGuildS2C = null;
            object.gamerNotifyGuildMemUpdateS2C = null;
            object.guildChatS2C = null;
            object.gamerNotifyGuildChatS2C = null;
            object.gMS2C = null;
            object.checkPointListS2C = null;
            object.gamerNotifyCheckPointListS2C = null;
            object.gamerNotifyNewCheckPointListS2C = null;
            object.gamerNotifyRewardS2C = null;
            object.getPlotStarRewardS2C = null;
            object.buyTimesCheckPointS2C = null;
            object.sweepCheckPointS2C = null;
            object.gamerSettlePVES2C = null;
            object.draugListS2C = null;
            object.awakenDraugS2C = null;
            object.putDraugIntoPackS2C = null;
            object.swallowDraugS2C = null;
            object.decomposeDraugS2C = null;
            object.lockDraugS2C = null;
            object.wearDraugS2C = null;
            object.unwearDraugS2C = null;
            object.draugSelectHeroS2C = null;
            object.heroGroupListS2C = null;
            object.unlockHeroGroupS2C = null;
            object.changeNameHeroGroupS2C = null;
            object.gamerNotifyUnlockPosHeroGroupS2C = null;
            object.heroGroupChangeHeroS2C = null;
            object.heroGroupChangeSkillS2C = null;
            object.buyFatigueS2C = null;
            object.getFatigueWelfareS2C = null;
            object.gamerNotifyFatigueS2C = null;
            object.upStarEquipS2C = null;
            object.eatEquipsS2C = null;
            object.desEquipS2C = null;
            object.takeOnEquipS2C = null;
            object.takeOffEquipS2C = null;
            object.redSpotS2C = null;
            object.makeTeamS2C = null;
            object.setTeamAimS2C = null;
            object.joinTeamS2C = null;
            object.exitTeamS2C = null;
            object.turnOverTeamLeaderS2C = null;
            object.inviteTeamS2C = null;
            object.rejectTeamS2C = null;
            object.gamerNotifyTeamS2C = null;
            object.gamerNotifyTeamInfoS2C = null;
            object.gamerNotifyTeamChangeS2C = null;
            object.gamerNotifyTeamMemberChangeS2C = null;
            object.gamerNotifyLeaveTeamS2C = null;
            object.kickTeamS2C = null;
            object.setTeamHelpS2C = null;
            object.setTeamHeroS2C = null;
            object.switchTeamReadyS2C = null;
            object.gamerNotifyTeamReadyS2C = null;
            object.teamBattleS2C = null;
            object.getDanInfoS2C = null;
            object.gamerNotifyDanInfoS2C = null;
            object.gamerNotifyNewSeasonS2C = null;
            object.getDuelRankS2C = null;
            object.sysListS2C = null;
            object.sysOpenShowS2C = null;
            object.getQuestsS2C = null;
            object.gamerNotifyQuestsS2C = null;
            object.getQuestRewardS2C = null;
            object.getDailyQuestRewardS2C = null;
            object.gamerHeroImageChooseS2C = null;
            object.gamerHeroImageChangeS2C = null;
            object.gamerBuyRollS2C = null;
            object.getGamerSecretLandS2C = null;
            object.gamerNotifyGamerSecretLandInfoS2C = null;
            object.gamerNotifySecretLandInfoS2C = null;
            object.gamerSecretLandBattleRewardS2C = null;
            object.gamerSecretLandWeekRewardS2C = null;
            object.gamerSecretLandRankS2C = null;
            object.getGamerSecretLandInfoS2C = null;
            object.gamerNotifySLTreasureBoxS2C = null;
            object.gamerNotifyNewSecretLandResultS2C = null;
            object.gamerChangeItemIsSawS2C = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.gamerLoginS2C != null && message.hasOwnProperty("gamerLoginS2C"))
            object.gamerLoginS2C = $root.GamerLoginS2C.toObject(message.gamerLoginS2C, options);
        if (message.gamerLoginGetDataS2C != null && message.hasOwnProperty("gamerLoginGetDataS2C"))
            object.gamerLoginGetDataS2C = $root.GamerLoginGetDataS2C.toObject(message.gamerLoginGetDataS2C, options);
        if (message.serverTimeS2C != null && message.hasOwnProperty("serverTimeS2C"))
            object.serverTimeS2C = $root.ServerTimeS2C.toObject(message.serverTimeS2C, options);
        if (message.gamerNotifyLoginOtherS2C != null && message.hasOwnProperty("gamerNotifyLoginOtherS2C"))
            object.gamerNotifyLoginOtherS2C = $root.GamerNotifyLoginOtherS2C.toObject(message.gamerNotifyLoginOtherS2C, options);
        if (message.gamerSubChatChannelS2C != null && message.hasOwnProperty("gamerSubChatChannelS2C"))
            object.gamerSubChatChannelS2C = $root.GamerSubChatChannelS2C.toObject(message.gamerSubChatChannelS2C, options);
        if (message.gamerChangeNameS2C != null && message.hasOwnProperty("gamerChangeNameS2C"))
            object.gamerChangeNameS2C = $root.GamerChangeNameS2C.toObject(message.gamerChangeNameS2C, options);
        if (message.gamerChangeAvatarS2C != null && message.hasOwnProperty("gamerChangeAvatarS2C"))
            object.gamerChangeAvatarS2C = $root.GamerChangeAvatarS2C.toObject(message.gamerChangeAvatarS2C, options);
        if (message.gamerNotifyExpLevelS2C != null && message.hasOwnProperty("gamerNotifyExpLevelS2C"))
            object.gamerNotifyExpLevelS2C = $root.GamerNotifyExpLevelS2C.toObject(message.gamerNotifyExpLevelS2C, options);
        if (message.gamerGetBackpackS2C != null && message.hasOwnProperty("gamerGetBackpackS2C"))
            object.gamerGetBackpackS2C = $root.GamerGetBackpackS2C.toObject(message.gamerGetBackpackS2C, options);
        if (message.gamerNotifyItemChangeS2C != null && message.hasOwnProperty("gamerNotifyItemChangeS2C"))
            object.gamerNotifyItemChangeS2C = $root.GamerNotifyItemChangeS2C.toObject(message.gamerNotifyItemChangeS2C, options);
        if (message.gamerSellItemS2C != null && message.hasOwnProperty("gamerSellItemS2C"))
            object.gamerSellItemS2C = $root.GamerSellItemS2C.toObject(message.gamerSellItemS2C, options);
        if (message.gamerUseItemS2C != null && message.hasOwnProperty("gamerUseItemS2C"))
            object.gamerUseItemS2C = $root.GamerUseItemS2C.toObject(message.gamerUseItemS2C, options);
        if (message.gamerFriendChatS2C != null && message.hasOwnProperty("gamerFriendChatS2C"))
            object.gamerFriendChatS2C = $root.GamerFriendChatS2C.toObject(message.gamerFriendChatS2C, options);
        if (message.gamerWorldChatS2C != null && message.hasOwnProperty("gamerWorldChatS2C"))
            object.gamerWorldChatS2C = $root.GamerWorldChatS2C.toObject(message.gamerWorldChatS2C, options);
        if (message.gamerTestChatS2C != null && message.hasOwnProperty("gamerTestChatS2C"))
            object.gamerTestChatS2C = $root.GamerTestChatS2C.toObject(message.gamerTestChatS2C, options);
        if (message.gamerClubRequestS2C != null && message.hasOwnProperty("gamerClubRequestS2C"))
            object.gamerClubRequestS2C = $root.GamerClubRequestS2C.toObject(message.gamerClubRequestS2C, options);
        if (message.gamerNotifyNewChatS2C != null && message.hasOwnProperty("gamerNotifyNewChatS2C"))
            object.gamerNotifyNewChatS2C = $root.GamerNotifyNewChatS2C.toObject(message.gamerNotifyNewChatS2C, options);
        if (message.gamerNewFriendReqS2C != null && message.hasOwnProperty("gamerNewFriendReqS2C"))
            object.gamerNewFriendReqS2C = $root.GamerNewFriendReqS2C.toObject(message.gamerNewFriendReqS2C, options);
        if (message.gamerDelFriendS2C != null && message.hasOwnProperty("gamerDelFriendS2C"))
            object.gamerDelFriendS2C = $root.GamerDelFriendS2C.toObject(message.gamerDelFriendS2C, options);
        if (message.gamerNotifyNewFriendReqS2C != null && message.hasOwnProperty("gamerNotifyNewFriendReqS2C"))
            object.gamerNotifyNewFriendReqS2C = $root.GamerNotifyNewFriendReqS2C.toObject(message.gamerNotifyNewFriendReqS2C, options);
        if (message.gamerProcessFriendReqS2C != null && message.hasOwnProperty("gamerProcessFriendReqS2C"))
            object.gamerProcessFriendReqS2C = $root.GamerProcessFriendReqS2C.toObject(message.gamerProcessFriendReqS2C, options);
        if (message.gamerNotifyNewFriendS2C != null && message.hasOwnProperty("gamerNotifyNewFriendS2C"))
            object.gamerNotifyNewFriendS2C = $root.GamerNotifyNewFriendS2C.toObject(message.gamerNotifyNewFriendS2C, options);
        if (message.gamerNotifyDelFriendS2C != null && message.hasOwnProperty("gamerNotifyDelFriendS2C"))
            object.gamerNotifyDelFriendS2C = $root.GamerNotifyDelFriendS2C.toObject(message.gamerNotifyDelFriendS2C, options);
        if (message.gamerNotifyNoticeS2C != null && message.hasOwnProperty("gamerNotifyNoticeS2C"))
            object.gamerNotifyNoticeS2C = $root.GamerNotifyNoticeS2C.toObject(message.gamerNotifyNoticeS2C, options);
        if (message.gamerNotifyMailS2C != null && message.hasOwnProperty("gamerNotifyMailS2C"))
            object.gamerNotifyMailS2C = $root.GamerNotifyMailS2C.toObject(message.gamerNotifyMailS2C, options);
        if (message.gamerNotifyNewMailS2C != null && message.hasOwnProperty("gamerNotifyNewMailS2C"))
            object.gamerNotifyNewMailS2C = $root.GamerNotifyNewMailS2C.toObject(message.gamerNotifyNewMailS2C, options);
        if (message.gamerGetMailS2C != null && message.hasOwnProperty("gamerGetMailS2C"))
            object.gamerGetMailS2C = $root.GamerGetMailS2C.toObject(message.gamerGetMailS2C, options);
        if (message.gamerDelMailS2C != null && message.hasOwnProperty("gamerDelMailS2C"))
            object.gamerDelMailS2C = $root.GamerDelMailS2C.toObject(message.gamerDelMailS2C, options);
        if (message.gamerDelHaveReadMailS2C != null && message.hasOwnProperty("gamerDelHaveReadMailS2C"))
            object.gamerDelHaveReadMailS2C = $root.GamerDelHaveReadMailS2C.toObject(message.gamerDelHaveReadMailS2C, options);
        if (message.gamerOneKeyRcvMailRewardS2C != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardS2C"))
            object.gamerOneKeyRcvMailRewardS2C = $root.GamerOneKeyRcvMailRewardS2C.toObject(message.gamerOneKeyRcvMailRewardS2C, options);
        if (message.gamerChangeMailStateS2C != null && message.hasOwnProperty("gamerChangeMailStateS2C"))
            object.gamerChangeMailStateS2C = $root.GamerChangeMailStateS2C.toObject(message.gamerChangeMailStateS2C, options);
        if (message.gamerNewHeroS2C != null && message.hasOwnProperty("gamerNewHeroS2C"))
            object.gamerNewHeroS2C = $root.GamerNewHeroS2C.toObject(message.gamerNewHeroS2C, options);
        if (message.gamerUpgradeHeroS2C != null && message.hasOwnProperty("gamerUpgradeHeroS2C"))
            object.gamerUpgradeHeroS2C = $root.GamerUpgradeHeroS2C.toObject(message.gamerUpgradeHeroS2C, options);
        if (message.gamerUseHeroMedicineS2C != null && message.hasOwnProperty("gamerUseHeroMedicineS2C"))
            object.gamerUseHeroMedicineS2C = $root.GamerUseHeroMedicineS2C.toObject(message.gamerUseHeroMedicineS2C, options);
        if (message.gamerUpStarHeroS2C != null && message.hasOwnProperty("gamerUpStarHeroS2C"))
            object.gamerUpStarHeroS2C = $root.GamerUpStarHeroS2C.toObject(message.gamerUpStarHeroS2C, options);
        if (message.gamerUpHeroSkillS2C != null && message.hasOwnProperty("gamerUpHeroSkillS2C"))
            object.gamerUpHeroSkillS2C = $root.GamerUpHeroSkillS2C.toObject(message.gamerUpHeroSkillS2C, options);
        if (message.gamerGetHeroS2C != null && message.hasOwnProperty("gamerGetHeroS2C"))
            object.gamerGetHeroS2C = $root.GamerGetHeroS2C.toObject(message.gamerGetHeroS2C, options);
        if (message.gamerNotifyHerosChangeS2C != null && message.hasOwnProperty("gamerNotifyHerosChangeS2C"))
            object.gamerNotifyHerosChangeS2C = $root.GamerNotifyHerosChangeS2C.toObject(message.gamerNotifyHerosChangeS2C, options);
        if (message.gamerNotifyHeroPropUpdateS2C != null && message.hasOwnProperty("gamerNotifyHeroPropUpdateS2C"))
            object.gamerNotifyHeroPropUpdateS2C = $root.GamerNotifyHeroPropUpdateS2C.toObject(message.gamerNotifyHeroPropUpdateS2C, options);
        if (message.gamerPVPLoadingS2C != null && message.hasOwnProperty("gamerPVPLoadingS2C"))
            object.gamerPVPLoadingS2C = $root.GamerPVPLoadingS2C.toObject(message.gamerPVPLoadingS2C, options);
        if (message.gamerNotifyPVPLoadingS2C != null && message.hasOwnProperty("gamerNotifyPVPLoadingS2C"))
            object.gamerNotifyPVPLoadingS2C = $root.GamerNotifyPVPLoadingS2C.toObject(message.gamerNotifyPVPLoadingS2C, options);
        if (message.gamerPVPSyncS2C != null && message.hasOwnProperty("gamerPVPSyncS2C"))
            object.gamerPVPSyncS2C = $root.GamerPVPSyncS2C.toObject(message.gamerPVPSyncS2C, options);
        if (message.gamerNotifyGamerMiniS2C != null && message.hasOwnProperty("gamerNotifyGamerMiniS2C"))
            object.gamerNotifyGamerMiniS2C = $root.GamerNotifyGamerMiniS2C.toObject(message.gamerNotifyGamerMiniS2C, options);
        if (message.gamerNotifyPVPSyncS2C != null && message.hasOwnProperty("gamerNotifyPVPSyncS2C"))
            object.gamerNotifyPVPSyncS2C = $root.GamerNotifyPVPSyncS2C.toObject(message.gamerNotifyPVPSyncS2C, options);
        if (message.gamerNotifyNewPVPResultS2C != null && message.hasOwnProperty("gamerNotifyNewPVPResultS2C"))
            object.gamerNotifyNewPVPResultS2C = $root.GamerNotifyNewPVPResultS2C.toObject(message.gamerNotifyNewPVPResultS2C, options);
        if (message.gamerReliveS2C != null && message.hasOwnProperty("gamerReliveS2C"))
            object.gamerReliveS2C = $root.GamerReliveS2C.toObject(message.gamerReliveS2C, options);
        if (message.gamerNotifyIconChangeS2C != null && message.hasOwnProperty("gamerNotifyIconChangeS2C"))
            object.gamerNotifyIconChangeS2C = $root.GamerNotifyIconChangeS2C.toObject(message.gamerNotifyIconChangeS2C, options);
        if (message.gamerNotifyDiamonChangeS2C != null && message.hasOwnProperty("gamerNotifyDiamonChangeS2C"))
            object.gamerNotifyDiamonChangeS2C = $root.GamerNotifyDiamonChangeS2C.toObject(message.gamerNotifyDiamonChangeS2C, options);
        if (message.gamerNotifyEnergyChangeS2C != null && message.hasOwnProperty("gamerNotifyEnergyChangeS2C"))
            object.gamerNotifyEnergyChangeS2C = $root.GamerNotifyEnergyChangeS2C.toObject(message.gamerNotifyEnergyChangeS2C, options);
        if (message.gamerNotifyExpChangeS2C != null && message.hasOwnProperty("gamerNotifyExpChangeS2C"))
            object.gamerNotifyExpChangeS2C = $root.GamerNotifyExpChangeS2C.toObject(message.gamerNotifyExpChangeS2C, options);
        if (message.gamerGetRealTimeRankS2C != null && message.hasOwnProperty("gamerGetRealTimeRankS2C"))
            object.gamerGetRealTimeRankS2C = $root.GamerGetRealTimeRankS2C.toObject(message.gamerGetRealTimeRankS2C, options);
        if (message.gamerCheckPVPBattleS2C != null && message.hasOwnProperty("gamerCheckPVPBattleS2C"))
            object.gamerCheckPVPBattleS2C = $root.GamerCheckPVPBattleS2C.toObject(message.gamerCheckPVPBattleS2C, options);
        if (message.gamerUploadWXInfoS2C != null && message.hasOwnProperty("gamerUploadWXInfoS2C"))
            object.gamerUploadWXInfoS2C = $root.GamerUploadWXInfoS2C.toObject(message.gamerUploadWXInfoS2C, options);
        if (message.gamerGetNoviceGuideS2C != null && message.hasOwnProperty("gamerGetNoviceGuideS2C"))
            object.gamerGetNoviceGuideS2C = $root.GamerGetNoviceGuideS2C.toObject(message.gamerGetNoviceGuideS2C, options);
        if (message.gamerNoviceGuideChangeS2C != null && message.hasOwnProperty("gamerNoviceGuideChangeS2C"))
            object.gamerNoviceGuideChangeS2C = $root.GamerNoviceGuideChangeS2C.toObject(message.gamerNoviceGuideChangeS2C, options);
        if (message.gamerMatchS2C != null && message.hasOwnProperty("gamerMatchS2C"))
            object.gamerMatchS2C = $root.GamerMatchS2C.toObject(message.gamerMatchS2C, options);
        if (message.gamerCancelMatchS2C != null && message.hasOwnProperty("gamerCancelMatchS2C"))
            object.gamerCancelMatchS2C = $root.GamerCancelMatchS2C.toObject(message.gamerCancelMatchS2C, options);
        if (message.gamerNotifyMatchInfoS2C != null && message.hasOwnProperty("gamerNotifyMatchInfoS2C"))
            object.gamerNotifyMatchInfoS2C = $root.GamerNotifyMatchInfoS2C.toObject(message.gamerNotifyMatchInfoS2C, options);
        if (message.gamerGetRewardS2C != null && message.hasOwnProperty("gamerGetRewardS2C"))
            object.gamerGetRewardS2C = $root.GamerGetRewardS2C.toObject(message.gamerGetRewardS2C, options);
        if (message.gamerUseIconS2C != null && message.hasOwnProperty("gamerUseIconS2C"))
            object.gamerUseIconS2C = $root.GamerUseIconS2C.toObject(message.gamerUseIconS2C, options);
        if (message.gamerNotifyGashaponInfoS2C != null && message.hasOwnProperty("gamerNotifyGashaponInfoS2C"))
            object.gamerNotifyGashaponInfoS2C = $root.GamerNotifyGashaponInfoS2C.toObject(message.gamerNotifyGashaponInfoS2C, options);
        if (message.gamerExtractGashaponS2C != null && message.hasOwnProperty("gamerExtractGashaponS2C"))
            object.gamerExtractGashaponS2C = $root.GamerExtractGashaponS2C.toObject(message.gamerExtractGashaponS2C, options);
        if (message.gamerGetGashaponPreviewS2C != null && message.hasOwnProperty("gamerGetGashaponPreviewS2C"))
            object.gamerGetGashaponPreviewS2C = $root.GamerGetGashaponPreviewS2C.toObject(message.gamerGetGashaponPreviewS2C, options);
        if (message.gamerNotifyActivitiesS2C != null && message.hasOwnProperty("gamerNotifyActivitiesS2C"))
            object.gamerNotifyActivitiesS2C = $root.GamerNotifyActivitiesS2C.toObject(message.gamerNotifyActivitiesS2C, options);
        if (message.getActivityRewardS2C != null && message.hasOwnProperty("getActivityRewardS2C"))
            object.getActivityRewardS2C = $root.GetActivityRewardS2C.toObject(message.getActivityRewardS2C, options);
        if (message.createGuildS2C != null && message.hasOwnProperty("createGuildS2C"))
            object.createGuildS2C = $root.CreateGuildS2C.toObject(message.createGuildS2C, options);
        if (message.guildGamerLoginS2C != null && message.hasOwnProperty("guildGamerLoginS2C"))
            object.guildGamerLoginS2C = $root.GuildGamerLoginS2C.toObject(message.guildGamerLoginS2C, options);
        if (message.guildGamerLoginoutS2C != null && message.hasOwnProperty("guildGamerLoginoutS2C"))
            object.guildGamerLoginoutS2C = $root.GuildGamerLoginoutS2C.toObject(message.guildGamerLoginoutS2C, options);
        if (message.dissolutionGuildS2C != null && message.hasOwnProperty("dissolutionGuildS2C"))
            object.dissolutionGuildS2C = $root.DissolutionGuildS2C.toObject(message.dissolutionGuildS2C, options);
        if (message.getGuildS2C != null && message.hasOwnProperty("getGuildS2C"))
            object.getGuildS2C = $root.GetGuildS2C.toObject(message.getGuildS2C, options);
        if (message.getGuildListS2C != null && message.hasOwnProperty("getGuildListS2C"))
            object.getGuildListS2C = $root.GetGuildListS2C.toObject(message.getGuildListS2C, options);
        if (message.gamerNotifyApplyJoinGuildS2C != null && message.hasOwnProperty("gamerNotifyApplyJoinGuildS2C"))
            object.gamerNotifyApplyJoinGuildS2C = $root.GamerNotifyApplyJoinGuildS2C.toObject(message.gamerNotifyApplyJoinGuildS2C, options);
        if (message.applyJoinGuildS2C != null && message.hasOwnProperty("applyJoinGuildS2C"))
            object.applyJoinGuildS2C = $root.ApplyJoinGuildS2C.toObject(message.applyJoinGuildS2C, options);
        if (message.approvalJoinGuildS2C != null && message.hasOwnProperty("approvalJoinGuildS2C"))
            object.approvalJoinGuildS2C = $root.ApprovalJoinGuildS2C.toObject(message.approvalJoinGuildS2C, options);
        if (message.gamerNotifyInviteJoinGuildS2C != null && message.hasOwnProperty("gamerNotifyInviteJoinGuildS2C"))
            object.gamerNotifyInviteJoinGuildS2C = $root.GamerNotifyInviteJoinGuildS2C.toObject(message.gamerNotifyInviteJoinGuildS2C, options);
        if (message.inviteJoinGuildS2C != null && message.hasOwnProperty("inviteJoinGuildS2C"))
            object.inviteJoinGuildS2C = $root.InviteJoinGuildS2C.toObject(message.inviteJoinGuildS2C, options);
        if (message.agreeJoinGuildS2C != null && message.hasOwnProperty("agreeJoinGuildS2C"))
            object.agreeJoinGuildS2C = $root.AgreeJoinGuildS2C.toObject(message.agreeJoinGuildS2C, options);
        if (message.quitGuildS2C != null && message.hasOwnProperty("quitGuildS2C"))
            object.quitGuildS2C = $root.QuitGuildS2C.toObject(message.quitGuildS2C, options);
        if (message.kickOutGuildS2C != null && message.hasOwnProperty("kickOutGuildS2C"))
            object.kickOutGuildS2C = $root.KickOutGuildS2C.toObject(message.kickOutGuildS2C, options);
        if (message.gamerNotifyGuildMemUpdateS2C != null && message.hasOwnProperty("gamerNotifyGuildMemUpdateS2C"))
            object.gamerNotifyGuildMemUpdateS2C = $root.GamerNotifyGuildMemUpdateS2C.toObject(message.gamerNotifyGuildMemUpdateS2C, options);
        if (message.guildChatS2C != null && message.hasOwnProperty("guildChatS2C"))
            object.guildChatS2C = $root.GuildChatS2C.toObject(message.guildChatS2C, options);
        if (message.gamerNotifyGuildChatS2C != null && message.hasOwnProperty("gamerNotifyGuildChatS2C"))
            object.gamerNotifyGuildChatS2C = $root.GamerNotifyGuildChatS2C.toObject(message.gamerNotifyGuildChatS2C, options);
        if (message.gMS2C != null && message.hasOwnProperty("gMS2C"))
            object.gMS2C = $root.GMS2C.toObject(message.gMS2C, options);
        if (message.checkPointListS2C != null && message.hasOwnProperty("checkPointListS2C"))
            object.checkPointListS2C = $root.CheckPointListS2C.toObject(message.checkPointListS2C, options);
        if (message.gamerNotifyCheckPointListS2C != null && message.hasOwnProperty("gamerNotifyCheckPointListS2C"))
            object.gamerNotifyCheckPointListS2C = $root.GamerNotifyCheckPointListS2C.toObject(message.gamerNotifyCheckPointListS2C, options);
        if (message.gamerNotifyNewCheckPointListS2C != null && message.hasOwnProperty("gamerNotifyNewCheckPointListS2C"))
            object.gamerNotifyNewCheckPointListS2C = $root.GamerNotifyNewCheckPointListS2C.toObject(message.gamerNotifyNewCheckPointListS2C, options);
        if (message.gamerNotifyRewardS2C != null && message.hasOwnProperty("gamerNotifyRewardS2C"))
            object.gamerNotifyRewardS2C = $root.GamerNotifyRewardS2C.toObject(message.gamerNotifyRewardS2C, options);
        if (message.getPlotStarRewardS2C != null && message.hasOwnProperty("getPlotStarRewardS2C"))
            object.getPlotStarRewardS2C = $root.GetPlotStarRewardS2C.toObject(message.getPlotStarRewardS2C, options);
        if (message.buyTimesCheckPointS2C != null && message.hasOwnProperty("buyTimesCheckPointS2C"))
            object.buyTimesCheckPointS2C = $root.BuyTimesCheckPointS2C.toObject(message.buyTimesCheckPointS2C, options);
        if (message.sweepCheckPointS2C != null && message.hasOwnProperty("sweepCheckPointS2C"))
            object.sweepCheckPointS2C = $root.SweepCheckPointS2C.toObject(message.sweepCheckPointS2C, options);
        if (message.gamerSettlePVES2C != null && message.hasOwnProperty("gamerSettlePVES2C"))
            object.gamerSettlePVES2C = $root.GamerSettlePVES2C.toObject(message.gamerSettlePVES2C, options);
        if (message.draugListS2C != null && message.hasOwnProperty("draugListS2C"))
            object.draugListS2C = $root.DraugListS2C.toObject(message.draugListS2C, options);
        if (message.awakenDraugS2C != null && message.hasOwnProperty("awakenDraugS2C"))
            object.awakenDraugS2C = $root.AwakenDraugS2C.toObject(message.awakenDraugS2C, options);
        if (message.putDraugIntoPackS2C != null && message.hasOwnProperty("putDraugIntoPackS2C"))
            object.putDraugIntoPackS2C = $root.PutDraugIntoPackS2C.toObject(message.putDraugIntoPackS2C, options);
        if (message.swallowDraugS2C != null && message.hasOwnProperty("swallowDraugS2C"))
            object.swallowDraugS2C = $root.SwallowDraugS2C.toObject(message.swallowDraugS2C, options);
        if (message.decomposeDraugS2C != null && message.hasOwnProperty("decomposeDraugS2C"))
            object.decomposeDraugS2C = $root.DecomposeDraugS2C.toObject(message.decomposeDraugS2C, options);
        if (message.lockDraugS2C != null && message.hasOwnProperty("lockDraugS2C"))
            object.lockDraugS2C = $root.LockDraugS2C.toObject(message.lockDraugS2C, options);
        if (message.wearDraugS2C != null && message.hasOwnProperty("wearDraugS2C"))
            object.wearDraugS2C = $root.WearDraugS2C.toObject(message.wearDraugS2C, options);
        if (message.unwearDraugS2C != null && message.hasOwnProperty("unwearDraugS2C"))
            object.unwearDraugS2C = $root.UnwearDraugS2C.toObject(message.unwearDraugS2C, options);
        if (message.draugSelectHeroS2C != null && message.hasOwnProperty("draugSelectHeroS2C"))
            object.draugSelectHeroS2C = $root.DraugSelectHeroS2C.toObject(message.draugSelectHeroS2C, options);
        if (message.heroGroupListS2C != null && message.hasOwnProperty("heroGroupListS2C"))
            object.heroGroupListS2C = $root.HeroGroupListS2C.toObject(message.heroGroupListS2C, options);
        if (message.unlockHeroGroupS2C != null && message.hasOwnProperty("unlockHeroGroupS2C"))
            object.unlockHeroGroupS2C = $root.UnlockHeroGroupS2C.toObject(message.unlockHeroGroupS2C, options);
        if (message.changeNameHeroGroupS2C != null && message.hasOwnProperty("changeNameHeroGroupS2C"))
            object.changeNameHeroGroupS2C = $root.ChangeNameHeroGroupS2C.toObject(message.changeNameHeroGroupS2C, options);
        if (message.gamerNotifyUnlockPosHeroGroupS2C != null && message.hasOwnProperty("gamerNotifyUnlockPosHeroGroupS2C"))
            object.gamerNotifyUnlockPosHeroGroupS2C = $root.GamerNotifyUnlockPosHeroGroupS2C.toObject(message.gamerNotifyUnlockPosHeroGroupS2C, options);
        if (message.heroGroupChangeHeroS2C != null && message.hasOwnProperty("heroGroupChangeHeroS2C"))
            object.heroGroupChangeHeroS2C = $root.HeroGroupChangeHeroS2C.toObject(message.heroGroupChangeHeroS2C, options);
        if (message.heroGroupChangeSkillS2C != null && message.hasOwnProperty("heroGroupChangeSkillS2C"))
            object.heroGroupChangeSkillS2C = $root.HeroGroupChangeSkillS2C.toObject(message.heroGroupChangeSkillS2C, options);
        if (message.buyFatigueS2C != null && message.hasOwnProperty("buyFatigueS2C"))
            object.buyFatigueS2C = $root.BuyFatigueS2C.toObject(message.buyFatigueS2C, options);
        if (message.getFatigueWelfareS2C != null && message.hasOwnProperty("getFatigueWelfareS2C"))
            object.getFatigueWelfareS2C = $root.GetFatigueWelfareS2C.toObject(message.getFatigueWelfareS2C, options);
        if (message.gamerNotifyFatigueS2C != null && message.hasOwnProperty("gamerNotifyFatigueS2C"))
            object.gamerNotifyFatigueS2C = $root.GamerNotifyFatigueS2C.toObject(message.gamerNotifyFatigueS2C, options);
        if (message.upStarEquipS2C != null && message.hasOwnProperty("upStarEquipS2C"))
            object.upStarEquipS2C = $root.UpStarEquipS2C.toObject(message.upStarEquipS2C, options);
        if (message.eatEquipsS2C != null && message.hasOwnProperty("eatEquipsS2C"))
            object.eatEquipsS2C = $root.EatEquipsS2C.toObject(message.eatEquipsS2C, options);
        if (message.desEquipS2C != null && message.hasOwnProperty("desEquipS2C"))
            object.desEquipS2C = $root.DesEquipS2C.toObject(message.desEquipS2C, options);
        if (message.takeOnEquipS2C != null && message.hasOwnProperty("takeOnEquipS2C"))
            object.takeOnEquipS2C = $root.TakeOnEquipS2C.toObject(message.takeOnEquipS2C, options);
        if (message.takeOffEquipS2C != null && message.hasOwnProperty("takeOffEquipS2C"))
            object.takeOffEquipS2C = $root.TakeOffEquipS2C.toObject(message.takeOffEquipS2C, options);
        if (message.redSpotS2C != null && message.hasOwnProperty("redSpotS2C"))
            object.redSpotS2C = $root.RedSpotS2C.toObject(message.redSpotS2C, options);
        if (message.makeTeamS2C != null && message.hasOwnProperty("makeTeamS2C"))
            object.makeTeamS2C = $root.MakeTeamS2C.toObject(message.makeTeamS2C, options);
        if (message.setTeamAimS2C != null && message.hasOwnProperty("setTeamAimS2C"))
            object.setTeamAimS2C = $root.SetTeamAimS2C.toObject(message.setTeamAimS2C, options);
        if (message.joinTeamS2C != null && message.hasOwnProperty("joinTeamS2C"))
            object.joinTeamS2C = $root.JoinTeamS2C.toObject(message.joinTeamS2C, options);
        if (message.exitTeamS2C != null && message.hasOwnProperty("exitTeamS2C"))
            object.exitTeamS2C = $root.ExitTeamS2C.toObject(message.exitTeamS2C, options);
        if (message.turnOverTeamLeaderS2C != null && message.hasOwnProperty("turnOverTeamLeaderS2C"))
            object.turnOverTeamLeaderS2C = $root.TurnOverTeamLeaderS2C.toObject(message.turnOverTeamLeaderS2C, options);
        if (message.inviteTeamS2C != null && message.hasOwnProperty("inviteTeamS2C"))
            object.inviteTeamS2C = $root.InviteTeamS2C.toObject(message.inviteTeamS2C, options);
        if (message.rejectTeamS2C != null && message.hasOwnProperty("rejectTeamS2C"))
            object.rejectTeamS2C = $root.RejectTeamS2C.toObject(message.rejectTeamS2C, options);
        if (message.gamerNotifyTeamS2C != null && message.hasOwnProperty("gamerNotifyTeamS2C"))
            object.gamerNotifyTeamS2C = $root.GamerNotifyTeamS2C.toObject(message.gamerNotifyTeamS2C, options);
        if (message.gamerNotifyTeamInfoS2C != null && message.hasOwnProperty("gamerNotifyTeamInfoS2C"))
            object.gamerNotifyTeamInfoS2C = $root.GamerNotifyTeamInfoS2C.toObject(message.gamerNotifyTeamInfoS2C, options);
        if (message.gamerNotifyTeamChangeS2C != null && message.hasOwnProperty("gamerNotifyTeamChangeS2C"))
            object.gamerNotifyTeamChangeS2C = $root.GamerNotifyTeamChangeS2C.toObject(message.gamerNotifyTeamChangeS2C, options);
        if (message.gamerNotifyTeamMemberChangeS2C != null && message.hasOwnProperty("gamerNotifyTeamMemberChangeS2C"))
            object.gamerNotifyTeamMemberChangeS2C = $root.GamerNotifyTeamMemberChangeS2C.toObject(message.gamerNotifyTeamMemberChangeS2C, options);
        if (message.gamerNotifyLeaveTeamS2C != null && message.hasOwnProperty("gamerNotifyLeaveTeamS2C"))
            object.gamerNotifyLeaveTeamS2C = $root.GamerNotifyLeaveTeamS2C.toObject(message.gamerNotifyLeaveTeamS2C, options);
        if (message.kickTeamS2C != null && message.hasOwnProperty("kickTeamS2C"))
            object.kickTeamS2C = $root.KickTeamS2C.toObject(message.kickTeamS2C, options);
        if (message.setTeamHelpS2C != null && message.hasOwnProperty("setTeamHelpS2C"))
            object.setTeamHelpS2C = $root.SetTeamHelpS2C.toObject(message.setTeamHelpS2C, options);
        if (message.setTeamHeroS2C != null && message.hasOwnProperty("setTeamHeroS2C"))
            object.setTeamHeroS2C = $root.SetTeamHeroS2C.toObject(message.setTeamHeroS2C, options);
        if (message.switchTeamReadyS2C != null && message.hasOwnProperty("switchTeamReadyS2C"))
            object.switchTeamReadyS2C = $root.SwitchTeamReadyS2C.toObject(message.switchTeamReadyS2C, options);
        if (message.gamerNotifyTeamReadyS2C != null && message.hasOwnProperty("gamerNotifyTeamReadyS2C"))
            object.gamerNotifyTeamReadyS2C = $root.GamerNotifyTeamReadyS2C.toObject(message.gamerNotifyTeamReadyS2C, options);
        if (message.teamBattleS2C != null && message.hasOwnProperty("teamBattleS2C"))
            object.teamBattleS2C = $root.TeamBattleS2C.toObject(message.teamBattleS2C, options);
        if (message.getDanInfoS2C != null && message.hasOwnProperty("getDanInfoS2C"))
            object.getDanInfoS2C = $root.GetDanInfoS2C.toObject(message.getDanInfoS2C, options);
        if (message.gamerNotifyDanInfoS2C != null && message.hasOwnProperty("gamerNotifyDanInfoS2C"))
            object.gamerNotifyDanInfoS2C = $root.GamerNotifyDanInfoS2C.toObject(message.gamerNotifyDanInfoS2C, options);
        if (message.gamerNotifyNewSeasonS2C != null && message.hasOwnProperty("gamerNotifyNewSeasonS2C"))
            object.gamerNotifyNewSeasonS2C = $root.GamerNotifyNewSeasonS2C.toObject(message.gamerNotifyNewSeasonS2C, options);
        if (message.getDuelRankS2C != null && message.hasOwnProperty("getDuelRankS2C"))
            object.getDuelRankS2C = $root.GetDuelRankS2C.toObject(message.getDuelRankS2C, options);
        if (message.sysListS2C != null && message.hasOwnProperty("sysListS2C"))
            object.sysListS2C = $root.SysListS2C.toObject(message.sysListS2C, options);
        if (message.sysOpenShowS2C != null && message.hasOwnProperty("sysOpenShowS2C"))
            object.sysOpenShowS2C = $root.SysOpenShowS2C.toObject(message.sysOpenShowS2C, options);
        if (message.getQuestsS2C != null && message.hasOwnProperty("getQuestsS2C"))
            object.getQuestsS2C = $root.GetQuestsS2C.toObject(message.getQuestsS2C, options);
        if (message.gamerNotifyQuestsS2C != null && message.hasOwnProperty("gamerNotifyQuestsS2C"))
            object.gamerNotifyQuestsS2C = $root.GamerNotifyQuestsS2C.toObject(message.gamerNotifyQuestsS2C, options);
        if (message.getQuestRewardS2C != null && message.hasOwnProperty("getQuestRewardS2C"))
            object.getQuestRewardS2C = $root.GetQuestRewardS2C.toObject(message.getQuestRewardS2C, options);
        if (message.getDailyQuestRewardS2C != null && message.hasOwnProperty("getDailyQuestRewardS2C"))
            object.getDailyQuestRewardS2C = $root.GetDailyQuestRewardS2C.toObject(message.getDailyQuestRewardS2C, options);
        if (message.gamerHeroImageChooseS2C != null && message.hasOwnProperty("gamerHeroImageChooseS2C"))
            object.gamerHeroImageChooseS2C = $root.GamerHeroImageChooseS2C.toObject(message.gamerHeroImageChooseS2C, options);
        if (message.gamerHeroImageChangeS2C != null && message.hasOwnProperty("gamerHeroImageChangeS2C"))
            object.gamerHeroImageChangeS2C = $root.GamerHeroImageChangeS2C.toObject(message.gamerHeroImageChangeS2C, options);
        if (message.gamerBuyRollS2C != null && message.hasOwnProperty("gamerBuyRollS2C"))
            object.gamerBuyRollS2C = $root.GamerBuyRollS2C.toObject(message.gamerBuyRollS2C, options);
        if (message.getGamerSecretLandS2C != null && message.hasOwnProperty("getGamerSecretLandS2C"))
            object.getGamerSecretLandS2C = $root.GetGamerSecretLandS2C.toObject(message.getGamerSecretLandS2C, options);
        if (message.gamerNotifyGamerSecretLandInfoS2C != null && message.hasOwnProperty("gamerNotifyGamerSecretLandInfoS2C"))
            object.gamerNotifyGamerSecretLandInfoS2C = $root.GamerNotifyGamerSecretLandInfoS2C.toObject(message.gamerNotifyGamerSecretLandInfoS2C, options);
        if (message.gamerNotifySecretLandInfoS2C != null && message.hasOwnProperty("gamerNotifySecretLandInfoS2C"))
            object.gamerNotifySecretLandInfoS2C = $root.GamerNotifySecretLandInfoS2C.toObject(message.gamerNotifySecretLandInfoS2C, options);
        if (message.gamerSecretLandBattleRewardS2C != null && message.hasOwnProperty("gamerSecretLandBattleRewardS2C"))
            object.gamerSecretLandBattleRewardS2C = $root.GamerSecretLandBattleRewardS2C.toObject(message.gamerSecretLandBattleRewardS2C, options);
        if (message.gamerSecretLandWeekRewardS2C != null && message.hasOwnProperty("gamerSecretLandWeekRewardS2C"))
            object.gamerSecretLandWeekRewardS2C = $root.GamerSecretLandWeekRewardS2C.toObject(message.gamerSecretLandWeekRewardS2C, options);
        if (message.gamerSecretLandRankS2C != null && message.hasOwnProperty("gamerSecretLandRankS2C"))
            object.gamerSecretLandRankS2C = $root.GamerSecretLandRankS2C.toObject(message.gamerSecretLandRankS2C, options);
        if (message.getGamerSecretLandInfoS2C != null && message.hasOwnProperty("getGamerSecretLandInfoS2C"))
            object.getGamerSecretLandInfoS2C = $root.GetGamerSecretLandInfoS2C.toObject(message.getGamerSecretLandInfoS2C, options);
        if (message.gamerNotifySLTreasureBoxS2C != null && message.hasOwnProperty("gamerNotifySLTreasureBoxS2C"))
            object.gamerNotifySLTreasureBoxS2C = $root.GamerNotifySLTreasureBoxS2C.toObject(message.gamerNotifySLTreasureBoxS2C, options);
        if (message.gamerNotifyNewSecretLandResultS2C != null && message.hasOwnProperty("gamerNotifyNewSecretLandResultS2C"))
            object.gamerNotifyNewSecretLandResultS2C = $root.GamerNotifyNewSecretLandResultS2C.toObject(message.gamerNotifyNewSecretLandResultS2C, options);
        if (message.gamerChangeItemIsSawS2C != null && message.hasOwnProperty("gamerChangeItemIsSawS2C"))
            object.gamerChangeItemIsSawS2C = $root.GamerChangeItemIsSawS2C.toObject(message.gamerChangeItemIsSawS2C, options);
        return object;
    };
    S2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return S2C;
})();
module.exports = $root;
window.proto = $root;